syntax = "proto3";

package common;

import "mav.proto";


enum MAV_AUTOPILOT {
// Micro air vehicle / autopilot classes. This identifies the individual model.
  // Generic autopilot, full support for everything
  MAV_AUTOPILOT_GENERIC = 0;
  // Reserved for future use.
  MAV_AUTOPILOT_RESERVED = 1;
  // SLUGS autopilot, http://slugsuav.soe.ucsc.edu
  MAV_AUTOPILOT_SLUGS = 2;
  // ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org
  MAV_AUTOPILOT_ARDUPILOTMEGA = 3;
  // OpenPilot, http://openpilot.org
  MAV_AUTOPILOT_OPENPILOT = 4;
  // Generic autopilot only supporting simple waypoints
  MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5;
  // Generic autopilot supporting waypoints and other simple navigation commands
  MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6;
  // Generic autopilot supporting the full mission command set
  MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7;
  // No valid autopilot, e.g. a GCS or other MAVLink component
  MAV_AUTOPILOT_INVALID = 8;
  // PPZ UAV - http://nongnu.org/paparazzi
  MAV_AUTOPILOT_PPZ = 9;
  // UAV Dev Board
  MAV_AUTOPILOT_UDB = 10;
  // FlexiPilot
  MAV_AUTOPILOT_FP = 11;
  // PX4 Autopilot - http://px4.io/
  MAV_AUTOPILOT_PX4 = 12;
  // SMACCMPilot - http://smaccmpilot.org
  MAV_AUTOPILOT_SMACCMPILOT = 13;
  // AutoQuad -- http://autoquad.org
  MAV_AUTOPILOT_AUTOQUAD = 14;
  // Armazila -- http://armazila.com
  MAV_AUTOPILOT_ARMAZILA = 15;
  // Aerob -- http://aerob.ru
  MAV_AUTOPILOT_AEROB = 16;
  // ASLUAV autopilot -- http://www.asl.ethz.ch
  MAV_AUTOPILOT_ASLUAV = 17;
  // SmartAP Autopilot - http://sky-drones.com
  MAV_AUTOPILOT_SMARTAP = 18;
  // AirRails - http://uaventure.com
  MAV_AUTOPILOT_AIRRAILS = 19;
}

enum MAV_TYPE {
// MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).
  // Generic micro air vehicle
  MAV_TYPE_GENERIC = 0;
  // Fixed wing aircraft.
  MAV_TYPE_FIXED_WING = 1;
  // Quadrotor
  MAV_TYPE_QUADROTOR = 2;
  // Coaxial helicopter
  MAV_TYPE_COAXIAL = 3;
  // Normal helicopter with tail rotor.
  MAV_TYPE_HELICOPTER = 4;
  // Ground installation
  MAV_TYPE_ANTENNA_TRACKER = 5;
  // Operator control unit / ground control station
  MAV_TYPE_GCS = 6;
  // Airship, controlled
  MAV_TYPE_AIRSHIP = 7;
  // Free balloon, uncontrolled
  MAV_TYPE_FREE_BALLOON = 8;
  // Rocket
  MAV_TYPE_ROCKET = 9;
  // Ground rover
  MAV_TYPE_GROUND_ROVER = 10;
  // Surface vessel, boat, ship
  MAV_TYPE_SURFACE_BOAT = 11;
  // Submarine
  MAV_TYPE_SUBMARINE = 12;
  // Hexarotor
  MAV_TYPE_HEXAROTOR = 13;
  // Octorotor
  MAV_TYPE_OCTOROTOR = 14;
  // Tricopter
  MAV_TYPE_TRICOPTER = 15;
  // Flapping wing
  MAV_TYPE_FLAPPING_WING = 16;
  // Kite
  MAV_TYPE_KITE = 17;
  // Onboard companion controller
  MAV_TYPE_ONBOARD_CONTROLLER = 18;
  // Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter.
  MAV_TYPE_VTOL_DUOROTOR = 19;
  // Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter.
  MAV_TYPE_VTOL_QUADROTOR = 20;
  // Tiltrotor VTOL
  MAV_TYPE_VTOL_TILTROTOR = 21;
  // VTOL reserved 2
  MAV_TYPE_VTOL_RESERVED2 = 22;
  // VTOL reserved 3
  MAV_TYPE_VTOL_RESERVED3 = 23;
  // VTOL reserved 4
  MAV_TYPE_VTOL_RESERVED4 = 24;
  // VTOL reserved 5
  MAV_TYPE_VTOL_RESERVED5 = 25;
  // Gimbal
  MAV_TYPE_GIMBAL = 26;
  // ADSB system
  MAV_TYPE_ADSB = 27;
  // Steerable, nonrigid airfoil
  MAV_TYPE_PARAFOIL = 28;
  // Dodecarotor
  MAV_TYPE_DODECAROTOR = 29;
  // Camera
  MAV_TYPE_CAMERA = 30;
  // Charging station
  MAV_TYPE_CHARGING_STATION = 31;
  // FLARM collision avoidance system
  MAV_TYPE_FLARM = 32;
  // Servo
  MAV_TYPE_SERVO = 33;
  // Open Drone ID. See https://mavlink.io/en/services/opendroneid.html.
  MAV_TYPE_ODID = 34;
}

enum FIRMWARE_VERSION_TYPE {
// These values define the type of firmware release.  These values indicate the first version or release of this type.  For example the first alpha release would be 64, the second would be 65.
  // development release
  FIRMWARE_VERSION_TYPE_DEV = 0;
  // alpha release
  FIRMWARE_VERSION_TYPE_ALPHA = 64;
  // beta release
  FIRMWARE_VERSION_TYPE_BETA = 128;
  // release candidate
  FIRMWARE_VERSION_TYPE_RC = 192;
  // official stable release
  FIRMWARE_VERSION_TYPE_OFFICIAL = 255;
}

enum HL_FAILURE_FLAG {
// Flags to report failure cases over the high latency telemtry.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  HL_FAILURE_FLAG_UNDEFINED = 0;
  // GPS failure.
  // bit 1
  HL_FAILURE_FLAG_GPS = 0x00000001;
  // Differential pressure sensor failure.
  // bit 2
  HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = 0x00000002;
  // Absolute pressure sensor failure.
  // bit 3
  HL_FAILURE_FLAG_ABSOLUTE_PRESSURE = 0x00000004;
  // Accelerometer sensor failure.
  // bit 4
  HL_FAILURE_FLAG_3D_ACCEL = 0x00000008;
  // Gyroscope sensor failure.
  // bit 5
  HL_FAILURE_FLAG_3D_GYRO = 0x00000010;
  // Magnetometer sensor failure.
  // bit 6
  HL_FAILURE_FLAG_3D_MAG = 0x00000020;
  // Terrain subsystem failure.
  // bit 7
  HL_FAILURE_FLAG_TERRAIN = 0x00000040;
  // Battery failure/critical low battery.
  // bit 8
  HL_FAILURE_FLAG_BATTERY = 0x00000080;
  // RC receiver failure/no rc connection.
  // bit 9
  HL_FAILURE_FLAG_RC_RECEIVER = 0x00000100;
  // Offboard link failure.
  // bit 10
  HL_FAILURE_FLAG_OFFBOARD_LINK = 0x00000200;
  // Engine failure.
  // bit 11
  HL_FAILURE_FLAG_ENGINE = 0x00000400;
  // Geofence violation.
  // bit 12
  HL_FAILURE_FLAG_GEOFENCE = 0x00000800;
  // Estimator failure, for example measurement rejection or large variances.
  // bit 13
  HL_FAILURE_FLAG_ESTIMATOR = 0x00001000;
  // Mission failure.
  // bit 14
  HL_FAILURE_FLAG_MISSION = 0x00002000;
}

enum MAV_MODE_FLAG {
// These flags encode the MAV mode.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_MODE_FLAG_UNDEFINED = 0;
  // 0b00000001 Reserved for future use.
  // bit 1
  MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 0x00000001;
  // 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.
  // bit 2
  MAV_MODE_FLAG_TEST_ENABLED = 0x00000002;
  // 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.
  // bit 3
  MAV_MODE_FLAG_AUTO_ENABLED = 0x00000004;
  // 0b00001000 guided mode enabled, system flies waypoints / mission items.
  // bit 4
  MAV_MODE_FLAG_GUIDED_ENABLED = 0x00000008;
  // 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.
  // bit 5
  MAV_MODE_FLAG_STABILIZE_ENABLED = 0x00000010;
  // 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.
  // bit 6
  MAV_MODE_FLAG_HIL_ENABLED = 0x00000020;
  // 0b01000000 remote control input is enabled.
  // bit 7
  MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 0x00000040;
  // 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.
  // bit 8
  MAV_MODE_FLAG_SAFETY_ARMED = 0x00000080;
}

enum MAV_MODE_FLAG_DECODE_POSITION {
// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_MODE_FLAG_DECODE_POSITION_UNDEFINED = 0;
  // Eighth bit: 00000001
  // bit 1
  MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 0x00000001;
  // Seventh bit: 00000010
  // bit 2
  MAV_MODE_FLAG_DECODE_POSITION_TEST = 0x00000002;
  // Sixth bit:   00000100
  // bit 3
  MAV_MODE_FLAG_DECODE_POSITION_AUTO = 0x00000004;
  // Fifth bit:  00001000
  // bit 4
  MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 0x00000008;
  // Fourth bit: 00010000
  // bit 5
  MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 0x00000010;
  // Third bit:  00100000
  // bit 6
  MAV_MODE_FLAG_DECODE_POSITION_HIL = 0x00000020;
  // Second bit: 01000000
  // bit 7
  MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 0x00000040;
  // First bit:  10000000
  // bit 8
  MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 0x00000080;
}

enum MAV_GOTO {
// Actions that may be specified in MAV_CMD_OVERRIDE_GOTO to override mission execution.
  // Hold at the current position.
  MAV_GOTO_DO_HOLD = 0;
  // Continue with the next item in mission execution.
  MAV_GOTO_DO_CONTINUE = 1;
  // Hold at the current position of the system
  MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2;
  // Hold at the position specified in the parameters of the DO_HOLD action
  MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3;
}

enum MAV_MODE {
// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
// simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
  // System is not ready to fly, booting, calibrating, etc. No flag is set.
  MAV_MODE_PREFLIGHT = 0;
  // System is allowed to be active, under manual (RC) control, no stabilization
  MAV_MODE_MANUAL_DISARMED = 64;
  // UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
  MAV_MODE_TEST_DISARMED = 66;
  // System is allowed to be active, under assisted RC control.
  MAV_MODE_STABILIZE_DISARMED = 80;
  // System is allowed to be active, under autonomous control, manual setpoint
  MAV_MODE_GUIDED_DISARMED = 88;
  // System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
  MAV_MODE_AUTO_DISARMED = 92;
  // System is allowed to be active, under manual (RC) control, no stabilization
  MAV_MODE_MANUAL_ARMED = 192;
  // UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
  MAV_MODE_TEST_ARMED = 194;
  // System is allowed to be active, under assisted RC control.
  MAV_MODE_STABILIZE_ARMED = 208;
  // System is allowed to be active, under autonomous control, manual setpoint
  MAV_MODE_GUIDED_ARMED = 216;
  // System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
  MAV_MODE_AUTO_ARMED = 220;
}

enum MAV_STATE {
  // Uninitialized system, state is unknown.
  MAV_STATE_UNINIT = 0;
  // System is booting up.
  MAV_STATE_BOOT = 1;
  // System is calibrating and not flight-ready.
  MAV_STATE_CALIBRATING = 2;
  // System is grounded and on standby. It can be launched any time.
  MAV_STATE_STANDBY = 3;
  // System is active and might be already airborne. Motors are engaged.
  MAV_STATE_ACTIVE = 4;
  // System is in a non-normal flight mode. It can however still navigate.
  MAV_STATE_CRITICAL = 5;
  // System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.
  MAV_STATE_EMERGENCY = 6;
  // System just initialized its power-down sequence, will shut down now.
  MAV_STATE_POWEROFF = 7;
  // System is terminating itself.
  MAV_STATE_FLIGHT_TERMINATION = 8;
}

enum MAV_COMPONENT {
// Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).
// Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.
// When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.
  // Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message.
  MAV_COMP_ID_ALL = 0;
  // System flight controller component ("autopilot"). Only one autopilot is expected in a particular system.
  MAV_COMP_ID_AUTOPILOT1 = 1;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER1 = 25;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER2 = 26;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER3 = 27;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER4 = 28;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER5 = 29;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER6 = 30;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER7 = 31;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER8 = 32;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER9 = 33;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER10 = 34;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER11 = 35;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER12 = 36;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER13 = 37;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER14 = 38;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER15 = 39;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER16 = 40;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER17 = 41;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER18 = 42;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER19 = 43;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER20 = 44;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER21 = 45;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER22 = 46;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER23 = 47;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER24 = 48;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER25 = 49;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER26 = 50;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER27 = 51;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER28 = 52;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER29 = 53;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER30 = 54;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER31 = 55;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER32 = 56;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER33 = 57;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER34 = 58;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER35 = 59;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER36 = 60;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER37 = 61;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER38 = 62;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER39 = 63;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER40 = 64;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER41 = 65;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER42 = 66;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER43 = 67;
  // Telemetry radio (e.g. SiK radio, or other component that emits RADIO_STATUS messages).
  MAV_COMP_ID_TELEMETRY_RADIO = 68;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER45 = 69;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER46 = 70;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER47 = 71;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER48 = 72;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER49 = 73;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER50 = 74;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER51 = 75;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER52 = 76;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER53 = 77;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER54 = 78;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER55 = 79;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER56 = 80;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER57 = 81;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER58 = 82;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER59 = 83;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER60 = 84;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER61 = 85;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER62 = 86;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER63 = 87;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER64 = 88;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER65 = 89;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER66 = 90;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER67 = 91;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER68 = 92;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER69 = 93;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER70 = 94;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER71 = 95;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER72 = 96;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER73 = 97;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER74 = 98;
  // Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
  MAV_COMP_ID_USER75 = 99;
  // Camera #1.
  MAV_COMP_ID_CAMERA = 100;
  // Camera #2.
  MAV_COMP_ID_CAMERA2 = 101;
  // Camera #3.
  MAV_COMP_ID_CAMERA3 = 102;
  // Camera #4.
  MAV_COMP_ID_CAMERA4 = 103;
  // Camera #5.
  MAV_COMP_ID_CAMERA5 = 104;
  // Camera #6.
  MAV_COMP_ID_CAMERA6 = 105;
  // Servo #1.
  MAV_COMP_ID_SERVO1 = 140;
  // Servo #2.
  MAV_COMP_ID_SERVO2 = 141;
  // Servo #3.
  MAV_COMP_ID_SERVO3 = 142;
  // Servo #4.
  MAV_COMP_ID_SERVO4 = 143;
  // Servo #5.
  MAV_COMP_ID_SERVO5 = 144;
  // Servo #6.
  MAV_COMP_ID_SERVO6 = 145;
  // Servo #7.
  MAV_COMP_ID_SERVO7 = 146;
  // Servo #8.
  MAV_COMP_ID_SERVO8 = 147;
  // Servo #9.
  MAV_COMP_ID_SERVO9 = 148;
  // Servo #10.
  MAV_COMP_ID_SERVO10 = 149;
  // Servo #11.
  MAV_COMP_ID_SERVO11 = 150;
  // Servo #12.
  MAV_COMP_ID_SERVO12 = 151;
  // Servo #13.
  MAV_COMP_ID_SERVO13 = 152;
  // Servo #14.
  MAV_COMP_ID_SERVO14 = 153;
  // Gimbal #1.
  MAV_COMP_ID_GIMBAL = 154;
  // Logging component.
  MAV_COMP_ID_LOG = 155;
  // Automatic Dependent Surveillance-Broadcast (ADS-B) component.
  MAV_COMP_ID_ADSB = 156;
  // On Screen Display (OSD) devices for video links.
  MAV_COMP_ID_OSD = 157;
  // Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice.
  MAV_COMP_ID_PERIPHERAL = 158;
  // Gimbal ID for QX1.
  MAV_COMP_ID_QX1_GIMBAL = 159;
  // FLARM collision alert component.
  MAV_COMP_ID_FLARM = 160;
  // Gimbal #2.
  MAV_COMP_ID_GIMBAL2 = 171;
  // Gimbal #3.
  MAV_COMP_ID_GIMBAL3 = 172;
  // Gimbal #4
  MAV_COMP_ID_GIMBAL4 = 173;
  // Gimbal #5.
  MAV_COMP_ID_GIMBAL5 = 174;
  // Gimbal #6.
  MAV_COMP_ID_GIMBAL6 = 175;
  // Component that can generate/supply a mission flight plan (e.g. GCS or developer API).
  MAV_COMP_ID_MISSIONPLANNER = 190;
  // Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.).
  MAV_COMP_ID_PATHPLANNER = 195;
  // Component that plans a collision free path between two points.
  MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196;
  // Component that provides position estimates using VIO techniques.
  MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197;
  // Component that manages pairing of vehicle and GCS.
  MAV_COMP_ID_PAIRING_MANAGER = 198;
  // Inertial Measurement Unit (IMU) #1.
  MAV_COMP_ID_IMU = 200;
  // Inertial Measurement Unit (IMU) #2.
  MAV_COMP_ID_IMU_2 = 201;
  // Inertial Measurement Unit (IMU) #3.
  MAV_COMP_ID_IMU_3 = 202;
  // GPS #1.
  MAV_COMP_ID_GPS = 220;
  // GPS #2.
  MAV_COMP_ID_GPS2 = 221;
  // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
  MAV_COMP_ID_ODID_TXRX_1 = 236;
  // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
  MAV_COMP_ID_ODID_TXRX_2 = 237;
  // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
  MAV_COMP_ID_ODID_TXRX_3 = 238;
  // Component to bridge MAVLink to UDP (i.e. from a UART).
  MAV_COMP_ID_UDP_BRIDGE = 240;
  // Component to bridge to UART (i.e. from UDP).
  MAV_COMP_ID_UART_BRIDGE = 241;
  // Component handling TUNNEL messages (e.g. vendor specific GUI of a component).
  MAV_COMP_ID_TUNNEL_NODE = 242;
  // Component for handling system messages (e.g. to ARM, takeoff, etc.).
  MAV_COMP_ID_SYSTEM_CONTROL = 250;
}

enum MAV_SYS_STATUS_SENSOR {
// These encode the sensors whose status is sent as part of the SYS_STATUS message.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_SYS_STATUS_SENSOR_UNDEFINED = 0;
  // 0x01 3D gyro
  // bit 1
  MAV_SYS_STATUS_SENSOR_3D_GYRO = 0x00000001;
  // 0x02 3D accelerometer
  // bit 2
  MAV_SYS_STATUS_SENSOR_3D_ACCEL = 0x00000002;
  // 0x04 3D magnetometer
  // bit 3
  MAV_SYS_STATUS_SENSOR_3D_MAG = 0x00000004;
  // 0x08 absolute pressure
  // bit 4
  MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 0x00000008;
  // 0x10 differential pressure
  // bit 5
  MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 0x00000010;
  // 0x20 GPS
  // bit 6
  MAV_SYS_STATUS_SENSOR_GPS = 0x00000020;
  // 0x40 optical flow
  // bit 7
  MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 0x00000040;
  // 0x80 computer vision position
  // bit 8
  MAV_SYS_STATUS_SENSOR_VISION_POSITION = 0x00000080;
  // 0x100 laser based position
  // bit 9
  MAV_SYS_STATUS_SENSOR_LASER_POSITION = 0x00000100;
  // 0x200 external ground truth (Vicon or Leica)
  // bit 10
  MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 0x00000200;
  // 0x400 3D angular rate control
  // bit 11
  MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 0x00000400;
  // 0x800 attitude stabilization
  // bit 12
  MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 0x00000800;
  // 0x1000 yaw position
  // bit 13
  MAV_SYS_STATUS_SENSOR_YAW_POSITION = 0x00001000;
  // 0x2000 z/altitude control
  // bit 14
  MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 0x00002000;
  // 0x4000 x/y position control
  // bit 15
  MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 0x00004000;
  // 0x8000 motor outputs / control
  // bit 16
  MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 0x00008000;
  // 0x10000 rc receiver
  // bit 17
  MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 0x00010000;
  // 0x20000 2nd 3D gyro
  // bit 18
  MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 0x00020000;
  // 0x40000 2nd 3D accelerometer
  // bit 19
  MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 0x00040000;
  // 0x80000 2nd 3D magnetometer
  // bit 20
  MAV_SYS_STATUS_SENSOR_3D_MAG2 = 0x00080000;
  // 0x100000 geofence
  // bit 21
  MAV_SYS_STATUS_GEOFENCE = 0x00100000;
  // 0x200000 AHRS subsystem health
  // bit 22
  MAV_SYS_STATUS_AHRS = 0x00200000;
  // 0x400000 Terrain subsystem health
  // bit 23
  MAV_SYS_STATUS_TERRAIN = 0x00400000;
  // 0x800000 Motors are reversed
  // bit 24
  MAV_SYS_STATUS_REVERSE_MOTOR = 0x00800000;
  // 0x1000000 Logging
  // bit 25
  MAV_SYS_STATUS_LOGGING = 0x01000000;
  // 0x2000000 Battery
  // bit 26
  MAV_SYS_STATUS_SENSOR_BATTERY = 0x02000000;
  // 0x4000000 Proximity
  // bit 27
  MAV_SYS_STATUS_SENSOR_PROXIMITY = 0x04000000;
  // 0x8000000 Satellite Communication 
  // bit 28
  MAV_SYS_STATUS_SENSOR_SATCOM = 0x08000000;
  // 0x10000000 pre-arm check status. Always healthy when armed
  // bit 29
  MAV_SYS_STATUS_PREARM_CHECK = 0x10000000;
  // 0x20000000 Avoidance/collision prevention
  // bit 30
  MAV_SYS_STATUS_OBSTACLE_AVOIDANCE = 0x20000000;
}

enum MAV_FRAME {
  // Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).
  MAV_FRAME_GLOBAL = 0;
  // Local coordinate frame, Z-down (x: North, y: East, z: Down).
  MAV_FRAME_LOCAL_NED = 1;
  // NOT a coordinate frame, indicates a mission command.
  MAV_FRAME_MISSION = 2;
  // Global (WGS84) coordinate frame + altitude relative to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
  MAV_FRAME_GLOBAL_RELATIVE_ALT = 3;
  // Local coordinate frame, Z-up (x: East, y: North, z: Up).
  MAV_FRAME_LOCAL_ENU = 4;
  // Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL).
  MAV_FRAME_GLOBAL_INT = 5;
  // Global (WGS84) coordinate frame (scaled) + altitude relative to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
  MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6;
  // Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
  MAV_FRAME_LOCAL_OFFSET_NED = 7;
  // Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
  MAV_FRAME_BODY_NED = 8;
  // Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
  MAV_FRAME_BODY_OFFSET_NED = 9;
  // Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
  MAV_FRAME_GLOBAL_TERRAIN_ALT = 10;
  // Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
  MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11;
  // Body fixed frame of reference, Z-down (x: Forward, y: Right, z: Down).
  MAV_FRAME_BODY_FRD = 12;
  // MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward, y: Left, z: Up).
  MAV_FRAME_RESERVED_13 = 13;
  // MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by a motion capture system, Z-down (x: North, y: East, z: Down).
  MAV_FRAME_RESERVED_14 = 14;
  // MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by a motion capture system, Z-up (x: East, y: North, z: Up).
  MAV_FRAME_RESERVED_15 = 15;
  // MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: North, y: East, z: Down).
  MAV_FRAME_RESERVED_16 = 16;
  // MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: East, y: North, z: Up).
  MAV_FRAME_RESERVED_17 = 17;
  // MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: North, y: East, z: Down).
  MAV_FRAME_RESERVED_18 = 18;
  // MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: East, y: North, z: Up).
  MAV_FRAME_RESERVED_19 = 19;
  // Forward, Right, Down coordinate frame. This is a local frame with Z-down and arbitrary F/R alignment (i.e. not aligned with NED/earth frame).
  MAV_FRAME_LOCAL_FRD = 20;
  // Forward, Left, Up coordinate frame. This is a local frame with Z-up and arbitrary F/L alignment (i.e. not aligned with ENU/earth frame).
  MAV_FRAME_LOCAL_FLU = 21;
}

enum MAVLINK_DATA_STREAM_TYPE {
  MAVLINK_DATA_STREAM_IMG_JPEG = 0;
  MAVLINK_DATA_STREAM_IMG_BMP = 1;
  MAVLINK_DATA_STREAM_IMG_RAW8U = 2;
  MAVLINK_DATA_STREAM_IMG_RAW32U = 3;
  MAVLINK_DATA_STREAM_IMG_PGM = 4;
  MAVLINK_DATA_STREAM_IMG_PNG = 5;
}

enum FENCE_ACTION {
  // Disable fenced mode
  FENCE_ACTION_NONE = 0;
  // Switched to guided mode to return point (fence point 0)
  FENCE_ACTION_GUIDED = 1;
  // Report fence breach, but don't take action
  FENCE_ACTION_REPORT = 2;
  // Switched to guided mode to return point (fence point 0) with manual throttle control
  FENCE_ACTION_GUIDED_THR_PASS = 3;
  // Switch to RTL (return to launch) mode and head for the return point.
  FENCE_ACTION_RTL = 4;
}

enum FENCE_BREACH {
  // No last fence breach
  FENCE_BREACH_NONE = 0;
  // Breached minimum altitude
  FENCE_BREACH_MINALT = 1;
  // Breached maximum altitude
  FENCE_BREACH_MAXALT = 2;
  // Breached fence boundary
  FENCE_BREACH_BOUNDARY = 3;
}

enum FENCE_MITIGATE {
// Actions being taken to mitigate/prevent fence breach
  // Unknown
  FENCE_MITIGATE_UNKNOWN = 0;
  // No actions being taken
  FENCE_MITIGATE_NONE = 1;
  // Velocity limiting active to prevent breach
  FENCE_MITIGATE_VEL_LIMIT = 2;
}

enum MAV_MOUNT_MODE {
// Enumeration of possible mount operation modes. This message is used by obsolete/deprecated gimbal messages.
  // Load and keep safe position (Roll,Pitch,Yaw) from permant memory and stop stabilization
  MAV_MOUNT_MODE_RETRACT = 0;
  // Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
  MAV_MOUNT_MODE_NEUTRAL = 1;
  // Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization
  MAV_MOUNT_MODE_MAVLINK_TARGETING = 2;
  // Load neutral position and start RC Roll,Pitch,Yaw control with stabilization
  MAV_MOUNT_MODE_RC_TARGETING = 3;
  // Load neutral position and start to point to Lat,Lon,Alt
  MAV_MOUNT_MODE_GPS_POINT = 4;
  // Gimbal tracks system with specified system ID
  MAV_MOUNT_MODE_SYSID_TARGET = 5;
}

enum GIMBAL_DEVICE_CAP_FLAGS {
// Gimbal device (low level) capability flags (bitmap)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GIMBAL_DEVICE_CAP_FLAGS_UNDEFINED = 0;
  // Gimbal device supports a retracted position
  // bit 1
  GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 0x00000001;
  // Gimbal device supports a horizontal, forward looking position, stabilized
  // bit 2
  GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 0x00000002;
  // Gimbal device supports rotating around roll axis.
  // bit 3
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 0x00000004;
  // Gimbal device supports to follow a roll angle relative to the vehicle
  // bit 4
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 0x00000008;
  // Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)
  // bit 5
  GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 0x00000010;
  // Gimbal device supports rotating around pitch axis.
  // bit 6
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 0x00000020;
  // Gimbal device supports to follow a pitch angle relative to the vehicle
  // bit 7
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 0x00000040;
  // Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)
  // bit 8
  GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 0x00000080;
  // Gimbal device supports rotating around yaw axis.
  // bit 9
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 0x00000100;
  // Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)
  // bit 10
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 0x00000200;
  // Gimbal device supports locking to an absolute heading (often this is an option available)
  // bit 11
  GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 0x00000400;
  // Gimbal device supports yawing/panning infinetely (e.g. using slip disk).
  // bit 12
  GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 0x00000800;
}

enum GIMBAL_MANAGER_CAP_FLAGS {
// Gimbal manager high level capability flags (bitmap). The first 16 bits are identical to the GIMBAL_DEVICE_CAP_FLAGS which are identical with GIMBAL_DEVICE_FLAGS. However, the gimbal manager does not need to copy the flags from the gimbal but can also enhance the capabilities and thus add flags.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GIMBAL_MANAGER_CAP_FLAGS_UNDEFINED = 0;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
  // bit 1
  GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT = 0x00000001;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
  // bit 2
  GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL = 0x00000002;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
  // bit 3
  GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS = 0x00000004;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
  // bit 4
  GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW = 0x00000008;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
  // bit 5
  GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK = 0x00000010;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
  // bit 6
  GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS = 0x00000020;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
  // bit 7
  GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW = 0x00000040;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
  // bit 8
  GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK = 0x00000080;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
  // bit 9
  GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS = 0x00000100;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
  // bit 10
  GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW = 0x00000200;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
  // bit 11
  GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK = 0x00000400;
  // Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
  // bit 12
  GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 0x00000800;
  // Gimbal manager supports to point to a local position.
  // bit 17
  GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = 0x00010000;
  // Gimbal manager supports to point to a global latitude, longitude, altitude position.
  // bit 18
  GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = 0x00020000;
  // Gimbal manager supports tracking of a point on the camera.
  // bit 19
  GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT = 0x00040000;
  // Gimbal manager supports tracking of a point on the camera.
  // bit 20
  GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE = 0x00080000;
  // Gimbal manager supports pitching and yawing at an angular velocity scaled by focal length (the more zoomed in, the slower the movement).
  // bit 21
  GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_FOCAL_LENGTH_SCALE = 0x00100000;
  // Gimbal manager supports nudging when pointing to a location or tracking.
  // bit 22
  GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_NUDGING = 0x00200000;
  // Gimbal manager supports overriding when pointing to a location or tracking.
  // bit 23
  GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_OVERRIDE = 0x00400000;
}

enum GIMBAL_DEVICE_FLAGS {
// Flags for gimbal device (lower level) operation.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GIMBAL_DEVICE_FLAGS_UNDEFINED = 0;
  // Set to retracted safe position (no stabilization), takes presedence over all other flags.
  // bit 1
  GIMBAL_DEVICE_FLAGS_RETRACT = 0x00000001;
  // Set to neutral position (horizontal, forward looking, with stabiliziation), takes presedence over all other flags except RETRACT.
  // bit 2
  GIMBAL_DEVICE_FLAGS_NEUTRAL = 0x00000002;
  // Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.
  // bit 3
  GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 0x00000004;
  // Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.
  // bit 4
  GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 0x00000008;
  // Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).
  // bit 5
  GIMBAL_DEVICE_FLAGS_YAW_LOCK = 0x00000010;
}

enum GIMBAL_MANAGER_FLAGS {
// Flags for high level gimbal manager operation The first 16 bytes are identical to the GIMBAL_DEVICE_FLAGS.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GIMBAL_MANAGER_FLAGS_UNDEFINED = 0;
  // Based on GIMBAL_DEVICE_FLAGS_RETRACT
  // bit 1
  GIMBAL_MANAGER_FLAGS_RETRACT = 0x00000001;
  // Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
  // bit 2
  GIMBAL_MANAGER_FLAGS_NEUTRAL = 0x00000002;
  // Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
  // bit 3
  GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 0x00000004;
  // Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
  // bit 4
  GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 0x00000008;
  // Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
  // bit 5
  GIMBAL_MANAGER_FLAGS_YAW_LOCK = 0x00000010;
  // Scale angular velocity relative to focal length. This means the gimbal moves slower if it is zoomed in.
  // bit 21
  GIMBAL_MANAGER_FLAGS_ANGULAR_VELOCITY_RELATIVE_TO_FOCAL_LENGTH = 0x00100000;
  // Interpret attitude control on top of pointing to a location or tracking. If this flag is set, the quaternion is relative to the existing tracking angle.
  // bit 22
  GIMBAL_MANAGER_FLAGS_NUDGE = 0x00200000;
  // Completely override pointing to a location or tracking. If this flag is set, the quaternion is (as usual) according to GIMBAL_MANAGER_FLAGS_YAW_LOCK.
  // bit 23
  GIMBAL_MANAGER_FLAGS_OVERRIDE = 0x00400000;
  // This flag can be set to give up control previously set using MAV_CMD_DO_GIMBAL_MANAGER_ATTITUDE. This flag must not be combined with other flags.
  // bit 24
  GIMBAL_MANAGER_FLAGS_NONE = 0x00800000;
}

enum GIMBAL_DEVICE_ERROR_FLAGS {
// Gimbal device (low level) error flags (bitmap, 0 means no error)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GIMBAL_DEVICE_ERROR_FLAGS_UNDEFINED = 0;
  // Gimbal device is limited by hardware roll limit.
  // bit 1
  GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 0x00000001;
  // Gimbal device is limited by hardware pitch limit.
  // bit 2
  GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 0x00000002;
  // Gimbal device is limited by hardware yaw limit.
  // bit 3
  GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 0x00000004;
  // There is an error with the gimbal encoders.
  // bit 4
  GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 0x00000008;
  // There is an error with the gimbal power source.
  // bit 5
  GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 0x00000010;
  // There is an error with the gimbal motor's.
  // bit 6
  GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 0x00000020;
  // There is an error with the gimbal's software.
  // bit 7
  GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 0x00000040;
  // There is an error with the gimbal's communication.
  // bit 8
  GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 0x00000080;
}

enum UAVCAN_NODE_HEALTH {
// Generalized UAVCAN node health
  // The node is functioning properly.
  UAVCAN_NODE_HEALTH_OK = 0;
  // A critical parameter went out of range or the node has encountered a minor failure.
  UAVCAN_NODE_HEALTH_WARNING = 1;
  // The node has encountered a major failure.
  UAVCAN_NODE_HEALTH_ERROR = 2;
  // The node has suffered a fatal malfunction.
  UAVCAN_NODE_HEALTH_CRITICAL = 3;
}

enum UAVCAN_NODE_MODE {
// Generalized UAVCAN node mode
  // The node is performing its primary functions.
  UAVCAN_NODE_MODE_OPERATIONAL = 0;
  // The node is initializing; this mode is entered immediately after startup.
  UAVCAN_NODE_MODE_INITIALIZATION = 1;
  // The node is under maintenance.
  UAVCAN_NODE_MODE_MAINTENANCE = 2;
  // The node is in the process of updating its software.
  UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3;
  // The node is no longer available online.
  UAVCAN_NODE_MODE_OFFLINE = 7;
}

enum STORAGE_STATUS {
// Flags to indicate the status of camera storage.
  // Storage is missing (no microSD card loaded for example.)
  STORAGE_STATUS_EMPTY = 0;
  // Storage present but unformatted.
  STORAGE_STATUS_UNFORMATTED = 1;
  // Storage present and ready.
  STORAGE_STATUS_READY = 2;
  // Camera does not supply storage status information. Capacity information in STORAGE_INFORMATION fields will be ignored.
  STORAGE_STATUS_NOT_SUPPORTED = 3;
}

enum ORBIT_YAW_BEHAVIOUR {
// Yaw behaviour during orbit flight.
  // Vehicle front points to the center (default).
  ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER = 0;
  // Vehicle front holds heading when message received.
  ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING = 1;
  // Yaw uncontrolled.
  ORBIT_YAW_BEHAVIOUR_UNCONTROLLED = 2;
  // Vehicle front follows flight path (tangential to circle).
  ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE = 3;
  // Yaw controlled by RC input.
  ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED = 4;
}

enum WIFI_CONFIG_AP_RESPONSE {
// Possible responses from a WIFI_CONFIG_AP message.
  // Undefined response. Likely an indicative of a system that doesn't support this request.
  WIFI_CONFIG_AP_RESPONSE_UNDEFINED = 0;
  // Changes accepted.
  WIFI_CONFIG_AP_RESPONSE_ACCEPTED = 1;
  // Changes rejected.
  WIFI_CONFIG_AP_RESPONSE_REJECTED = 2;
  // Invalid Mode.
  WIFI_CONFIG_AP_RESPONSE_MODE_ERROR = 3;
  // Invalid SSID.
  WIFI_CONFIG_AP_RESPONSE_SSID_ERROR = 4;
  // Invalid Password.
  WIFI_CONFIG_AP_RESPONSE_PASSWORD_ERROR = 5;
}

enum CELLULAR_CONFIG_RESPONSE {
// Possible responses from a CELLULAR_CONFIG message.
  // Changes accepted.
  CELLULAR_CONFIG_RESPONSE_ACCEPTED = 0;
  // Invalid APN.
  CELLULAR_CONFIG_RESPONSE_APN_ERROR = 1;
  // Invalid PIN.
  CELLULAR_CONFIG_RESPONSE_PIN_ERROR = 2;
  // Changes rejected.
  CELLULAR_CONFIG_RESPONSE_REJECTED = 3;
}

enum WIFI_CONFIG_AP_MODE {
// WiFi Mode.
  // WiFi mode is undefined.
  WIFI_CONFIG_AP_MODE_UNDEFINED = 0;
  // WiFi configured as an access point.
  WIFI_CONFIG_AP_MODE_AP = 1;
  // WiFi configured as a station connected to an existing local WiFi network.
  WIFI_CONFIG_AP_MODE_STATION = 2;
  // WiFi disabled.
  WIFI_CONFIG_AP_MODE_DISABLED = 3;
}

enum COMP_METADATA_TYPE {
// Possible values for COMPONENT_INFORMATION.comp_metadata_type.
  // Version information which also includes information on other optional supported COMP_METADATA_TYPE's. Must be supported. Only downloadable from vehicle.
  COMP_METADATA_TYPE_VERSION = 0;
  // Parameter meta data.
  COMP_METADATA_TYPE_PARAMETER = 1;
}

enum MAV_CMD {
// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
  // Not used in MavLink, make protobuf happy.
  MAV_CMD_UNDEFINED = 0;
  // Navigate to waypoint.
  MAV_CMD_NAV_WAYPOINT = 16;
  // ***** START Params
  // Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
  // Acceptance radius (if the sphere with this radius is hit, the waypoint counts as reached)
  // 0 to pass through the WP, if > 0 radius to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
  // Desired yaw angle at waypoint (rotary wing). NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter around this waypoint an unlimited amount of time
  MAV_CMD_NAV_LOITER_UNLIM = 17;
  // ***** START Params
  // Empty
  // Empty
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
  // Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter around this waypoint for X turns
  MAV_CMD_NAV_LOITER_TURNS = 18;
  // ***** START Params
  // Number of turns.
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter at the specified latitude, longitude and altitude for a certain amount of time. Multicopter vehicles stop at the point (within a vehicle-specific acceptance radius). Forward-only moving vehicles (e.g. fixed-wing) circle the point with the specified radius/direction. If the Heading Required parameter (2) is non-zero forward moving aircraft will only leave the loiter circle once heading towards the next waypoint.
  MAV_CMD_NAV_LOITER_TIME = 19;
  // ***** START Params
  // Loiter time (only starts once Lat, Lon and Alt is reached).
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise.
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Return to launch location
  MAV_CMD_NAV_RETURN_TO_LAUNCH = 20;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Land at location.
  MAV_CMD_NAV_LAND = 21;
  // ***** START Params
  // Minimum target altitude if landing is aborted (0 = undefined/use system default).
  // Precision land mode.
  // Empty
  // Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude.
  // Longitude.
  // Landing altitude (ground level in current frame).
  // ***** END Params
  // Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.
  MAV_CMD_NAV_TAKEOFF = 22;
  // ***** START Params
  // Minimum pitch (if airspeed sensor present), desired pitch without sensor
  // Empty
  // Empty
  // Yaw angle (if magnetometer present), ignored without magnetometer. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Land at local position (local frame only)
  MAV_CMD_NAV_LAND_LOCAL = 23;
  // ***** START Params
  // Landing target number (if available)
  // Maximum accepted offset from desired landing position - computed magnitude from spherical coordinates: d = sqrt(x^2 + y^2 + z^2), which gives the maximum accepted distance between the desired landing position and the position where the vehicle is about to land
  // Landing descend rate
  // Desired yaw angle
  // Y-axis position
  // X-axis position
  // Z-axis / ground level position
  // ***** END Params
  // Takeoff from local position (local frame only)
  MAV_CMD_NAV_TAKEOFF_LOCAL = 24;
  // ***** START Params
  // Minimum pitch (if airspeed sensor present), desired pitch without sensor
  // Empty
  // Takeoff ascend rate
  // Yaw angle (if magnetometer or another yaw estimation source present), ignored without one of these
  // Y-axis position
  // X-axis position
  // Z-axis position
  // ***** END Params
  // Vehicle following, i.e. this waypoint represents the position of a moving vehicle
  MAV_CMD_NAV_FOLLOW = 25;
  // ***** START Params
  // Following logic to use (e.g. loitering or sinusoidal following) - depends on specific autopilot implementation
  // Ground speed of vehicle to be followed
  // Radius around waypoint. If positive loiter clockwise, else counter-clockwise
  // Desired yaw angle.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
  MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30;
  // ***** START Params
  // Climb or Descend (0 = Neutral, command completes when within 5m of this command's altitude, 1 = Climbing, command completes when at or above this command's altitude, 2 = Descending, command completes when at or below this command's altitude.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Desired altitude
  // ***** END Params
  // Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.
  MAV_CMD_NAV_LOITER_TO_ALT = 31;
  // ***** START Params
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter.
  // Empty
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Begin following a target
  MAV_CMD_DO_FOLLOW = 32;
  // ***** START Params
  // System ID (of the FOLLOW_TARGET beacon). Send 0 to disable follow-me and return to the default position hold mode.
  // Reserved
  // Reserved
  // Altitude mode: 0: Keep current altitude, 1: keep altitude difference to target, 2: go to a fixed altitude above home.
  // Altitude above home. (used if mode=2)
  // Reserved
  // Time to land in which the MAV should go to the default position hold mode after a message RX timeout.
  // ***** END Params
  // Reposition the MAV after a follow target command has been sent
  MAV_CMD_DO_FOLLOW_REPOSITION = 33;
  // ***** START Params
  // Camera q1 (where 0 is on the ray from the camera to the tracking device)
  // Camera q2
  // Camera q3
  // Camera q4
  // altitude offset from target
  // X offset from target
  // Y offset from target
  // ***** END Params
  // Start orbiting on the circumference of a circle defined by the parameters. Setting any value NaN results in using defaults.
  MAV_CMD_DO_ORBIT = 34;
  // ***** START Params
  // Radius of the circle. positive: Orbit clockwise. negative: Orbit counter-clockwise.
  // Tangential Velocity. NaN: Vehicle configuration default.
  // Yaw behavior of the vehicle.
  // Reserved (e.g. for dynamic center beacon options)
  // Center point latitude (if no MAV_FRAME specified) / X coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // Center point longitude (if no MAV_FRAME specified) / Y coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // Center point altitude (MSL) (if no MAV_FRAME specified) / Z coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // ***** END Params
  // Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
  MAV_CMD_NAV_ROI = 80;
  // ***** START Params
  // Region of interest mode.
  // Waypoint index/ target ID. (see MAV_ROI enum)
  // ROI index (allows a vehicle to manage multiple ROI's)
  // Empty
  // x the location of the fixed ROI (see MAV_FRAME)
  // y
  // z
  // ***** END Params
  // Control autonomous path planning on the MAV.
  MAV_CMD_NAV_PATHPLANNING = 81;
  // ***** START Params
  // 0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning
  // 0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid
  // Empty
  // Yaw angle at goal
  // Latitude/X of goal
  // Longitude/Y of goal
  // Altitude/Z of goal
  // ***** END Params
  // Navigate to waypoint using a spline path.
  MAV_CMD_NAV_SPLINE_WAYPOINT = 82;
  // ***** START Params
  // Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
  // Empty
  // Empty
  // Empty
  // Latitude/X of goal
  // Longitude/Y of goal
  // Altitude/Z of goal
  // ***** END Params
  // Takeoff from ground using VTOL mode, and transition to forward flight with specified heading. The command should be ignored by vehicles that dont support both VTOL and fixed-wing flight (multicopters, boats,etc.).
  MAV_CMD_NAV_VTOL_TAKEOFF = 84;
  // ***** START Params
  // Empty
  // Front transition heading.
  // Empty
  // Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Land using VTOL mode
  MAV_CMD_NAV_VTOL_LAND = 85;
  // ***** START Params
  // Empty
  // Empty
  // Approach altitude (with the same reference as the Altitude field). NaN if unspecified.
  // Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude (ground level)
  // ***** END Params
  // hand control over to an external controller
  MAV_CMD_NAV_GUIDED_ENABLE = 92;
  // ***** START Params
  // On / Off (> 0.5f on)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Delay the next navigation command a number of seconds or until a specified time
  MAV_CMD_NAV_DELAY = 93;
  // ***** START Params
  // Delay (-1 to enable time-of-day fields)
  // hour (24h format, UTC, -1 to ignore)
  // minute (24h format, UTC, -1 to ignore)
  // second (24h format, UTC)
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
  MAV_CMD_NAV_PAYLOAD_PLACE = 94;
  // ***** START Params
  // Maximum distance to descend.
  // Empty
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
  MAV_CMD_NAV_LAST = 95;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Delay mission state machine.
  MAV_CMD_CONDITION_DELAY = 112;
  // ***** START Params
  // Delay
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.
  MAV_CMD_CONDITION_CHANGE_ALT = 113;
  // ***** START Params
  // Descent / Ascend rate.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Target Altitude
  // ***** END Params
  // Delay mission state machine until within desired distance of next NAV point.
  MAV_CMD_CONDITION_DISTANCE = 114;
  // ***** START Params
  // Distance.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Reach a certain target angle.
  MAV_CMD_CONDITION_YAW = 115;
  // ***** START Params
  // target angle, 0 is north
  // angular speed
  // direction: -1: counter clockwise, 1: clockwise
  // 0: absolute angle, 1: relative offset
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
  MAV_CMD_CONDITION_LAST = 159;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set system mode.
  MAV_CMD_DO_SET_MODE = 176;
  // ***** START Params
  // Mode
  // Custom mode - this is system specific, please refer to the individual autopilot specifications for details.
  // Custom sub mode - this is system specific, please refer to the individual autopilot specifications for details.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Jump to the desired command in the mission list.  Repeat this action only the specified number of times
  MAV_CMD_DO_JUMP = 177;
  // ***** START Params
  // Sequence number
  // Repeat count
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Change speed and/or throttle set points.
  MAV_CMD_DO_CHANGE_SPEED = 178;
  // ***** START Params
  // Speed type (0=Airspeed, 1=Ground Speed, 2=Climb Speed, 3=Descent Speed)
  // Speed (-1 indicates no change)
  // Throttle (-1 indicates no change)
  // 0: absolute, 1: relative
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Changes the home location either to the current location or a specified location.
  MAV_CMD_DO_SET_HOME = 179;
  // ***** START Params
  // Use current (1=use current location, 0=use specified location)
  // Empty
  // Empty
  // Yaw angle. NaN to use default heading
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
  MAV_CMD_DO_SET_PARAMETER = 180;
  // ***** START Params
  // Parameter number
  // Parameter value
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set a relay to a condition.
  MAV_CMD_DO_SET_RELAY = 181;
  // ***** START Params
  // Relay instance number.
  // Setting. (1=on, 0=off, others possible depending on system hardware)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Cycle a relay on and off for a desired number of cycles with a desired period.
  MAV_CMD_DO_REPEAT_RELAY = 182;
  // ***** START Params
  // Relay instance number.
  // Cycle count.
  // Cycle time.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set a servo to a desired PWM value.
  MAV_CMD_DO_SET_SERVO = 183;
  // ***** START Params
  // Servo instance number.
  // Pulse Width Modulation.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
  MAV_CMD_DO_REPEAT_SERVO = 184;
  // ***** START Params
  // Servo instance number.
  // Pulse Width Modulation.
  // Cycle count.
  // Cycle time.
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Terminate flight immediately
  MAV_CMD_DO_FLIGHTTERMINATION = 185;
  // ***** START Params
  // Flight termination activated if > 0.5
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Change altitude set point.
  MAV_CMD_DO_CHANGE_ALTITUDE = 186;
  // ***** START Params
  // Altitude
  // Frame of new altitude.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets actuators (e.g. servos) to a desired value. The actuator numbers are mapped to specific outputs (e.g. on any MAIN or AUX PWM or UAVCAN) using a flight-stack specific mechanism (i.e. a parameter).
  MAV_CMD_DO_SET_ACTUATOR = 187;
  // ***** START Params
  // Actuator 1 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 2 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 3 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 4 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 5 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 6 value, scaled from [-1 to 1]. NaN to ignore.
  // Index of actuator set (i.e if set to 1, Actuator 1 becomes Actuator 7)
  // ***** END Params
  // Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
  MAV_CMD_DO_LAND_START = 189;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Empty
  // ***** END Params
  // Mission command to perform a landing from a rally point.
  MAV_CMD_DO_RALLY_LAND = 190;
  // ***** START Params
  // Break altitude
  // Landing speed
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to safely abort an autonomous landing.
  MAV_CMD_DO_GO_AROUND = 191;
  // ***** START Params
  // Altitude
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Reposition the vehicle to a specific WGS84 global position.
  MAV_CMD_DO_REPOSITION = 192;
  // ***** START Params
  // Ground speed, less than 0 (-1) for default
  // Bitmask of option flags.
  // Reserved
  // Yaw heading. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.). For planes indicates loiter direction (0: clockwise, 1: counter clockwise)
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // If in a GPS controlled position mode, hold the current position or continue.
  MAV_CMD_DO_PAUSE_CONTINUE = 193;
  // ***** START Params
  // 0: Pause current mission or reposition command, hold current position. 1: Continue mission. A VTOL capable vehicle should enter hover mode (multicopter and VTOL planes). A plane should loiter with the default loiter radius.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Set moving direction to forward or reverse.
  MAV_CMD_DO_SET_REVERSE = 194;
  // ***** START Params
  // Direction (0=Forward, 1=Reverse)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.
  MAV_CMD_DO_SET_ROI_LOCATION = 195;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Latitude of ROI location
  // Longitude of ROI location
  // Altitude of ROI location
  // ***** END Params
  // Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
  MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Pitch offset from next waypoint, positive tilting up
  // roll offset from next waypoint, positive banking to the right
  // yaw offset from next waypoint, positive panning to the right
  // ***** END Params
  // Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.
  MAV_CMD_DO_SET_ROI_NONE = 197;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
  MAV_CMD_DO_SET_ROI_SYSID = 198;
  // ***** START Params
  // System ID
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // Control onboard camera system.
  MAV_CMD_DO_CONTROL_VIDEO = 200;
  // ***** START Params
  // Camera ID (-1 for all)
  // Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw
  // Transmission mode: 0: video stream, >0: single images every n seconds
  // Recording: 0: disabled, 1: enabled compressed, 2: enabled raw
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
  MAV_CMD_DO_SET_ROI = 201;
  // ***** START Params
  // Region of interest mode.
  // Waypoint index/ target ID (depends on param 1).
  // Region of interest index. (allows a vehicle to manage multiple ROI's)
  // Empty
  // MAV_ROI_WPNEXT: pitch offset from next waypoint, MAV_ROI_LOCATION: latitude
  // MAV_ROI_WPNEXT: roll offset from next waypoint, MAV_ROI_LOCATION: longitude
  // MAV_ROI_WPNEXT: yaw offset from next waypoint, MAV_ROI_LOCATION: altitude
  // ***** END Params
  // Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
  MAV_CMD_DO_DIGICAM_CONFIGURE = 202;
  // ***** START Params
  // Modes: P, TV, AV, M, Etc.
  // Shutter speed: Divisor number for one second.
  // Aperture: F stop number.
  // ISO number e.g. 80, 100, 200, Etc.
  // Exposure type enumerator.
  // Command Identity.
  // Main engine cut-off time before camera trigger. (0 means no cut-off)
  // ***** END Params
  // Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
  MAV_CMD_DO_DIGICAM_CONTROL = 203;
  // ***** START Params
  // Session control e.g. show/hide lens
  // Zoom's absolute position
  // Zooming step value to offset zoom from the current position
  // Focus Locking, Unlocking or Re-locking
  // Shooting Command
  // Command Identity
  // Test shot identifier. If set to 1, image will only be captured, but not counted towards internal frame count.
  // ***** END Params
  // Mission command to configure a camera or antenna mount
  MAV_CMD_DO_MOUNT_CONFIGURE = 204;
  // ***** START Params
  // Mount operation mode
  // stabilize roll? (1 = yes, 0 = no)
  // stabilize pitch? (1 = yes, 0 = no)
  // stabilize yaw? (1 = yes, 0 = no)
  // roll input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // pitch input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // yaw input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // ***** END Params
  // Mission command to control a camera or antenna mount
  MAV_CMD_DO_MOUNT_CONTROL = 205;
  // ***** START Params
  // pitch depending on mount mode (degrees or degrees/second depending on pitch input).
  // roll depending on mount mode (degrees or degrees/second depending on roll input).
  // yaw depending on mount mode (degrees or degrees/second depending on yaw input).
  // altitude depending on mount mode.
  // latitude, set if appropriate mount mode.
  // longitude, set if appropriate mount mode.
  // Mount mode.
  // ***** END Params
  // Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
  MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206;
  // ***** START Params
  // Camera trigger distance. 0 to stop triggering.
  // Camera shutter integration time. -1 or 0 to ignore
  // Trigger camera once immediately. (0 = no trigger, 1 = trigger)
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to enable the geofence
  MAV_CMD_DO_FENCE_ENABLE = 207;
  // ***** START Params
  // enable? (0=disable, 1=enable, 2=disable_floor_only)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission item/command to release a parachute or enable/disable auto release.
  MAV_CMD_DO_PARACHUTE = 208;
  // ***** START Params
  // Action
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to perform motor test.
  MAV_CMD_DO_MOTOR_TEST = 209;
  // ***** START Params
  // Motor instance number. (from 1 to max number of motors on the vehicle)
  // Throttle type.
  // Throttle.
  // Timeout.
  // Motor count. (number of motors to test to test in sequence, waiting for the timeout above between them; 0=1 motor, 1=1 motor, 2=2 motors...)
  // Motor test order.
  // Empty
  // ***** END Params
  // Change to/from inverted flight.
  MAV_CMD_DO_INVERTED_FLIGHT = 210;
  // ***** START Params
  // Inverted flight. (0=normal, 1=inverted)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets a desired vehicle turn angle and speed change.
  MAV_CMD_NAV_SET_YAW_SPEED = 213;
  // ***** START Params
  // Yaw angle to adjust steering by.
  // Speed.
  // Final angle. (0=absolute, 1=relative)
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
  MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214;
  // ***** START Params
  // Camera trigger cycle time. -1 or 0 to ignore.
  // Camera shutter integration time. Should be less than trigger cycle time. -1 or 0 to ignore.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to control a camera or antenna mount, using a quaternion as reference.
  MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220;
  // ***** START Params
  // quaternion param q1, w (1 in null-rotation)
  // quaternion param q2, x (0 in null-rotation)
  // quaternion param q3, y (0 in null-rotation)
  // quaternion param q4, z (0 in null-rotation)
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // set id of master controller
  MAV_CMD_DO_GUIDED_MASTER = 221;
  // ***** START Params
  // System ID
  // Component ID
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set limits for external control
  MAV_CMD_DO_GUIDED_LIMITS = 222;
  // ***** START Params
  // Timeout - maximum time that external controller will be allowed to control vehicle. 0 means no timeout.
  // Altitude (MSL) min - if vehicle moves below this alt, the command will be aborted and the mission will continue. 0 means no lower altitude limit.
  // Altitude (MSL) max - if vehicle moves above this alt, the command will be aborted and the mission will continue. 0 means no upper altitude limit.
  // Horizontal move limit - if vehicle moves more than this distance from its location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal move limit.
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
  MAV_CMD_DO_ENGINE_CONTROL = 223;
  // ***** START Params
  // 0: Stop engine, 1:Start Engine
  // 0: Warm start, 1:Cold start. Controls use of choke where applicable
  // Height delay. This is for commanding engine start only after the vehicle has gained the specified height. Used in VTOL vehicles during takeoff to start engine after the aircraft is off the ground. Zero for no delay.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
  MAV_CMD_DO_SET_MISSION_CURRENT = 224;
  // ***** START Params
  // Mission sequence value to set
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
  MAV_CMD_DO_LAST = 240;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.
  MAV_CMD_PREFLIGHT_CALIBRATION = 241;
  // ***** START Params
  // 1: gyro calibration, 3: gyro temperature calibration
  // 1: magnetometer calibration
  // 1: ground pressure calibration
  // 1: radio RC calibration, 2: RC trim calibration
  // 1: accelerometer calibration, 2: board level calibration, 3: accelerometer temperature calibration, 4: simple accelerometer calibration
  // 1: APM: compass/motor interference calibration (PX4: airspeed calibration, deprecated), 2: airspeed calibration
  // 1: ESC calibration, 3: barometer temperature calibration
  // ***** END Params
  // Set sensor offsets. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242;
  // ***** START Params
  // Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer, 6: third magnetometer
  // X axis offset (or generic dimension 1), in the sensor's raw units
  // Y axis offset (or generic dimension 2), in the sensor's raw units
  // Z axis offset (or generic dimension 3), in the sensor's raw units
  // Generic dimension 4, in the sensor's raw units
  // Generic dimension 5, in the sensor's raw units
  // Generic dimension 6, in the sensor's raw units
  // ***** END Params
  // Trigger UAVCAN config. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_UAVCAN = 243;
  // ***** START Params
  // 1: Trigger actuator ID assignment and direction mapping.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_STORAGE = 245;
  // ***** START Params
  // Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults
  // Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults
  // Onboard logging: 0: Ignore, 1: Start default rate logging, -1: Stop logging, > 1: logging rate (e.g. set to 1000 for 1000 Hz logging)
  // Reserved
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Request the reboot or shutdown of system components.
  MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246;
  // ***** START Params
  // 0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot, 3: Reboot autopilot and keep it in the bootloader until upgraded.
  // 0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer, 3: Reboot onboard computer and keep it in the bootloader until upgraded.
  // WIP: 0: Do nothing for camera, 1: Reboot onboard camera, 2: Shutdown onboard camera, 3: Reboot onboard camera and keep it in the bootloader until upgraded
  // WIP: 0: Do nothing for mount (e.g. gimbal), 1: Reboot mount, 2: Shutdown mount, 3: Reboot mount and keep it in the bootloader until upgraded
  // Reserved (set to 0)
  // Reserved (set to 0)
  // WIP: ID (e.g. camera ID -1 for all IDs)
  // ***** END Params
  // Request a target system to start an upgrade of one (or all) of its components. For example, the command might be sent to a companion computer to cause it to upgrade a connected flight controller. The system doing the upgrade will report progress using the normal command protocol sequence for a long running operation. Command protocol information: https://mavlink.io/en/services/command.html.
  MAV_CMD_DO_UPGRADE = 247;
  // ***** START Params
  // Component id of the component to be upgraded. If set to 0, all components should be upgraded.
  // 0: Do not reboot component after the action is executed, 1: Reboot component after the action is executed.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // WIP: upgrade progress report rate (can be used for more granular control).
  // ***** END Params
  // Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.
  MAV_CMD_OVERRIDE_GOTO = 252;
  // ***** START Params
  // MAV_GOTO_DO_HOLD: pause mission and either hold or move to specified position (depending on param2), MAV_GOTO_DO_CONTINUE: resume mission.
  // MAV_GOTO_HOLD_AT_CURRENT_POSITION: hold at current position, MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position.
  // Coordinate frame of hold point.
  // Desired yaw angle.
  // Latitude/X position.
  // Longitude/Y position.
  // Altitude/Z position.
  // ***** END Params
  // start running a mission
  MAV_CMD_MISSION_START = 300;
  // ***** START Params
  // first_item: the first mission item to run
  // last_item:  the last mission item to run (after this item is run, the mission ends)
  // ***** END Params
  // Arms / Disarms a component
  MAV_CMD_COMPONENT_ARM_DISARM = 400;
  // ***** START Params
  // 0: disarm, 1: arm
  // 0: arm-disarm unless prevented by safety checks (i.e. when landed), 21196: force arming/disarming (e.g. allow arming to override preflight checks and disarming in flight)
  // ***** END Params
  // Turns illuminators ON/OFF. An illuminator is a light source that is used for lighting up dark areas external to the sytstem: e.g. a torch or searchlight (as opposed to a light source for illuminating the system itself, e.g. an indicator light).
  MAV_CMD_ILLUMINATOR_ON_OFF = 405;
  // ***** START Params
  // 0: Illuminators OFF, 1: Illuminators ON
  // ***** END Params
  // Request the home position from the vehicle.
  MAV_CMD_GET_HOME_POSITION = 410;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Inject artificial failure for testing purposes. Note that autopilots should implement an additional protection before accepting this command such as a specific param setting.
  MAV_CMD_INJECT_FAILURE = 420;
  // ***** START Params
  // The unit which is affected by the failure.
  // The type how the failure manifests itself.
  // Instance affected by failure (0 to signal all).
  // ***** END Params
  // Starts receiver pairing.
  MAV_CMD_START_RX_PAIR = 500;
  // ***** START Params
  // 0:Spektrum.
  // RC type.
  // ***** END Params
  // Request the interval between messages for a particular MAVLink message ID. The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
  MAV_CMD_GET_MESSAGE_INTERVAL = 510;
  // ***** START Params
  // The MAVLink message ID
  // ***** END Params
  // Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.
  MAV_CMD_SET_MESSAGE_INTERVAL = 511;
  // ***** START Params
  // The MAVLink message ID
  // The interval between two messages. Set to -1 to disable and 0 to request default rate.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Target address of message stream (if message has target address fields). 0: Flight-stack default (recommended), 1: address of requestor, 2: broadcast.
  // ***** END Params
  // Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).
  MAV_CMD_REQUEST_MESSAGE = 512;
  // ***** START Params
  // The MAVLink message ID of the requested message.
  // Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.
  // ***** END Params
  // Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message
  MAV_CMD_REQUEST_PROTOCOL_VERSION = 519;
  // ***** START Params
  // 1: Request supported protocol versions by all nodes on the network
  // Reserved (all remaining params)
  // ***** END Params
  // Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
  MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520;
  // ***** START Params
  // 1: Request autopilot version
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera information (CAMERA_INFORMATION).
  MAV_CMD_REQUEST_CAMERA_INFORMATION = 521;
  // ***** START Params
  // 0: No action 1: Request camera capabilities
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera settings (CAMERA_SETTINGS).
  MAV_CMD_REQUEST_CAMERA_SETTINGS = 522;
  // ***** START Params
  // 0: No Action 1: Request camera settings
  // Reserved (all remaining params)
  // ***** END Params
  // Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
  MAV_CMD_REQUEST_STORAGE_INFORMATION = 525;
  // ***** START Params
  // Storage ID (0 for all, 1 for first, 2 for second, etc.)
  // 0: No Action 1: Request storage information
  // Reserved (all remaining params)
  // ***** END Params
  // Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.
  MAV_CMD_STORAGE_FORMAT = 526;
  // ***** START Params
  // Storage ID (1 for first, 2 for second, etc.)
  // Format storage (and reset image log). 0: No action 1: Format storage
  // Reset Image Log (without formatting storage medium). This will reset CAMERA_CAPTURE_STATUS.image_count and CAMERA_IMAGE_CAPTURED.image_index. 0: No action 1: Reset Image Log
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera capture status (CAMERA_CAPTURE_STATUS)
  MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527;
  // ***** START Params
  // 0: No Action 1: Request camera capture status
  // Reserved (all remaining params)
  // ***** END Params
  // Request flight information (FLIGHT_INFORMATION)
  MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528;
  // ***** START Params
  // 1: Request flight information
  // Reserved (all remaining params)
  // ***** END Params
  // Reset all camera settings to Factory Default
  MAV_CMD_RESET_CAMERA_SETTINGS = 529;
  // ***** START Params
  // 0: No Action 1: Reset all settings
  // Reserved (all remaining params)
  // ***** END Params
  // Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
  MAV_CMD_SET_CAMERA_MODE = 530;
  // ***** START Params
  // Reserved (Set to 0)
  // Camera mode
  // ***** END Params
  // Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success).
  MAV_CMD_SET_CAMERA_ZOOM = 531;
  // ***** START Params
  // Zoom type
  // Zoom value. The range of valid values depend on the zoom type.
  // ***** END Params
  // Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success).
  MAV_CMD_SET_CAMERA_FOCUS = 532;
  // ***** START Params
  // Focus type
  // Focus value
  // ***** END Params
  // Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
  MAV_CMD_JUMP_TAG = 600;
  // ***** START Params
  // Tag.
  // ***** END Params
  // Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
  MAV_CMD_DO_JUMP_TAG = 601;
  // ***** START Params
  // Target tag to jump to.
  // Repeat count.
  // ***** END Params
  // High level setpoint to be sent to a gimbal manager to set a gimbal attitude. It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: a gimbal is never to react to this command but only the gimbal manager.
  MAV_CMD_DO_GIMBAL_MANAGER_TILTPAN = 1000;
  // ***** START Params
  // Tilt/pitch rate (positive to tilt up).
  // Pan/yaw rate (positive to pan to the right).
  // Tilt/pitch angle (positive to tilt up, relative to vehicle for PAN mode, relative to world horizon for HOLD mode).
  // Pan/yaw angle (positive to pan to the right, relative to vehicle for PAN mode, absolute to North for HOLD mode).
  // Gimbal manager flags to use.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // If the gimbal manager supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
  MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT = 1001;
  // ***** START Params
  // Point to track x value.
  // Point to track y value.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // If the gimbal supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
  MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE = 1002;
  // ***** START Params
  // Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  // Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  // Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  // Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each capture. Use NaN for reserved values.
  MAV_CMD_IMAGE_START_CAPTURE = 2000;
  // ***** START Params
  // Reserved (Set to 0)
  // Desired elapsed time between two consecutive pictures (in seconds). Minimum values depend on hardware (typically greater than 2 seconds).
  // Total number of images to capture. 0 to capture forever/until MAV_CMD_IMAGE_STOP_CAPTURE.
  // Capture sequence number starting from 1. This is only valid for single-capture (param3 == 1). Increment the capture ID for each capture command to prevent double captures when a command is re-transmitted. Use 0 to ignore it.
  // Reserved (all remaining params)
  // ***** END Params
  // Stop image capture sequence Use NaN for reserved values.
  MAV_CMD_IMAGE_STOP_CAPTURE = 2001;
  // ***** START Params
  // Reserved (Set to 0)
  // ***** END Params
  // Re-request a CAMERA_IMAGE_CAPTURED message.
  MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE = 2002;
  // ***** START Params
  // Sequence number for missing CAMERA_IMAGE_CAPTURED message
  // ***** END Params
  // Enable or disable on-board camera triggering system.
  MAV_CMD_DO_TRIGGER_CONTROL = 2003;
  // ***** START Params
  // Trigger enable/disable (0 for disable, 1 for start), -1 to ignore
  // 1 to reset the trigger sequence, -1 or 0 to ignore
  // 1 to pause triggering, but without switching the camera off or retracting it. -1 to ignore
  // ***** END Params
  // Starts video capture (recording).
  MAV_CMD_VIDEO_START_CAPTURE = 2500;
  // ***** START Params
  // Video Stream ID (0 for all streams)
  // Frequency CAMERA_CAPTURE_STATUS messages should be sent while recording (0 for no messages, otherwise frequency)
  // ***** END Params
  // Stop the current video capture (recording).
  MAV_CMD_VIDEO_STOP_CAPTURE = 2501;
  // ***** START Params
  // Video Stream ID (0 for all streams)
  // ***** END Params
  // Start video streaming
  MAV_CMD_VIDEO_START_STREAMING = 2502;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Stop the given video stream
  MAV_CMD_VIDEO_STOP_STREAMING = 2503;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request video stream information (VIDEO_STREAM_INFORMATION)
  MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION = 2504;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request video stream status (VIDEO_STREAM_STATUS)
  MAV_CMD_REQUEST_VIDEO_STREAM_STATUS = 2505;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
  MAV_CMD_LOGGING_START = 2510;
  // ***** START Params
  // Format: 0: ULog
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  // Request to stop streaming log data over MAVLink
  MAV_CMD_LOGGING_STOP = 2511;
  // ***** START Params
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  MAV_CMD_AIRFRAME_CONFIGURATION = 2520;
  // ***** START Params
  // Landing gear ID (default: 0, -1 for all)
  // Landing gear position (Down: 0, Up: 1, NaN for no change)
  // ***** END Params
  // Request to start/stop transmitting over the high latency telemetry
  MAV_CMD_CONTROL_HIGH_LATENCY = 2600;
  // ***** START Params
  // Control transmission over high latency telemetry (0: stop, 1: start)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Create a panorama at the current position
  MAV_CMD_PANORAMA_CREATE = 2800;
  // ***** START Params
  // Viewing angle horizontal of the panorama (+- 0.5 the total angle)
  // Viewing angle vertical of panorama.
  // Speed of the horizontal rotation.
  // Speed of the vertical rotation.
  // ***** END Params
  // Request VTOL transition
  MAV_CMD_DO_VTOL_TRANSITION = 3000;
  // ***** START Params
  // The target VTOL state. Only MAV_VTOL_STATE_MC and MAV_VTOL_STATE_FW can be used.
  // ***** END Params
  // Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request. If approved the progress of command_ack message should be set with period of time that this authorization is valid in seconds or in case it was denied it should be set with one of the reasons in ARM_AUTH_DENIED_REASON.
  //         
  MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001;
  // ***** START Params
  // Vehicle system id, this way ground station can request arm authorization on behalf of any vehicle
  // ***** END Params
  // This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
  //                   
  MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000;
  // This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
  //                   
  MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001;
  // ***** START Params
  // Radius of desired circle in CIRCLE_MODE
  // User defined
  // User defined
  // User defined
  // Target latitude of center of circle in CIRCLE_MODE
  // Target longitude of center of circle in CIRCLE_MODE
  // ***** END Params
  // Delay mission state machine until gate has been reached.
  MAV_CMD_CONDITION_GATE = 4501;
  // ***** START Params
  // Geometry: 0: orthogonal to path between previous and next waypoint.
  // Altitude: 0: ignore altitude
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Fence return point. There can only be one fence return point.
  //         
  MAV_CMD_NAV_FENCE_RETURN_POINT = 5000;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
  //         
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001;
  // ***** START Params
  // Polygon vertex count
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
  //         
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002;
  // ***** START Params
  // Polygon vertex count
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Circular fence area. The vehicle must stay inside this area.
  //         
  MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003;
  // ***** START Params
  // Radius.
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Circular fence area. The vehicle must stay outside this area.
  //         
  MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004;
  // ***** START Params
  // Radius.
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Rally point. You can have multiple rally points defined.
  //         
  MAV_CMD_NAV_RALLY_POINT = 5100;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.
  MAV_CMD_UAVCAN_GET_NODE_INFO = 5200;
  // ***** START Params
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  // Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
  MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001;
  // ***** START Params
  // Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list.
  // Desired approach vector in compass heading. A negative value indicates the system can define the approach vector at will.
  // Desired ground speed at release time. This can be overridden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will.
  // Minimum altitude clearance to the release position. A negative value indicates the system can define the clearance at will.
  // Latitude. Note, if used in MISSION_ITEM (deprecated) the units are degrees (unscaled)
  // Longitude. Note, if used in MISSION_ITEM (deprecated) the units are degrees (unscaled)
  // Altitude (MSL)
  // ***** END Params
  // Control the payload deployment.
  MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002;
  // ***** START Params
  // Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deployment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_1 = 31000;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_2 = 31001;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_3 = 31002;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_4 = 31003;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_5 = 31004;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_1 = 31005;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_2 = 31006;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_3 = 31007;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_4 = 31008;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_5 = 31009;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_1 = 31010;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_2 = 31011;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_3 = 31012;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_4 = 31013;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_5 = 31014;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
}

enum MAV_DATA_STREAM {
// A data stream is not a fixed set of messages, but rather a
// recommendation to the autopilot software. Individual autopilots may or may not obey
// the recommended messages.
  // Enable all data streams
  MAV_DATA_STREAM_ALL = 0;
  // Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
  MAV_DATA_STREAM_RAW_SENSORS = 1;
  // Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
  MAV_DATA_STREAM_EXTENDED_STATUS = 2;
  // Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
  MAV_DATA_STREAM_RC_CHANNELS = 3;
  // Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
  MAV_DATA_STREAM_RAW_CONTROLLER = 4;
  // Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
  MAV_DATA_STREAM_POSITION = 6;
  // Dependent on the autopilot
  MAV_DATA_STREAM_EXTRA1 = 10;
  // Dependent on the autopilot
  MAV_DATA_STREAM_EXTRA2 = 11;
  // Dependent on the autopilot
  MAV_DATA_STREAM_EXTRA3 = 12;
}

enum MAV_ROI {
// The ROI (region of interest) for the vehicle. This can be
// be used by the vehicle for camera/vehicle attitude alignment (see
// MAV_CMD_NAV_ROI).
  // No region of interest.
  MAV_ROI_NONE = 0;
  // Point toward next waypoint, with optional pitch/roll/yaw offset.
  MAV_ROI_WPNEXT = 1;
  // Point toward given waypoint.
  MAV_ROI_WPINDEX = 2;
  // Point toward fixed location.
  MAV_ROI_LOCATION = 3;
  // Point toward of given id.
  MAV_ROI_TARGET = 4;
}

enum MAV_CMD_ACK {
// ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission.
  // Command / mission item is ok.
  MAV_CMD_ACK_OK = 0;
  // Generic error message if none of the other reasons fails or if no detailed error reporting is implemented.
  MAV_CMD_ACK_ERR_FAIL = 1;
  // The system is refusing to accept this command from this source / communication partner.
  MAV_CMD_ACK_ERR_ACCESS_DENIED = 2;
  // Command or mission item is not supported, other commands would be accepted.
  MAV_CMD_ACK_ERR_NOT_SUPPORTED = 3;
  // The coordinate frame of this command / mission item is not supported.
  MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 4;
  // The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible.
  MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 5;
  // The X or latitude value is out of range.
  MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 6;
  // The Y or longitude value is out of range.
  MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 7;
  // The Z or altitude value is out of range.
  MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 8;
}

enum MAV_PARAM_TYPE {
// Specifies the datatype of a MAVLink parameter.
  // Not used in MavLink, make protobuf happy.
  MAV_PARAM_TYPE_UNDEFINED = 0;
  // 8-bit unsigned integer
  MAV_PARAM_TYPE_UINT8 = 1;
  // 8-bit signed integer
  MAV_PARAM_TYPE_INT8 = 2;
  // 16-bit unsigned integer
  MAV_PARAM_TYPE_UINT16 = 3;
  // 16-bit signed integer
  MAV_PARAM_TYPE_INT16 = 4;
  // 32-bit unsigned integer
  MAV_PARAM_TYPE_UINT32 = 5;
  // 32-bit signed integer
  MAV_PARAM_TYPE_INT32 = 6;
  // 64-bit unsigned integer
  MAV_PARAM_TYPE_UINT64 = 7;
  // 64-bit signed integer
  MAV_PARAM_TYPE_INT64 = 8;
  // 32-bit floating-point
  MAV_PARAM_TYPE_REAL32 = 9;
  // 64-bit floating-point
  MAV_PARAM_TYPE_REAL64 = 10;
}

enum MAV_PARAM_EXT_TYPE {
// Specifies the datatype of a MAVLink extended parameter.
  // Not used in MavLink, make protobuf happy.
  MAV_PARAM_EXT_TYPE_UNDEFINED = 0;
  // 8-bit unsigned integer
  MAV_PARAM_EXT_TYPE_UINT8 = 1;
  // 8-bit signed integer
  MAV_PARAM_EXT_TYPE_INT8 = 2;
  // 16-bit unsigned integer
  MAV_PARAM_EXT_TYPE_UINT16 = 3;
  // 16-bit signed integer
  MAV_PARAM_EXT_TYPE_INT16 = 4;
  // 32-bit unsigned integer
  MAV_PARAM_EXT_TYPE_UINT32 = 5;
  // 32-bit signed integer
  MAV_PARAM_EXT_TYPE_INT32 = 6;
  // 64-bit unsigned integer
  MAV_PARAM_EXT_TYPE_UINT64 = 7;
  // 64-bit signed integer
  MAV_PARAM_EXT_TYPE_INT64 = 8;
  // 32-bit floating-point
  MAV_PARAM_EXT_TYPE_REAL32 = 9;
  // 64-bit floating-point
  MAV_PARAM_EXT_TYPE_REAL64 = 10;
  // Custom Type
  MAV_PARAM_EXT_TYPE_CUSTOM = 11;
}

enum MAV_RESULT {
// Result from a MAVLink command (MAV_CMD)
  // Command is valid (is supported and has valid parameters), and was executed.
  MAV_RESULT_ACCEPTED = 0;
  // Command is valid, but cannot be executed at this time. This is used to indicate a problem that should be fixed just by waiting (e.g. a state machine is busy, can't arm because have not got GPS lock, etc.). Retrying later should work.
  MAV_RESULT_TEMPORARILY_REJECTED = 1;
  // Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
  MAV_RESULT_DENIED = 2;
  // Command is not supported (unknown).
  MAV_RESULT_UNSUPPORTED = 3;
  // Command is valid, but execution has failed. This is used to indicate any non-temporary or unexpected problem, i.e. any problem that must be fixed before the command can succeed/be retried. For example, attempting to write a file when out of memory, attempting to arm when sensors are not calibrated, etc.
  MAV_RESULT_FAILED = 4;
  // Command is valid and is being executed. This will be followed by further progress updates, i.e. the component may send further COMMAND_ACK messages with result MAV_RESULT_IN_PROGRESS (at a rate decided by the implementation), and must terminate by sending a COMMAND_ACK message with final result of the operation. The COMMAND_ACK.progress field can be used to indicate the progress of the operation.
  MAV_RESULT_IN_PROGRESS = 5;
  // Command has been cancelled (as a result of receiving a COMMAND_CANCEL message).
  MAV_RESULT_CANCELLED = 6;
}

enum MAV_MISSION_RESULT {
// Result of mission operation (in a MISSION_ACK message).
  // mission accepted OK
  MAV_MISSION_ACCEPTED = 0;
  // Generic error / not accepting mission commands at all right now.
  MAV_MISSION_ERROR = 1;
  // Coordinate frame is not supported.
  MAV_MISSION_UNSUPPORTED_FRAME = 2;
  // Command is not supported.
  MAV_MISSION_UNSUPPORTED = 3;
  // Mission items exceed storage space.
  MAV_MISSION_NO_SPACE = 4;
  // One of the parameters has an invalid value.
  MAV_MISSION_INVALID = 5;
  // param1 has an invalid value.
  MAV_MISSION_INVALID_PARAM1 = 6;
  // param2 has an invalid value.
  MAV_MISSION_INVALID_PARAM2 = 7;
  // param3 has an invalid value.
  MAV_MISSION_INVALID_PARAM3 = 8;
  // param4 has an invalid value.
  MAV_MISSION_INVALID_PARAM4 = 9;
  // x / param5 has an invalid value.
  MAV_MISSION_INVALID_PARAM5_X = 10;
  // y / param6 has an invalid value.
  MAV_MISSION_INVALID_PARAM6_Y = 11;
  // z / param7 has an invalid value.
  MAV_MISSION_INVALID_PARAM7 = 12;
  // Mission item received out of sequence
  MAV_MISSION_INVALID_SEQUENCE = 13;
  // Not accepting any mission commands from this communication partner.
  MAV_MISSION_DENIED = 14;
  // Current mission operation cancelled (e.g. mission upload, mission download).
  MAV_MISSION_OPERATION_CANCELLED = 15;
}

enum MAV_SEVERITY {
// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
  // System is unusable. This is a "panic" condition.
  MAV_SEVERITY_EMERGENCY = 0;
  // Action should be taken immediately. Indicates error in non-critical systems.
  MAV_SEVERITY_ALERT = 1;
  // Action must be taken immediately. Indicates failure in a primary system.
  MAV_SEVERITY_CRITICAL = 2;
  // Indicates an error in secondary/redundant systems.
  MAV_SEVERITY_ERROR = 3;
  // Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
  MAV_SEVERITY_WARNING = 4;
  // An unusual event has occurred, though not an error condition. This should be investigated for the root cause.
  MAV_SEVERITY_NOTICE = 5;
  // Normal operational messages. Useful for logging. No action is required for these messages.
  MAV_SEVERITY_INFO = 6;
  // Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
  MAV_SEVERITY_DEBUG = 7;
}

enum MAV_POWER_STATUS {
// Power supply status flags (bitmask)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_POWER_STATUS_UNDEFINED = 0;
  // main brick power supply valid
  // bit 1
  MAV_POWER_STATUS_BRICK_VALID = 0x00000001;
  // main servo power supply valid for FMU
  // bit 2
  MAV_POWER_STATUS_SERVO_VALID = 0x00000002;
  // USB power is connected
  // bit 3
  MAV_POWER_STATUS_USB_CONNECTED = 0x00000004;
  // peripheral supply is in over-current state
  // bit 4
  MAV_POWER_STATUS_PERIPH_OVERCURRENT = 0x00000008;
  // hi-power peripheral supply is in over-current state
  // bit 5
  MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 0x00000010;
  // Power status has changed since boot
  // bit 6
  MAV_POWER_STATUS_CHANGED = 0x00000020;
}

enum SERIAL_CONTROL_DEV {
// SERIAL_CONTROL device types
  // First telemetry port
  SERIAL_CONTROL_DEV_TELEM1 = 0;
  // Second telemetry port
  SERIAL_CONTROL_DEV_TELEM2 = 1;
  // First GPS port
  SERIAL_CONTROL_DEV_GPS1 = 2;
  // Second GPS port
  SERIAL_CONTROL_DEV_GPS2 = 3;
  // system shell
  SERIAL_CONTROL_DEV_SHELL = 10;
  // SERIAL0
  SERIAL_CONTROL_SERIAL0 = 100;
  // SERIAL1
  SERIAL_CONTROL_SERIAL1 = 101;
  // SERIAL2
  SERIAL_CONTROL_SERIAL2 = 102;
  // SERIAL3
  SERIAL_CONTROL_SERIAL3 = 103;
  // SERIAL4
  SERIAL_CONTROL_SERIAL4 = 104;
  // SERIAL5
  SERIAL_CONTROL_SERIAL5 = 105;
  // SERIAL6
  SERIAL_CONTROL_SERIAL6 = 106;
  // SERIAL7
  SERIAL_CONTROL_SERIAL7 = 107;
  // SERIAL8
  SERIAL_CONTROL_SERIAL8 = 108;
  // SERIAL9
  SERIAL_CONTROL_SERIAL9 = 109;
}

enum SERIAL_CONTROL_FLAG {
// SERIAL_CONTROL flags (bitmask)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  SERIAL_CONTROL_FLAG_UNDEFINED = 0;
  // Set if this is a reply
  // bit 1
  SERIAL_CONTROL_FLAG_REPLY = 0x00000001;
  // Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message
  // bit 2
  SERIAL_CONTROL_FLAG_RESPOND = 0x00000002;
  // Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set
  // bit 3
  SERIAL_CONTROL_FLAG_EXCLUSIVE = 0x00000004;
  // Block on writes to the serial port
  // bit 4
  SERIAL_CONTROL_FLAG_BLOCKING = 0x00000008;
  // Send multiple replies until port is drained
  // bit 5
  SERIAL_CONTROL_FLAG_MULTI = 0x00000010;
}

enum MAV_DISTANCE_SENSOR {
// Enumeration of distance sensor types
  // Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
  MAV_DISTANCE_SENSOR_LASER = 0;
  // Ultrasound rangefinder, e.g. MaxBotix units
  MAV_DISTANCE_SENSOR_ULTRASOUND = 1;
  // Infrared rangefinder, e.g. Sharp units
  MAV_DISTANCE_SENSOR_INFRARED = 2;
  // Radar type, e.g. uLanding units
  MAV_DISTANCE_SENSOR_RADAR = 3;
  // Broken or unknown type, e.g. analog units
  MAV_DISTANCE_SENSOR_UNKNOWN = 4;
}

enum MAV_SENSOR_ORIENTATION {
// Enumeration of sensor orientation, according to its rotations
  // Roll: 0, Pitch: 0, Yaw: 0
  MAV_SENSOR_ROTATION_NONE = 0;
  // Roll: 0, Pitch: 0, Yaw: 45
  MAV_SENSOR_ROTATION_YAW_45 = 1;
  // Roll: 0, Pitch: 0, Yaw: 90
  MAV_SENSOR_ROTATION_YAW_90 = 2;
  // Roll: 0, Pitch: 0, Yaw: 135
  MAV_SENSOR_ROTATION_YAW_135 = 3;
  // Roll: 0, Pitch: 0, Yaw: 180
  MAV_SENSOR_ROTATION_YAW_180 = 4;
  // Roll: 0, Pitch: 0, Yaw: 225
  MAV_SENSOR_ROTATION_YAW_225 = 5;
  // Roll: 0, Pitch: 0, Yaw: 270
  MAV_SENSOR_ROTATION_YAW_270 = 6;
  // Roll: 0, Pitch: 0, Yaw: 315
  MAV_SENSOR_ROTATION_YAW_315 = 7;
  // Roll: 180, Pitch: 0, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_180 = 8;
  // Roll: 180, Pitch: 0, Yaw: 45
  MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9;
  // Roll: 180, Pitch: 0, Yaw: 90
  MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10;
  // Roll: 180, Pitch: 0, Yaw: 135
  MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11;
  // Roll: 0, Pitch: 180, Yaw: 0
  MAV_SENSOR_ROTATION_PITCH_180 = 12;
  // Roll: 180, Pitch: 0, Yaw: 225
  MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13;
  // Roll: 180, Pitch: 0, Yaw: 270
  MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14;
  // Roll: 180, Pitch: 0, Yaw: 315
  MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15;
  // Roll: 90, Pitch: 0, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_90 = 16;
  // Roll: 90, Pitch: 0, Yaw: 45
  MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17;
  // Roll: 90, Pitch: 0, Yaw: 90
  MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18;
  // Roll: 90, Pitch: 0, Yaw: 135
  MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19;
  // Roll: 270, Pitch: 0, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_270 = 20;
  // Roll: 270, Pitch: 0, Yaw: 45
  MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21;
  // Roll: 270, Pitch: 0, Yaw: 90
  MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22;
  // Roll: 270, Pitch: 0, Yaw: 135
  MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23;
  // Roll: 0, Pitch: 90, Yaw: 0
  MAV_SENSOR_ROTATION_PITCH_90 = 24;
  // Roll: 0, Pitch: 270, Yaw: 0
  MAV_SENSOR_ROTATION_PITCH_270 = 25;
  // Roll: 0, Pitch: 180, Yaw: 90
  MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26;
  // Roll: 0, Pitch: 180, Yaw: 270
  MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27;
  // Roll: 90, Pitch: 90, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28;
  // Roll: 180, Pitch: 90, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29;
  // Roll: 270, Pitch: 90, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30;
  // Roll: 90, Pitch: 180, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31;
  // Roll: 270, Pitch: 180, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32;
  // Roll: 90, Pitch: 270, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33;
  // Roll: 180, Pitch: 270, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34;
  // Roll: 270, Pitch: 270, Yaw: 0
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35;
  // Roll: 90, Pitch: 180, Yaw: 90
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36;
  // Roll: 90, Pitch: 0, Yaw: 270
  MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37;
  // Roll: 90, Pitch: 68, Yaw: 293
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38;
  // Pitch: 315
  MAV_SENSOR_ROTATION_PITCH_315 = 39;
  // Roll: 90, Pitch: 315
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40;
  // Roll: 270, Yaw: 180
  MAV_SENSOR_ROTATION_ROLL_270_YAW_180 = 41;
  // Custom orientation
  MAV_SENSOR_ROTATION_CUSTOM = 100;
}

enum MAV_PROTOCOL_CAPABILITY {
// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_PROTOCOL_CAPABILITY_UNDEFINED = 0;
  // Autopilot supports MISSION float message type.
  // bit 1
  MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 0x00000001;
  // Autopilot supports the new param float message type.
  // bit 2
  MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 0x00000002;
  // Autopilot supports MISSION_ITEM_INT scaled integer message type.
  // bit 3
  MAV_PROTOCOL_CAPABILITY_MISSION_INT = 0x00000004;
  // Autopilot supports COMMAND_INT scaled integer message type.
  // bit 4
  MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 0x00000008;
  // Autopilot supports the new param union message type.
  // bit 5
  MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 0x00000010;
  // Autopilot supports the new FILE_TRANSFER_PROTOCOL message type.
  // bit 6
  MAV_PROTOCOL_CAPABILITY_FTP = 0x00000020;
  // Autopilot supports commanding attitude offboard.
  // bit 7
  MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 0x00000040;
  // Autopilot supports commanding position and velocity targets in local NED frame.
  // bit 8
  MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 0x00000080;
  // Autopilot supports commanding position and velocity targets in global scaled integers.
  // bit 9
  MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 0x00000100;
  // Autopilot supports terrain protocol / data handling.
  // bit 10
  MAV_PROTOCOL_CAPABILITY_TERRAIN = 0x00000200;
  // Autopilot supports direct actuator control.
  // bit 11
  MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 0x00000400;
  // Autopilot supports the flight termination command.
  // bit 12
  MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 0x00000800;
  // Autopilot supports onboard compass calibration.
  // bit 13
  MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 0x00001000;
  // Autopilot supports MAVLink version 2.
  // bit 14
  MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 0x00002000;
  // Autopilot supports mission fence protocol.
  // bit 15
  MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 0x00004000;
  // Autopilot supports mission rally point protocol.
  // bit 16
  MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 0x00008000;
  // Autopilot supports the flight information protocol.
  // bit 17
  MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 0x00010000;
}

enum MAV_MISSION_TYPE {
// Type of mission items being requested/sent in mission protocol.
  // Items are mission commands for main mission.
  MAV_MISSION_TYPE_MISSION = 0;
  // Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.
  MAV_MISSION_TYPE_FENCE = 1;
  // Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.
  MAV_MISSION_TYPE_RALLY = 2;
  // Only used in MISSION_CLEAR_ALL to clear all mission types.
  MAV_MISSION_TYPE_ALL = 255;
}

enum MAV_ESTIMATOR_TYPE {
// Enumeration of estimator types
  // Unknown type of the estimator.
  MAV_ESTIMATOR_TYPE_UNKNOWN = 0;
  // This is a naive estimator without any real covariance feedback.
  MAV_ESTIMATOR_TYPE_NAIVE = 1;
  // Computer vision based estimate. Might be up to scale.
  MAV_ESTIMATOR_TYPE_VISION = 2;
  // Visual-inertial estimate.
  MAV_ESTIMATOR_TYPE_VIO = 3;
  // Plain GPS estimate.
  MAV_ESTIMATOR_TYPE_GPS = 4;
  // Estimator integrating GPS and inertial sensing.
  MAV_ESTIMATOR_TYPE_GPS_INS = 5;
  // Estimate from external motion capturing system.
  MAV_ESTIMATOR_TYPE_MOCAP = 6;
  // Estimator based on lidar sensor input.
  MAV_ESTIMATOR_TYPE_LIDAR = 7;
  // Estimator on autopilot.
  MAV_ESTIMATOR_TYPE_AUTOPILOT = 8;
}

enum MAV_BATTERY_TYPE {
// Enumeration of battery types
  // Not specified.
  MAV_BATTERY_TYPE_UNKNOWN = 0;
  // Lithium polymer battery
  MAV_BATTERY_TYPE_LIPO = 1;
  // Lithium-iron-phosphate battery
  MAV_BATTERY_TYPE_LIFE = 2;
  // Lithium-ION battery
  MAV_BATTERY_TYPE_LION = 3;
  // Nickel metal hydride battery
  MAV_BATTERY_TYPE_NIMH = 4;
}

enum MAV_BATTERY_FUNCTION {
// Enumeration of battery functions
  // Battery function is unknown
  MAV_BATTERY_FUNCTION_UNKNOWN = 0;
  // Battery supports all flight systems
  MAV_BATTERY_FUNCTION_ALL = 1;
  // Battery for the propulsion system
  MAV_BATTERY_FUNCTION_PROPULSION = 2;
  // Avionics battery
  MAV_BATTERY_FUNCTION_AVIONICS = 3;
  // Payload battery
  MAV_BATTERY_TYPE_PAYLOAD = 4;
}

enum MAV_BATTERY_CHARGE_STATE {
// Enumeration for battery charge states.
  // Low battery state is not provided
  MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0;
  // Battery is not in low state. Normal operation.
  MAV_BATTERY_CHARGE_STATE_OK = 1;
  // Battery state is low, warn and monitor close.
  MAV_BATTERY_CHARGE_STATE_LOW = 2;
  // Battery state is critical, return or abort immediately.
  MAV_BATTERY_CHARGE_STATE_CRITICAL = 3;
  // Battery state is too low for ordinary abort sequence. Perform fastest possible emergency stop to prevent damage.
  MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4;
  // Battery failed, damage unavoidable.
  MAV_BATTERY_CHARGE_STATE_FAILED = 5;
  // Battery is diagnosed to be defective or an error occurred, usage is discouraged / prohibited.
  MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6;
  // Battery is charging.
  MAV_BATTERY_CHARGE_STATE_CHARGING = 7;
}

enum MAV_SMART_BATTERY_FAULT {
// Smart battery supply status/fault flags (bitmask) for health indication.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_SMART_BATTERY_FAULT_UNDEFINED = 0;
  // Battery has deep discharged.
  // bit 1
  MAV_SMART_BATTERY_FAULT_DEEP_DISCHARGE = 0x00000001;
  // Voltage spikes.
  // bit 2
  MAV_SMART_BATTERY_FAULT_SPIKES = 0x00000002;
  // Single cell has failed.
  // bit 3
  MAV_SMART_BATTERY_FAULT_SINGLE_CELL_FAIL = 0x00000004;
  // Over-current fault.
  // bit 4
  MAV_SMART_BATTERY_FAULT_OVER_CURRENT = 0x00000008;
  // Over-temperature fault.
  // bit 5
  MAV_SMART_BATTERY_FAULT_OVER_TEMPERATURE = 0x00000010;
  // Under-temperature fault.
  // bit 6
  MAV_SMART_BATTERY_FAULT_UNDER_TEMPERATURE = 0x00000020;
}

enum MAV_GENERATOR_STATUS_FLAG {
// Flags to report status/failure cases for a power generator (used in GENERATOR_STATUS). Note that FAULTS are conditions that cause the generator to fail. Warnings are conditions that require attention before the next use (they indicate the system is not operating properly).
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_GENERATOR_STATUS_FLAG_UNDEFINED = 0;
  // Generator is off.
  // bit 1
  MAV_GENERATOR_STATUS_FLAG_OFF = 0x00000001;
  // Generator is ready to start generating power.
  // bit 2
  MAV_GENERATOR_STATUS_FLAG_READY = 0x00000002;
  // Generator is generating power.
  // bit 3
  MAV_GENERATOR_STATUS_FLAG_GENERATING = 0x00000004;
  // Generator is charging the batteries (generating enough power to charge and provide the load).
  // bit 4
  MAV_GENERATOR_STATUS_FLAG_CHARGING = 0x00000008;
  // Generator is operating at a reduced maximum power.
  // bit 5
  MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER = 0x00000010;
  // Generator is providing the maximum output.
  // bit 6
  MAV_GENERATOR_STATUS_FLAG_MAXPOWER = 0x00000020;
  // Generator is near the maximum operating temperature, cooling is insufficient.
  // bit 7
  MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING = 0x00000040;
  // Generator hit the maximum operating temperature and shutdown.
  // bit 8
  MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT = 0x00000080;
  // Power electronics are near the maximum operating temperature, cooling is insufficient.
  // bit 9
  MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING = 0x00000100;
  // Power electronics hit the maximum operating temperature and shutdown.
  // bit 10
  MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT = 0x00000200;
  // Power electronics experienced a fault and shutdown.
  // bit 11
  MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT = 0x00000400;
  // The power source supplying the generator failed e.g. mechanical generator stopped, tether is no longer providing power, solar cell is in shade, hydrogen reaction no longer happening.
  // bit 12
  MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT = 0x00000800;
  // Generator controller having communication problems.
  // bit 13
  MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING = 0x00001000;
  // Power electronic or generator cooling system error.
  // bit 14
  MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING = 0x00002000;
  // Generator controller power rail experienced a fault.
  // bit 15
  MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT = 0x00004000;
  // Generator controller exceeded the overcurrent threshold and shutdown to prevent damage.
  // bit 16
  MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT = 0x00008000;
  // Generator controller detected a high current going into the batteries and shutdown to prevent battery damage.
  // bit 17
  MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT = 0x00010000;
  // Generator controller exceeded it's overvoltage threshold and shutdown to prevent it exceeding the voltage rating.
  // bit 18
  MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT = 0x00020000;
  // Batteries are under voltage (generator will not start).
  // bit 19
  MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT = 0x00040000;
  // Generator start is inhibited by e.g. a safety switch.
  // bit 20
  MAV_GENERATOR_STATUS_FLAG_START_INHIBITED = 0x00080000;
  // Generator requires maintenance.
  // bit 21
  MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED = 0x00100000;
}

enum MAV_VTOL_STATE {
// Enumeration of VTOL states
  // MAV is not configured as VTOL
  MAV_VTOL_STATE_UNDEFINED = 0;
  // VTOL is in transition from multicopter to fixed-wing
  MAV_VTOL_STATE_TRANSITION_TO_FW = 1;
  // VTOL is in transition from fixed-wing to multicopter
  MAV_VTOL_STATE_TRANSITION_TO_MC = 2;
  // VTOL is in multicopter state
  MAV_VTOL_STATE_MC = 3;
  // VTOL is in fixed-wing state
  MAV_VTOL_STATE_FW = 4;
}

enum MAV_LANDED_STATE {
// Enumeration of landed detector states
  // MAV landed state is unknown
  MAV_LANDED_STATE_UNDEFINED = 0;
  // MAV is landed (on ground)
  MAV_LANDED_STATE_ON_GROUND = 1;
  // MAV is in air
  MAV_LANDED_STATE_IN_AIR = 2;
  // MAV currently taking off
  MAV_LANDED_STATE_TAKEOFF = 3;
  // MAV currently landing
  MAV_LANDED_STATE_LANDING = 4;
}

enum ADSB_ALTITUDE_TYPE {
// Enumeration of the ADSB altimeter types
  // Altitude reported from a Baro source using QNH reference
  ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0;
  // Altitude reported from a GNSS source
  ADSB_ALTITUDE_TYPE_GEOMETRIC = 1;
}

enum ADSB_EMITTER_TYPE {
// ADSB classification for the type of vehicle emitting the transponder signal
  ADSB_EMITTER_TYPE_NO_INFO = 0;
  ADSB_EMITTER_TYPE_LIGHT = 1;
  ADSB_EMITTER_TYPE_SMALL = 2;
  ADSB_EMITTER_TYPE_LARGE = 3;
  ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4;
  ADSB_EMITTER_TYPE_HEAVY = 5;
  ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6;
  ADSB_EMITTER_TYPE_ROTOCRAFT = 7;
  ADSB_EMITTER_TYPE_UNASSIGNED = 8;
  ADSB_EMITTER_TYPE_GLIDER = 9;
  ADSB_EMITTER_TYPE_LIGHTER_AIR = 10;
  ADSB_EMITTER_TYPE_PARACHUTE = 11;
  ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12;
  ADSB_EMITTER_TYPE_UNASSIGNED2 = 13;
  ADSB_EMITTER_TYPE_UAV = 14;
  ADSB_EMITTER_TYPE_SPACE = 15;
  ADSB_EMITTER_TYPE_UNASSGINED3 = 16;
  ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17;
  ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18;
  ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19;
}

enum ADSB_FLAGS {
// These flags indicate status such as data validity of each data source. Set = data valid
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  ADSB_FLAGS_UNDEFINED = 0;
  // bit 1
  ADSB_FLAGS_VALID_COORDS = 0x00000001;
  // bit 2
  ADSB_FLAGS_VALID_ALTITUDE = 0x00000002;
  // bit 3
  ADSB_FLAGS_VALID_HEADING = 0x00000004;
  // bit 4
  ADSB_FLAGS_VALID_VELOCITY = 0x00000008;
  // bit 5
  ADSB_FLAGS_VALID_CALLSIGN = 0x00000010;
  // bit 6
  ADSB_FLAGS_VALID_SQUAWK = 0x00000020;
  // bit 7
  ADSB_FLAGS_SIMULATED = 0x00000040;
  // bit 8
  ADSB_FLAGS_VERTICAL_VELOCITY_VALID = 0x00000080;
  // bit 9
  ADSB_FLAGS_BARO_VALID = 0x00000100;
  // bit 16
  ADSB_FLAGS_SOURCE_UAT = 0x00008000;
}

enum MAV_DO_REPOSITION_FLAGS {
// Bitmap of options for the MAV_CMD_DO_REPOSITION
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  MAV_DO_REPOSITION_FLAGS_UNDEFINED = 0;
  // The aircraft should immediately transition into guided. This should not be set for follow me applications
  // bit 1
  MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 0x00000001;
}

enum ESTIMATOR_STATUS_FLAGS {
// Flags in ESTIMATOR_STATUS message
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  ESTIMATOR_STATUS_FLAGS_UNDEFINED = 0;
  // True if the attitude estimate is good
  // bit 1
  ESTIMATOR_ATTITUDE = 0x00000001;
  // True if the horizontal velocity estimate is good
  // bit 2
  ESTIMATOR_VELOCITY_HORIZ = 0x00000002;
  // True if the  vertical velocity estimate is good
  // bit 3
  ESTIMATOR_VELOCITY_VERT = 0x00000004;
  // True if the horizontal position (relative) estimate is good
  // bit 4
  ESTIMATOR_POS_HORIZ_REL = 0x00000008;
  // True if the horizontal position (absolute) estimate is good
  // bit 5
  ESTIMATOR_POS_HORIZ_ABS = 0x00000010;
  // True if the vertical position (absolute) estimate is good
  // bit 6
  ESTIMATOR_POS_VERT_ABS = 0x00000020;
  // True if the vertical position (above ground) estimate is good
  // bit 7
  ESTIMATOR_POS_VERT_AGL = 0x00000040;
  // True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)
  // bit 8
  ESTIMATOR_CONST_POS_MODE = 0x00000080;
  // True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate
  // bit 9
  ESTIMATOR_PRED_POS_HORIZ_REL = 0x00000100;
  // True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate
  // bit 10
  ESTIMATOR_PRED_POS_HORIZ_ABS = 0x00000200;
  // True if the EKF has detected a GPS glitch
  // bit 11
  ESTIMATOR_GPS_GLITCH = 0x00000400;
  // True if the EKF has detected bad accelerometer data
  // bit 12
  ESTIMATOR_ACCEL_ERROR = 0x00000800;
}

enum MOTOR_TEST_ORDER {
  // default autopilot motor test method
  MOTOR_TEST_ORDER_DEFAULT = 0;
  // motor numbers are specified as their index in a predefined vehicle-specific sequence
  MOTOR_TEST_ORDER_SEQUENCE = 1;
  // motor numbers are specified as the output as labeled on the board
  MOTOR_TEST_ORDER_BOARD = 2;
}

enum MOTOR_TEST_THROTTLE_TYPE {
  // throttle as a percentage from 0 ~ 100
  MOTOR_TEST_THROTTLE_PERCENT = 0;
  // throttle as an absolute PWM value (normally in range of 1000~2000)
  MOTOR_TEST_THROTTLE_PWM = 1;
  // throttle pass-through from pilot's transmitter
  MOTOR_TEST_THROTTLE_PILOT = 2;
  // per-motor compass calibration test
  MOTOR_TEST_COMPASS_CAL = 3;
}

enum GPS_INPUT_IGNORE_FLAGS {
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GPS_INPUT_IGNORE_FLAGS_UNDEFINED = 0;
  // ignore altitude field
  // bit 1
  GPS_INPUT_IGNORE_FLAG_ALT = 0x00000001;
  // ignore hdop field
  // bit 2
  GPS_INPUT_IGNORE_FLAG_HDOP = 0x00000002;
  // ignore vdop field
  // bit 3
  GPS_INPUT_IGNORE_FLAG_VDOP = 0x00000004;
  // ignore horizontal velocity field (vn and ve)
  // bit 4
  GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 0x00000008;
  // ignore vertical velocity field (vd)
  // bit 5
  GPS_INPUT_IGNORE_FLAG_VEL_VERT = 0x00000010;
  // ignore speed accuracy field
  // bit 6
  GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 0x00000020;
  // ignore horizontal accuracy field
  // bit 7
  GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 0x00000040;
  // ignore vertical accuracy field
  // bit 8
  GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 0x00000080;
}

enum MAV_COLLISION_ACTION {
// Possible actions an aircraft can take to avoid a collision.
  // Ignore any potential collisions
  MAV_COLLISION_ACTION_NONE = 0;
  // Report potential collision
  MAV_COLLISION_ACTION_REPORT = 1;
  // Ascend or Descend to avoid threat
  MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2;
  // Move horizontally to avoid threat
  MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3;
  // Aircraft to move perpendicular to the collision's velocity vector
  MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4;
  // Aircraft to fly directly back to its launch point
  MAV_COLLISION_ACTION_RTL = 5;
  // Aircraft to stop in place
  MAV_COLLISION_ACTION_HOVER = 6;
}

enum MAV_COLLISION_THREAT_LEVEL {
// Aircraft-rated danger from this threat.
  // Not a threat
  MAV_COLLISION_THREAT_LEVEL_NONE = 0;
  // Craft is mildly concerned about this threat
  MAV_COLLISION_THREAT_LEVEL_LOW = 1;
  // Craft is panicking, and may take actions to avoid threat
  MAV_COLLISION_THREAT_LEVEL_HIGH = 2;
}

enum MAV_COLLISION_SRC {
// Source of information about this collision.
  // ID field references ADSB_VEHICLE packets
  MAV_COLLISION_SRC_ADSB = 0;
  // ID field references MAVLink SRC ID
  MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1;
}

enum GPS_FIX_TYPE {
// Type of GPS fix
  // No GPS connected
  GPS_FIX_TYPE_NO_GPS = 0;
  // No position information, GPS is connected
  GPS_FIX_TYPE_NO_FIX = 1;
  // 2D position
  GPS_FIX_TYPE_2D_FIX = 2;
  // 3D position
  GPS_FIX_TYPE_3D_FIX = 3;
  // DGPS/SBAS aided 3D position
  GPS_FIX_TYPE_DGPS = 4;
  // RTK float, 3D position
  GPS_FIX_TYPE_RTK_FLOAT = 5;
  // RTK Fixed, 3D position
  GPS_FIX_TYPE_RTK_FIXED = 6;
  // Static fixed, typically used for base stations
  GPS_FIX_TYPE_STATIC = 7;
  // PPP, 3D position.
  GPS_FIX_TYPE_PPP = 8;
}

enum RTK_BASELINE_COORDINATE_SYSTEM {
// RTK GPS baseline coordinate system, used for RTK corrections
  // Earth-centered, Earth-fixed
  RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0;
  // RTK basestation centered, north, east, down
  RTK_BASELINE_COORDINATE_SYSTEM_NED = 1;
}

enum LANDING_TARGET_TYPE {
// Type of landing target
  // Landing target signaled by light beacon (ex: IR-LOCK)
  LANDING_TARGET_TYPE_LIGHT_BEACON = 0;
  // Landing target signaled by radio beacon (ex: ILS, NDB)
  LANDING_TARGET_TYPE_RADIO_BEACON = 1;
  // Landing target represented by a fiducial marker (ex: ARTag)
  LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2;
  // Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
  LANDING_TARGET_TYPE_VISION_OTHER = 3;
}

enum VTOL_TRANSITION_HEADING {
// Direction of VTOL transition
  // Respect the heading configuration of the vehicle.
  VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0;
  // Use the heading pointing towards the next waypoint.
  VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1;
  // Use the heading on takeoff (while sitting on the ground).
  VTOL_TRANSITION_HEADING_TAKEOFF = 2;
  // Use the specified heading in parameter 4.
  VTOL_TRANSITION_HEADING_SPECIFIED = 3;
  // Use the current heading when reaching takeoff altitude (potentially facing the wind when weather-vaning is active).
  VTOL_TRANSITION_HEADING_ANY = 4;
}

enum CAMERA_CAP_FLAGS {
// Camera capability flags (Bitmap)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  CAMERA_CAP_FLAGS_UNDEFINED = 0;
  // Camera is able to record video
  // bit 1
  CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 0x00000001;
  // Camera is able to capture images
  // bit 2
  CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 0x00000002;
  // Camera has separate Video and Image/Photo modes (MAV_CMD_SET_CAMERA_MODE)
  // bit 3
  CAMERA_CAP_FLAGS_HAS_MODES = 0x00000004;
  // Camera can capture images while in video mode
  // bit 4
  CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 0x00000008;
  // Camera can capture videos while in Photo/Image mode
  // bit 5
  CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 0x00000010;
  // Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
  // bit 6
  CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 0x00000020;
  // Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
  // bit 7
  CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 0x00000040;
  // Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
  // bit 8
  CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 0x00000080;
  // Camera has video streaming capabilities (request VIDEO_STREAM_INFORMATION with MAV_CMD_REQUEST_MESSAGE for video streaming info)
  // bit 9
  CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 0x00000100;
}

enum VIDEO_STREAM_STATUS_FLAGS {
// Stream status flags (Bitmap)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  VIDEO_STREAM_STATUS_FLAGS_UNDEFINED = 0;
  // Stream is active (running)
  // bit 1
  VIDEO_STREAM_STATUS_FLAGS_RUNNING = 0x00000001;
  // Stream is thermal imaging
  // bit 2
  VIDEO_STREAM_STATUS_FLAGS_THERMAL = 0x00000002;
}

enum VIDEO_STREAM_TYPE {
// Video stream types
  // Stream is RTSP
  VIDEO_STREAM_TYPE_RTSP = 0;
  // Stream is RTP UDP (URI gives the port number)
  VIDEO_STREAM_TYPE_RTPUDP = 1;
  // Stream is MPEG on TCP
  VIDEO_STREAM_TYPE_TCP_MPEG = 2;
  // Stream is h.264 on MPEG TS (URI gives the port number)
  VIDEO_STREAM_TYPE_MPEG_TS_H264 = 3;
}

enum CAMERA_ZOOM_TYPE {
// Zoom types for MAV_CMD_SET_CAMERA_ZOOM
  // Zoom one step increment (-1 for wide, 1 for tele)
  ZOOM_TYPE_STEP = 0;
  // Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to stop zooming)
  ZOOM_TYPE_CONTINUOUS = 1;
  // Zoom value as proportion of full camera range (a value between 0.0 and 100.0)
  ZOOM_TYPE_RANGE = 2;
  // Zoom value/variable focal length in milimetres. Note that there is no message to get the valid zoom range of the camera, so this can type can only be used for cameras where the zoom range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera)
  ZOOM_TYPE_FOCAL_LENGTH = 3;
}

enum SET_FOCUS_TYPE {
// Focus types for MAV_CMD_SET_CAMERA_FOCUS
  // Focus one step increment (-1 for focusing in, 1 for focusing out towards infinity).
  FOCUS_TYPE_STEP = 0;
  // Continuous focus up/down until stopped (-1 for focusing in, 1 for focusing out towards infinity, 0 to stop focusing)
  FOCUS_TYPE_CONTINUOUS = 1;
  // Focus value as proportion of full camera focus range (a value between 0.0 and 100.0)
  FOCUS_TYPE_RANGE = 2;
  // Focus value in metres. Note that there is no message to get the valid focus range of the camera, so this can type can only be used for cameras where the range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera).
  FOCUS_TYPE_METERS = 3;
}

enum PARAM_ACK {
// Result from a PARAM_EXT_SET message.
  // Parameter value ACCEPTED and SET
  PARAM_ACK_ACCEPTED = 0;
  // Parameter value UNKNOWN/UNSUPPORTED
  PARAM_ACK_VALUE_UNSUPPORTED = 1;
  // Parameter failed to set
  PARAM_ACK_FAILED = 2;
  // Parameter value received but not yet validated or set. A subsequent PARAM_EXT_ACK will follow once operation is completed with the actual result. These are for parameters that may take longer to set. Instead of waiting for an ACK and potentially timing out, you will immediately receive this response to let you know it was received.
  PARAM_ACK_IN_PROGRESS = 3;
}

enum CAMERA_MODE {
// Camera Modes.
  // Camera is in image/photo capture mode.
  CAMERA_MODE_IMAGE = 0;
  // Camera is in video capture mode.
  CAMERA_MODE_VIDEO = 1;
  // Camera is in image survey capture mode. It allows for camera controller to do specific settings for surveys.
  CAMERA_MODE_IMAGE_SURVEY = 2;
}

enum MAV_ARM_AUTH_DENIED_REASON {
  // Not a specific reason
  MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0;
  // Authorizer will send the error as string to GCS
  MAV_ARM_AUTH_DENIED_REASON_NONE = 1;
  // At least one waypoint have a invalid value
  MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2;
  // Timeout in the authorizer process(in case it depends on network)
  MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3;
  // Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
  MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4;
  // Weather is not good to fly
  MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5;
}

enum RC_TYPE {
// RC type
  // Spektrum DSM2
  RC_TYPE_SPEKTRUM_DSM2 = 0;
  // Spektrum DSMX
  RC_TYPE_SPEKTRUM_DSMX = 1;
}

enum POSITION_TARGET_TYPEMASK {
// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 9 is set the floats afx afy afz should be interpreted as force instead of acceleration.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  POSITION_TARGET_TYPEMASK_UNDEFINED = 0;
  // Ignore position x
  // bit 1
  POSITION_TARGET_TYPEMASK_X_IGNORE = 0x00000001;
  // Ignore position y
  // bit 2
  POSITION_TARGET_TYPEMASK_Y_IGNORE = 0x00000002;
  // Ignore position z
  // bit 3
  POSITION_TARGET_TYPEMASK_Z_IGNORE = 0x00000004;
  // Ignore velocity x
  // bit 4
  POSITION_TARGET_TYPEMASK_VX_IGNORE = 0x00000008;
  // Ignore velocity y
  // bit 5
  POSITION_TARGET_TYPEMASK_VY_IGNORE = 0x00000010;
  // Ignore velocity z
  // bit 6
  POSITION_TARGET_TYPEMASK_VZ_IGNORE = 0x00000020;
  // Ignore acceleration x
  // bit 7
  POSITION_TARGET_TYPEMASK_AX_IGNORE = 0x00000040;
  // Ignore acceleration y
  // bit 8
  POSITION_TARGET_TYPEMASK_AY_IGNORE = 0x00000080;
  // Ignore acceleration z
  // bit 9
  POSITION_TARGET_TYPEMASK_AZ_IGNORE = 0x00000100;
  // Use force instead of acceleration
  // bit 10
  POSITION_TARGET_TYPEMASK_FORCE_SET = 0x00000200;
  // Ignore yaw
  // bit 11
  POSITION_TARGET_TYPEMASK_YAW_IGNORE = 0x00000400;
  // Ignore yaw rate
  // bit 12
  POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 0x00000800;
}

enum UTM_FLIGHT_STATE {
// Airborne status of UAS.
  // Not used in MavLink, make protobuf happy.
  UTM_FLIGHT_STATE_UNDEFINED = 0;
  // The flight state can't be determined.
  UTM_FLIGHT_STATE_UNKNOWN = 1;
  // UAS on ground.
  UTM_FLIGHT_STATE_GROUND = 2;
  // UAS airborne.
  UTM_FLIGHT_STATE_AIRBORNE = 3;
  // UAS is in an emergency flight state.
  UTM_FLIGHT_STATE_EMERGENCY = 16;
  // UAS has no active controls.
  UTM_FLIGHT_STATE_NOCTRL = 32;
}

enum UTM_DATA_AVAIL_FLAGS {
// Flags for the global position report.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  UTM_DATA_AVAIL_FLAGS_UNDEFINED = 0;
  // The field time contains valid data.
  // bit 1
  UTM_DATA_AVAIL_FLAGS_TIME_VALID = 0x00000001;
  // The field uas_id contains valid data.
  // bit 2
  UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = 0x00000002;
  // The fields lat, lon and h_acc contain valid data.
  // bit 3
  UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = 0x00000004;
  // The fields alt and v_acc contain valid data.
  // bit 4
  UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = 0x00000008;
  // The field relative_alt contains valid data.
  // bit 5
  UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = 0x00000010;
  // The fields vx and vy contain valid data.
  // bit 6
  UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = 0x00000020;
  // The field vz contains valid data.
  // bit 7
  UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = 0x00000040;
  // The fields next_lat, next_lon and next_alt contain valid data.
  // bit 8
  UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = 0x00000080;
}

enum CELLULAR_NETWORK_RADIO_TYPE {
// Cellular network radio type
  CELLULAR_NETWORK_RADIO_TYPE_NONE = 0;
  CELLULAR_NETWORK_RADIO_TYPE_GSM = 1;
  CELLULAR_NETWORK_RADIO_TYPE_CDMA = 2;
  CELLULAR_NETWORK_RADIO_TYPE_WCDMA = 3;
  CELLULAR_NETWORK_RADIO_TYPE_LTE = 4;
}

enum CELLULAR_STATUS_FLAG {
// These flags encode the cellular network status
  // State unknown or not reportable.
  CELLULAR_STATUS_FLAG_UNKNOWN = 0;
  // Modem is unusable
  CELLULAR_STATUS_FLAG_FAILED = 1;
  // Modem is being initialized
  CELLULAR_STATUS_FLAG_INITIALIZING = 2;
  // Modem is locked
  CELLULAR_STATUS_FLAG_LOCKED = 3;
  // Modem is not enabled and is powered down
  CELLULAR_STATUS_FLAG_DISABLED = 4;
  // Modem is currently transitioning to the CELLULAR_STATUS_FLAG_DISABLED state
  CELLULAR_STATUS_FLAG_DISABLING = 5;
  // Modem is currently transitioning to the CELLULAR_STATUS_FLAG_ENABLED state
  CELLULAR_STATUS_FLAG_ENABLING = 6;
  // Modem is enabled and powered on but not registered with a network provider and not available for data connections
  CELLULAR_STATUS_FLAG_ENABLED = 7;
  // Modem is searching for a network provider to register
  CELLULAR_STATUS_FLAG_SEARCHING = 8;
  // Modem is registered with a network provider, and data connections and messaging may be available for use
  CELLULAR_STATUS_FLAG_REGISTERED = 9;
  // Modem is disconnecting and deactivating the last active packet data bearer. This state will not be entered if more than one packet data bearer is active and one of the active bearers is deactivated
  CELLULAR_STATUS_FLAG_DISCONNECTING = 10;
  // Modem is activating and connecting the first packet data bearer. Subsequent bearer activations when another bearer is already active do not cause this state to be entered
  CELLULAR_STATUS_FLAG_CONNECTING = 11;
  // One or more packet data bearers is active and connected
  CELLULAR_STATUS_FLAG_CONNECTED = 12;
}

enum CELLULAR_NETWORK_FAILED_REASON {
// These flags are used to diagnose the failure state of CELLULAR_STATUS
  // No error
  CELLULAR_NETWORK_FAILED_REASON_NONE = 0;
  // Error state is unknown
  CELLULAR_NETWORK_FAILED_REASON_UNKNOWN = 1;
  // SIM is required for the modem but missing
  CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING = 2;
  // SIM is available, but not usuable for connection
  CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR = 3;
}

enum PRECISION_LAND_MODE {
// Precision land modes (used in MAV_CMD_NAV_LAND).
  // Normal (non-precision) landing.
  PRECISION_LAND_MODE_DISABLED = 0;
  // Use precision landing if beacon detected when land command accepted, otherwise land normally.
  PRECISION_LAND_MODE_OPPORTUNISTIC = 1;
  // Use precision landing, searching for beacon if not found when land command accepted (land normally if beacon cannot be found).
  PRECISION_LAND_MODE_REQUIRED = 2;
}

enum PARACHUTE_ACTION {
// Parachute actions. Trigger release and enable/disable auto-release.
  // Disable auto-release of parachute (i.e. release triggered by crash detectors).
  PARACHUTE_DISABLE = 0;
  // Enable auto-release of parachute.
  PARACHUTE_ENABLE = 1;
  // Release parachute and kill motors.
  PARACHUTE_RELEASE = 2;
}

enum MAV_TUNNEL_PAYLOAD_TYPE {
  // Encoding of payload unknown.
  MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN = 0;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0 = 200;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1 = 201;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2 = 202;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3 = 203;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4 = 204;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5 = 205;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6 = 206;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7 = 207;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8 = 208;
  // Registered for STorM32 gimbal controller.
  MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9 = 209;
}

enum MAV_ODID_ID_TYPE {
  // No type defined.
  MAV_ODID_ID_TYPE_NONE = 0;
  // Manufacturer Serial Number (ANSI/CTA-2063 format).
  MAV_ODID_ID_TYPE_SERIAL_NUMBER = 1;
  // CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].
  MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID = 2;
  // UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
  MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID = 3;
}

enum MAV_ODID_UA_TYPE {
  // No UA (Unmanned Aircraft) type defined.
  MAV_ODID_UA_TYPE_NONE = 0;
  // Aeroplane/Airplane. Fixed wing.
  MAV_ODID_UA_TYPE_AEROPLANE = 1;
  // Helicopter or multirotor.
  MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR = 2;
  // Gyroplane.
  MAV_ODID_UA_TYPE_GYROPLANE = 3;
  // VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.
  MAV_ODID_UA_TYPE_HYBRID_LIFT = 4;
  // Ornithopter.
  MAV_ODID_UA_TYPE_ORNITHOPTER = 5;
  // Glider.
  MAV_ODID_UA_TYPE_GLIDER = 6;
  // Kite.
  MAV_ODID_UA_TYPE_KITE = 7;
  // Free Balloon.
  MAV_ODID_UA_TYPE_FREE_BALLOON = 8;
  // Captive Balloon.
  MAV_ODID_UA_TYPE_CAPTIVE_BALLOON = 9;
  // Airship. E.g. a blimp.
  MAV_ODID_UA_TYPE_AIRSHIP = 10;
  // Free Fall/Parachute (unpowered).
  MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE = 11;
  // Rocket.
  MAV_ODID_UA_TYPE_ROCKET = 12;
  // Tethered powered aircraft.
  MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT = 13;
  // Ground Obstacle.
  MAV_ODID_UA_TYPE_GROUND_OBSTACLE = 14;
  // Other type of aircraft not listed earlier.
  MAV_ODID_UA_TYPE_OTHER = 15;
}

enum MAV_ODID_STATUS {
  // The status of the (UA) Unmanned Aircraft is undefined.
  MAV_ODID_STATUS_UNDECLARED = 0;
  // The UA is on the ground.
  MAV_ODID_STATUS_GROUND = 1;
  // The UA is in the air.
  MAV_ODID_STATUS_AIRBORNE = 2;
  // The UA is having an emergency.
  MAV_ODID_STATUS_EMERGENCY = 3;
}

enum MAV_ODID_HEIGHT_REF {
  // The height field is relative to the take-off location.
  MAV_ODID_HEIGHT_REF_OVER_TAKEOFF = 0;
  // The height field is relative to ground.
  MAV_ODID_HEIGHT_REF_OVER_GROUND = 1;
}

enum MAV_ODID_HOR_ACC {
  // The horizontal accuracy is unknown.
  MAV_ODID_HOR_ACC_UNKNOWN = 0;
  // The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km.
  MAV_ODID_HOR_ACC_10NM = 1;
  // The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.
  MAV_ODID_HOR_ACC_4NM = 2;
  // The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.
  MAV_ODID_HOR_ACC_2NM = 3;
  // The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.
  MAV_ODID_HOR_ACC_1NM = 4;
  // The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.
  MAV_ODID_HOR_ACC_0_5NM = 5;
  // The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m.
  MAV_ODID_HOR_ACC_0_3NM = 6;
  // The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m.
  MAV_ODID_HOR_ACC_0_1NM = 7;
  // The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m.
  MAV_ODID_HOR_ACC_0_05NM = 8;
  // The horizontal accuracy is smaller than 30 meter.
  MAV_ODID_HOR_ACC_30_METER = 9;
  // The horizontal accuracy is smaller than 10 meter.
  MAV_ODID_HOR_ACC_10_METER = 10;
  // The horizontal accuracy is smaller than 3 meter.
  MAV_ODID_HOR_ACC_3_METER = 11;
  // The horizontal accuracy is smaller than 1 meter.
  MAV_ODID_HOR_ACC_1_METER = 12;
}

enum MAV_ODID_VER_ACC {
  // The vertical accuracy is unknown.
  MAV_ODID_VER_ACC_UNKNOWN = 0;
  // The vertical accuracy is smaller than 150 meter.
  MAV_ODID_VER_ACC_150_METER = 1;
  // The vertical accuracy is smaller than 45 meter.
  MAV_ODID_VER_ACC_45_METER = 2;
  // The vertical accuracy is smaller than 25 meter.
  MAV_ODID_VER_ACC_25_METER = 3;
  // The vertical accuracy is smaller than 10 meter.
  MAV_ODID_VER_ACC_10_METER = 4;
  // The vertical accuracy is smaller than 3 meter.
  MAV_ODID_VER_ACC_3_METER = 5;
  // The vertical accuracy is smaller than 1 meter.
  MAV_ODID_VER_ACC_1_METER = 6;
}

enum MAV_ODID_SPEED_ACC {
  // The speed accuracy is unknown.
  MAV_ODID_SPEED_ACC_UNKNOWN = 0;
  // The speed accuracy is smaller than 10 meters per second.
  MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND = 1;
  // The speed accuracy is smaller than 3 meters per second.
  MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND = 2;
  // The speed accuracy is smaller than 1 meters per second.
  MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND = 3;
  // The speed accuracy is smaller than 0.3 meters per second.
  MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND = 4;
}

enum MAV_ODID_TIME_ACC {
  // The timestamp accuracy is unknown.
  MAV_ODID_TIME_ACC_UNKNOWN = 0;
  // The timestamp accuracy is smaller than or equal to 0.1 second.
  MAV_ODID_TIME_ACC_0_1_SECOND = 1;
  // The timestamp accuracy is smaller than or equal to 0.2 second.
  MAV_ODID_TIME_ACC_0_2_SECOND = 2;
  // The timestamp accuracy is smaller than or equal to 0.3 second.
  MAV_ODID_TIME_ACC_0_3_SECOND = 3;
  // The timestamp accuracy is smaller than or equal to 0.4 second.
  MAV_ODID_TIME_ACC_0_4_SECOND = 4;
  // The timestamp accuracy is smaller than or equal to 0.5 second.
  MAV_ODID_TIME_ACC_0_5_SECOND = 5;
  // The timestamp accuracy is smaller than or equal to 0.6 second.
  MAV_ODID_TIME_ACC_0_6_SECOND = 6;
  // The timestamp accuracy is smaller than or equal to 0.7 second.
  MAV_ODID_TIME_ACC_0_7_SECOND = 7;
  // The timestamp accuracy is smaller than or equal to 0.8 second.
  MAV_ODID_TIME_ACC_0_8_SECOND = 8;
  // The timestamp accuracy is smaller than or equal to 0.9 second.
  MAV_ODID_TIME_ACC_0_9_SECOND = 9;
  // The timestamp accuracy is smaller than or equal to 1.0 second.
  MAV_ODID_TIME_ACC_1_0_SECOND = 10;
  // The timestamp accuracy is smaller than or equal to 1.1 second.
  MAV_ODID_TIME_ACC_1_1_SECOND = 11;
  // The timestamp accuracy is smaller than or equal to 1.2 second.
  MAV_ODID_TIME_ACC_1_2_SECOND = 12;
  // The timestamp accuracy is smaller than or equal to 1.3 second.
  MAV_ODID_TIME_ACC_1_3_SECOND = 13;
  // The timestamp accuracy is smaller than or equal to 1.4 second.
  MAV_ODID_TIME_ACC_1_4_SECOND = 14;
  // The timestamp accuracy is smaller than or equal to 1.5 second.
  MAV_ODID_TIME_ACC_1_5_SECOND = 15;
}

enum MAV_ODID_AUTH_TYPE {
  // No authentication type is specified.
  MAV_ODID_AUTH_TYPE_NONE = 0;
  // Signature for the UAS (Unmanned Aircraft System) ID.
  MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE = 1;
  // Signature for the Operator ID.
  MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE = 2;
  // Signature for the entire message set.
  MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE = 3;
  // Authentication is provided by Network Remote ID.
  MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID = 4;
}

enum MAV_ODID_DESC_TYPE {
  // Free-form text description of the purpose of the flight.
  MAV_ODID_DESC_TYPE_TEXT = 0;
}

enum MAV_ODID_OPERATOR_LOCATION_TYPE {
  // The location of the operator is the same as the take-off location.
  MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF = 0;
  // The location of the operator is based on live GNSS data.
  MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS = 1;
  // The location of the operator is a fixed location.
  MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED = 2;
}

enum MAV_ODID_CLASSIFICATION_TYPE {
  // The classification type for the UA is undeclared.
  MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED = 0;
  // The classification type for the UA follows EU (European Union) specifications.
  MAV_ODID_CLASSIFICATION_TYPE_EU = 1;
}

enum MAV_ODID_CATEGORY_EU {
  // The category for the UA, according to the EU specification, is undeclared.
  MAV_ODID_CATEGORY_EU_UNDECLARED = 0;
  // The category for the UA, according to the EU specification, is the Open category.
  MAV_ODID_CATEGORY_EU_OPEN = 1;
  // The category for the UA, according to the EU specification, is the Specific category.
  MAV_ODID_CATEGORY_EU_SPECIFIC = 2;
  // The category for the UA, according to the EU specification, is the Certified category.
  MAV_ODID_CATEGORY_EU_CERTIFIED = 3;
}

enum MAV_ODID_CLASS_EU {
  // The class for the UA, according to the EU specification, is undeclared.
  MAV_ODID_CLASS_EU_UNDECLARED = 0;
  // The class for the UA, according to the EU specification, is Class 0.
  MAV_ODID_CLASS_EU_CLASS_0 = 1;
  // The class for the UA, according to the EU specification, is Class 1.
  MAV_ODID_CLASS_EU_CLASS_1 = 2;
  // The class for the UA, according to the EU specification, is Class 2.
  MAV_ODID_CLASS_EU_CLASS_2 = 3;
  // The class for the UA, according to the EU specification, is Class 3.
  MAV_ODID_CLASS_EU_CLASS_3 = 4;
  // The class for the UA, according to the EU specification, is Class 4.
  MAV_ODID_CLASS_EU_CLASS_4 = 5;
  // The class for the UA, according to the EU specification, is Class 5.
  MAV_ODID_CLASS_EU_CLASS_5 = 6;
  // The class for the UA, according to the EU specification, is Class 6.
  MAV_ODID_CLASS_EU_CLASS_6 = 7;
}

enum MAV_ODID_OPERATOR_ID_TYPE {
  // CAA (Civil Aviation Authority) registered operator ID.
  MAV_ODID_OPERATOR_ID_TYPE_CAA = 0;
}

enum TUNE_FORMAT {
// Tune formats (used for vehicle buzzer/tone generation).
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  TUNE_FORMAT_UNDEFINED = 0;
  // Format is QBasic 1.1 Play: https://www.qbasic.net/en/reference/qb11/Statement/PLAY-006.htm.
  // bit 1
  TUNE_FORMAT_QBASIC1_1 = 0x00000001;
  // Format is Modern Music Markup Language (MML): https://en.wikipedia.org/wiki/Music_Macro_Language#Modern_MML.
  // bit 2
  TUNE_FORMAT_MML_MODERN = 0x00000002;
}

enum COMPONENT_CAP_FLAGS {
// Component capability flags (Bitmap)
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  COMPONENT_CAP_FLAGS_UNDEFINED = 0;
  // Component has parameters, and supports the parameter protocol (PARAM messages).
  // bit 1
  COMPONENT_CAP_FLAGS_PARAM = 0x00000001;
  // Component has parameters, and supports the extended parameter protocol (PARAM_EXT messages).
  // bit 2
  COMPONENT_CAP_FLAGS_PARAM_EXT = 0x00000002;
}

enum AIS_TYPE {
// Type of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
  // Not available (default).
  AIS_TYPE_UNKNOWN = 0;
  AIS_TYPE_RESERVED_1 = 1;
  AIS_TYPE_RESERVED_2 = 2;
  AIS_TYPE_RESERVED_3 = 3;
  AIS_TYPE_RESERVED_4 = 4;
  AIS_TYPE_RESERVED_5 = 5;
  AIS_TYPE_RESERVED_6 = 6;
  AIS_TYPE_RESERVED_7 = 7;
  AIS_TYPE_RESERVED_8 = 8;
  AIS_TYPE_RESERVED_9 = 9;
  AIS_TYPE_RESERVED_10 = 10;
  AIS_TYPE_RESERVED_11 = 11;
  AIS_TYPE_RESERVED_12 = 12;
  AIS_TYPE_RESERVED_13 = 13;
  AIS_TYPE_RESERVED_14 = 14;
  AIS_TYPE_RESERVED_15 = 15;
  AIS_TYPE_RESERVED_16 = 16;
  AIS_TYPE_RESERVED_17 = 17;
  AIS_TYPE_RESERVED_18 = 18;
  AIS_TYPE_RESERVED_19 = 19;
  // Wing In Ground effect.
  AIS_TYPE_WIG = 20;
  AIS_TYPE_WIG_HAZARDOUS_A = 21;
  AIS_TYPE_WIG_HAZARDOUS_B = 22;
  AIS_TYPE_WIG_HAZARDOUS_C = 23;
  AIS_TYPE_WIG_HAZARDOUS_D = 24;
  AIS_TYPE_WIG_RESERVED_1 = 25;
  AIS_TYPE_WIG_RESERVED_2 = 26;
  AIS_TYPE_WIG_RESERVED_3 = 27;
  AIS_TYPE_WIG_RESERVED_4 = 28;
  AIS_TYPE_WIG_RESERVED_5 = 29;
  AIS_TYPE_FISHING = 30;
  AIS_TYPE_TOWING = 31;
  // Towing: length exceeds 200m or breadth exceeds 25m.
  AIS_TYPE_TOWING_LARGE = 32;
  // Dredging or other underwater ops.
  AIS_TYPE_DREDGING = 33;
  AIS_TYPE_DIVING = 34;
  AIS_TYPE_MILITARY = 35;
  AIS_TYPE_SAILING = 36;
  AIS_TYPE_PLEASURE = 37;
  AIS_TYPE_RESERVED_20 = 38;
  AIS_TYPE_RESERVED_21 = 39;
  // High Speed Craft.
  AIS_TYPE_HSC = 40;
  AIS_TYPE_HSC_HAZARDOUS_A = 41;
  AIS_TYPE_HSC_HAZARDOUS_B = 42;
  AIS_TYPE_HSC_HAZARDOUS_C = 43;
  AIS_TYPE_HSC_HAZARDOUS_D = 44;
  AIS_TYPE_HSC_RESERVED_1 = 45;
  AIS_TYPE_HSC_RESERVED_2 = 46;
  AIS_TYPE_HSC_RESERVED_3 = 47;
  AIS_TYPE_HSC_RESERVED_4 = 48;
  AIS_TYPE_HSC_UNKNOWN = 49;
  AIS_TYPE_PILOT = 50;
  // Search And Rescue vessel.
  AIS_TYPE_SAR = 51;
  AIS_TYPE_TUG = 52;
  AIS_TYPE_PORT_TENDER = 53;
  // Anti-pollution equipment.
  AIS_TYPE_ANTI_POLLUTION = 54;
  AIS_TYPE_LAW_ENFORCEMENT = 55;
  AIS_TYPE_SPARE_LOCAL_1 = 56;
  AIS_TYPE_SPARE_LOCAL_2 = 57;
  AIS_TYPE_MEDICAL_TRANSPORT = 58;
  // Noncombatant ship according to RR Resolution No. 18.
  AIS_TYPE_NONECOMBATANT = 59;
  AIS_TYPE_PASSENGER = 60;
  AIS_TYPE_PASSENGER_HAZARDOUS_A = 61;
  AIS_TYPE_PASSENGER_HAZARDOUS_B = 62;
  AIS_TYPE_AIS_TYPE_PASSENGER_HAZARDOUS_C = 63;
  AIS_TYPE_PASSENGER_HAZARDOUS_D = 64;
  AIS_TYPE_PASSENGER_RESERVED_1 = 65;
  AIS_TYPE_PASSENGER_RESERVED_2 = 66;
  AIS_TYPE_PASSENGER_RESERVED_3 = 67;
  AIS_TYPE_AIS_TYPE_PASSENGER_RESERVED_4 = 68;
  AIS_TYPE_PASSENGER_UNKNOWN = 69;
  AIS_TYPE_CARGO = 70;
  AIS_TYPE_CARGO_HAZARDOUS_A = 71;
  AIS_TYPE_CARGO_HAZARDOUS_B = 72;
  AIS_TYPE_CARGO_HAZARDOUS_C = 73;
  AIS_TYPE_CARGO_HAZARDOUS_D = 74;
  AIS_TYPE_CARGO_RESERVED_1 = 75;
  AIS_TYPE_CARGO_RESERVED_2 = 76;
  AIS_TYPE_CARGO_RESERVED_3 = 77;
  AIS_TYPE_CARGO_RESERVED_4 = 78;
  AIS_TYPE_CARGO_UNKNOWN = 79;
  AIS_TYPE_TANKER = 80;
  AIS_TYPE_TANKER_HAZARDOUS_A = 81;
  AIS_TYPE_TANKER_HAZARDOUS_B = 82;
  AIS_TYPE_TANKER_HAZARDOUS_C = 83;
  AIS_TYPE_TANKER_HAZARDOUS_D = 84;
  AIS_TYPE_TANKER_RESERVED_1 = 85;
  AIS_TYPE_TANKER_RESERVED_2 = 86;
  AIS_TYPE_TANKER_RESERVED_3 = 87;
  AIS_TYPE_TANKER_RESERVED_4 = 88;
  AIS_TYPE_TANKER_UNKNOWN = 89;
  AIS_TYPE_OTHER = 90;
  AIS_TYPE_OTHER_HAZARDOUS_A = 91;
  AIS_TYPE_OTHER_HAZARDOUS_B = 92;
  AIS_TYPE_OTHER_HAZARDOUS_C = 93;
  AIS_TYPE_OTHER_HAZARDOUS_D = 94;
  AIS_TYPE_OTHER_RESERVED_1 = 95;
  AIS_TYPE_OTHER_RESERVED_2 = 96;
  AIS_TYPE_OTHER_RESERVED_3 = 97;
  AIS_TYPE_OTHER_RESERVED_4 = 98;
  AIS_TYPE_OTHER_UNKNOWN = 99;
}

enum AIS_NAV_STATUS {
// Navigational status of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
  // Under way using engine.
  UNDER_WAY = 0;
  AIS_NAV_ANCHORED = 1;
  AIS_NAV_UN_COMMANDED = 2;
  AIS_NAV_RESTRICTED_MANOEUVERABILITY = 3;
  AIS_NAV_DRAUGHT_CONSTRAINED = 4;
  AIS_NAV_MOORED = 5;
  AIS_NAV_AGROUND = 6;
  AIS_NAV_FISHING = 7;
  AIS_NAV_SAILING = 8;
  AIS_NAV_RESERVED_HSC = 9;
  AIS_NAV_RESERVED_WIG = 10;
  AIS_NAV_RESERVED_1 = 11;
  AIS_NAV_RESERVED_2 = 12;
  AIS_NAV_RESERVED_3 = 13;
  // Search And Rescue Transponder.
  AIS_NAV_AIS_SART = 14;
  // Not available (default).
  AIS_NAV_UNKNOWN = 15;
}

enum AIS_FLAGS {
// These flags are used in the AIS_VESSEL.fields bitmask to indicate validity of data in the other message fields. When set, the data is valid.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  AIS_FLAGS_UNDEFINED = 0;
  // 1 = Position accuracy less than 10m, 0 = position accuracy greater than 10m.
  // bit 1
  AIS_FLAGS_POSITION_ACCURACY = 0x00000001;
  // bit 2
  AIS_FLAGS_VALID_COG = 0x00000002;
  // bit 3
  AIS_FLAGS_VALID_VELOCITY = 0x00000004;
  // 1 = Velocity over 52.5765m/s (102.2 knots)
  // bit 4
  AIS_FLAGS_HIGH_VELOCITY = 0x00000008;
  // bit 5
  AIS_FLAGS_VALID_TURN_RATE = 0x00000010;
  // Only the sign of the returned turn rate value is valid, either greater than 5deg/30s or less than -5deg/30s
  // bit 6
  AIS_FLAGS_TURN_RATE_SIGN_ONLY = 0x00000020;
  // bit 7
  AIS_FLAGS_VALID_DIMENSIONS = 0x00000040;
  // Distance to bow is larger than 511m
  // bit 8
  AIS_FLAGS_LARGE_BOW_DIMENSION = 0x00000080;
  // Distance to stern is larger than 511m
  // bit 9
  AIS_FLAGS_LARGE_STERN_DIMENSION = 0x00000100;
  // Distance to port side is larger than 63m
  // bit 10
  AIS_FLAGS_LARGE_PORT_DIMENSION = 0x00000200;
  // Distance to starboard side is larger than 63m
  // bit 11
  AIS_FLAGS_LARGE_STARBOARD_DIMENSION = 0x00000400;
  // bit 12
  AIS_FLAGS_VALID_CALLSIGN = 0x00000800;
  // bit 13
  AIS_FLAGS_VALID_NAME = 0x00001000;
}

enum FAILURE_UNIT {
// List of possible units where failures can be injected.
  FAILURE_UNIT_SENSOR_GYRO = 0;
  FAILURE_UNIT_SENSOR_ACCEL = 1;
  FAILURE_UNIT_SENSOR_MAG = 2;
  FAILURE_UNIT_SENSOR_BARO = 3;
  FAILURE_UNIT_SENSOR_GPS = 4;
  FAILURE_UNIT_SENSOR_OPTICAL_FLOW = 5;
  FAILURE_UNIT_SENSOR_VIO = 6;
  FAILURE_UNIT_SENSOR_DISTANCE_SENSOR = 7;
  FAILURE_UNIT_SENSOR_AIRSPEED = 8;
  FAILURE_UNIT_SYSTEM_BATTERY = 100;
  FAILURE_UNIT_SYSTEM_MOTOR = 101;
  FAILURE_UNIT_SYSTEM_SERVO = 102;
  FAILURE_UNIT_SYSTEM_AVOIDANCE = 103;
  FAILURE_UNIT_SYSTEM_RC_SIGNAL = 104;
  FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL = 105;
}

enum FAILURE_TYPE {
// List of possible failure type to inject.
  // No failure injected, used to reset a previous failure.
  FAILURE_TYPE_OK = 0;
  // Sets unit off, so completely non-responsive.
  FAILURE_TYPE_OFF = 1;
  // Unit is stuck e.g. keeps reporting the same value.
  FAILURE_TYPE_STUCK = 2;
  // Unit is reporting complete garbage.
  FAILURE_TYPE_GARBAGE = 3;
  // Unit is consistently wrong.
  FAILURE_TYPE_WRONG = 4;
  // Unit is slow, so e.g. reporting at slower than expected rate.
  FAILURE_TYPE_SLOW = 5;
  // Data of unit is delayed in time.
  FAILURE_TYPE_DELAYED = 6;
  // Unit is sometimes working, sometimes not.
  FAILURE_TYPE_INTERMITTENT = 7;
}

// The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html
message HEARTBEAT {  // MavLink id: 0
  option (mav.message).id = 0;
  // A bitfield for use for autopilot-specific flags
  uint32 custom_mode = 1 [(mav.opts) = { type: "uint32_t" }];
  // Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
  MAV_TYPE type = 2 [(mav.opts) = { type: "uint8_t", enum: "MAV_TYPE" }];
  // Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
  MAV_AUTOPILOT autopilot = 3 [(mav.opts) = { type: "uint8_t", enum: "MAV_AUTOPILOT" }];
  // System mode bitmap.
  // bitfield defined by enum MAV_MODE_FLAG
  uint32 base_mode = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_MODE_FLAG" }];
  // System status flag.
  MAV_STATE system_status = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_STATE" }];
  // MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
  uint32 mavlink_version = 6 [(mav.opts) = { type: "uint8_t" }];
}

// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
message SYS_STATUS {  // MavLink id: 1
  option (mav.message).id = 1;
  // Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
  // bitfield defined by enum MAV_SYS_STATUS_SENSOR
  uint32 onboard_control_sensors_present = 1 [(mav.opts) = { type: "uint32_t", enum: "MAV_SYS_STATUS_SENSOR" }];
  // Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
  // bitfield defined by enum MAV_SYS_STATUS_SENSOR
  uint32 onboard_control_sensors_enabled = 2 [(mav.opts) = { type: "uint32_t", enum: "MAV_SYS_STATUS_SENSOR" }];
  // Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
  // bitfield defined by enum MAV_SYS_STATUS_SENSOR
  uint32 onboard_control_sensors_health = 3 [(mav.opts) = { type: "uint32_t", enum: "MAV_SYS_STATUS_SENSOR" }];
  // Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000
  uint32 load = 4 [(mav.opts) = { type: "uint16_t" }];
  // Battery voltage, UINT16_MAX: Voltage not sent by autopilot
  uint32 voltage_battery = 5 [(mav.opts) = { type: "uint16_t" }];
  // Battery current, -1: Current not sent by autopilot
  int32 current_battery = 6 [(mav.opts) = { type: "int16_t" }];
  // Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
  uint32 drop_rate_comm = 7 [(mav.opts) = { type: "uint16_t" }];
  // Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
  uint32 errors_comm = 8 [(mav.opts) = { type: "uint16_t" }];
  // Autopilot-specific errors
  uint32 errors_count1 = 9 [(mav.opts) = { type: "uint16_t" }];
  // Autopilot-specific errors
  uint32 errors_count2 = 10 [(mav.opts) = { type: "uint16_t" }];
  // Autopilot-specific errors
  uint32 errors_count3 = 11 [(mav.opts) = { type: "uint16_t" }];
  // Autopilot-specific errors
  uint32 errors_count4 = 12 [(mav.opts) = { type: "uint16_t" }];
  // Battery energy remaining, -1: Battery remaining energy not sent by autopilot
  int32 battery_remaining = 13 [(mav.opts) = { type: "int8_t" }];
}

// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
message SYSTEM_TIME {  // MavLink id: 2
  option (mav.message).id = 2;
  // Timestamp (UNIX epoch time).
  uint64 time_unix_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 2 [(mav.opts) = { type: "uint32_t" }];
}

// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html
message PING {  // MavLink id: 4
  option (mav.message).id = 4;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // PING sequence
  uint32 seq = 2 [(mav.opts) = { type: "uint32_t" }];
  // 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
}

// Request to control this MAV
message CHANGE_OPERATOR_CONTROL {  // MavLink id: 5
  option (mav.message).id = 5;
  // System the GCS requests control for
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // 0: request control of this MAV, 1: Release control of this MAV
  uint32 control_request = 2 [(mav.opts) = { type: "uint8_t" }];
  // 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
  uint32 version = 3 [(mav.opts) = { type: "uint8_t" }];
  // Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
  string passkey = 4 [(mav.opts) = { type: "char[25]" }];
}

// Accept / deny control of this MAV
message CHANGE_OPERATOR_CONTROL_ACK {  // MavLink id: 6
  option (mav.message).id = 6;
  // ID of the GCS this message
  uint32 gcs_system_id = 1 [(mav.opts) = { type: "uint8_t" }];
  // 0: request control of this MAV, 1: Release control of this MAV
  uint32 control_request = 2 [(mav.opts) = { type: "uint8_t" }];
  // 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
  uint32 ack = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
message AUTH_KEY {  // MavLink id: 7
  option (mav.message).id = 7;
  // key
  string key = 1 [(mav.opts) = { type: "char[32]" }];
}

// Status generated in each node in the communication chain and injected into MAVLink stream.
message LINK_NODE_STATUS {  // MavLink id: 8
  option (mav.message).id = 8;
  // Timestamp (time since system boot).
  uint64 timestamp = 1 [(mav.opts) = { type: "uint64_t" }];
  // Transmit rate
  uint32 tx_rate = 2 [(mav.opts) = { type: "uint32_t" }];
  // Receive rate
  uint32 rx_rate = 3 [(mav.opts) = { type: "uint32_t" }];
  // Messages sent
  uint32 messages_sent = 4 [(mav.opts) = { type: "uint32_t" }];
  // Messages received (estimated from counting seq)
  uint32 messages_received = 5 [(mav.opts) = { type: "uint32_t" }];
  // Messages lost (estimated from counting seq)
  uint32 messages_lost = 6 [(mav.opts) = { type: "uint32_t" }];
  // Number of bytes that could not be parsed correctly.
  uint32 rx_parse_err = 7 [(mav.opts) = { type: "uint16_t" }];
  // Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX
  uint32 tx_overflows = 8 [(mav.opts) = { type: "uint16_t" }];
  // Receive buffer overflows. This number wraps around as it reaches UINT16_MAX
  uint32 rx_overflows = 9 [(mav.opts) = { type: "uint16_t" }];
  // Remaining free transmit buffer space
  uint32 tx_buf = 10 [(mav.opts) = { type: "uint8_t" }];
  // Remaining free receive buffer space
  uint32 rx_buf = 11 [(mav.opts) = { type: "uint8_t" }];
}

// Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
message SET_MODE {  // MavLink id: 11
  option (mav.message).id = 11;
  // The new autopilot-specific mode. This field can be ignored by an autopilot.
  uint32 custom_mode = 1 [(mav.opts) = { type: "uint32_t" }];
  // The system setting the mode
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // The new base mode.
  MAV_MODE base_mode = 3 [(mav.opts) = { type: "uint8_t", enum: "MAV_MODE" }];
}

// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.
message PARAM_REQUEST_READ {  // MavLink id: 20
  option (mav.message).id = 20;
  // Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
  int32 param_index = 1 [(mav.opts) = { type: "int16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 4 [(mav.opts) = { type: "char[16]" }];
}

// Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
message PARAM_REQUEST_LIST {  // MavLink id: 21
  option (mav.message).id = 21;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
message PARAM_VALUE {  // MavLink id: 22
  option (mav.message).id = 22;
  // Onboard parameter value
  float param_value = 1 [(mav.opts) = { type: "float" }];
  // Total number of onboard parameters
  uint32 param_count = 2 [(mav.opts) = { type: "uint16_t" }];
  // Index of this onboard parameter
  uint32 param_index = 3 [(mav.opts) = { type: "uint16_t" }];
  // Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 4 [(mav.opts) = { type: "char[16]" }];
  // Onboard parameter type.
  MAV_PARAM_TYPE param_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_PARAM_TYPE" }];
}

// Set a parameter value (write new value to permanent storage). IMPORTANT: The receiving component should acknowledge the new parameter value by sending a PARAM_VALUE message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
message PARAM_SET {  // MavLink id: 23
  option (mav.message).id = 23;
  // Onboard parameter value
  float param_value = 1 [(mav.opts) = { type: "float" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 4 [(mav.opts) = { type: "char[16]" }];
  // Onboard parameter type.
  MAV_PARAM_TYPE param_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_PARAM_TYPE" }];
}

// The global position, as returned by the Global Positioning System (GPS). This is
// NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
message GPS_RAW_INT {  // MavLink id: 24
  option (mav.message).id = 24;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude (WGS84, EGM96 ellipsoid)
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84, EGM96 ellipsoid)
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
  uint32 eph = 5 [(mav.opts) = { type: "uint16_t" }];
  // GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
  uint32 epv = 6 [(mav.opts) = { type: "uint16_t" }];
  // GPS ground speed. If unknown, set to: UINT16_MAX
  uint32 vel = 7 [(mav.opts) = { type: "uint16_t" }];
  // Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
  uint32 cog = 8 [(mav.opts) = { type: "uint16_t" }];
  // GPS fix type.
  GPS_FIX_TYPE fix_type = 9 [(mav.opts) = { type: "uint8_t", enum: "GPS_FIX_TYPE" }];
  // Number of satellites visible. If unknown, set to 255
  uint32 satellites_visible = 10 [(mav.opts) = { type: "uint8_t" }];
}

// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
message GPS_STATUS {  // MavLink id: 25
  option (mav.message).id = 25;
  // Number of satellites visible
  uint32 satellites_visible = 1 [(mav.opts) = { type: "uint8_t" }];
  // Global satellite ID
  repeated uint32 satellite_prn = 2 [(mav.opts) = { type: "uint8_t[20]" }];
  // 0: Satellite not used, 1: used for localization
  repeated uint32 satellite_used = 3 [(mav.opts) = { type: "uint8_t[20]" }];
  // Elevation (0: right on top of receiver, 90: on the horizon) of satellite
  repeated uint32 satellite_elevation = 4 [(mav.opts) = { type: "uint8_t[20]" }];
  // Direction of satellite, 0: 0 deg, 255: 360 deg.
  repeated uint32 satellite_azimuth = 5 [(mav.opts) = { type: "uint8_t[20]" }];
  // Signal to noise ratio of satellite
  repeated uint32 satellite_snr = 6 [(mav.opts) = { type: "uint8_t[20]" }];
}

// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
message SCALED_IMU {  // MavLink id: 26
  option (mav.message).id = 26;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X acceleration
  int32 xacc = 2 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration
  int32 yacc = 3 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration
  int32 zacc = 4 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around X axis
  int32 xgyro = 5 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Y axis
  int32 ygyro = 6 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Z axis
  int32 zgyro = 7 [(mav.opts) = { type: "int16_t" }];
  // X Magnetic field
  int32 xmag = 8 [(mav.opts) = { type: "int16_t" }];
  // Y Magnetic field
  int32 ymag = 9 [(mav.opts) = { type: "int16_t" }];
  // Z Magnetic field
  int32 zmag = 10 [(mav.opts) = { type: "int16_t" }];
}

// The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.
message RAW_IMU {  // MavLink id: 27
  option (mav.message).id = 27;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X acceleration (raw)
  int32 xacc = 2 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration (raw)
  int32 yacc = 3 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration (raw)
  int32 zacc = 4 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around X axis (raw)
  int32 xgyro = 5 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Y axis (raw)
  int32 ygyro = 6 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Z axis (raw)
  int32 zgyro = 7 [(mav.opts) = { type: "int16_t" }];
  // X Magnetic field (raw)
  int32 xmag = 8 [(mav.opts) = { type: "int16_t" }];
  // Y Magnetic field (raw)
  int32 ymag = 9 [(mav.opts) = { type: "int16_t" }];
  // Z Magnetic field (raw)
  int32 zmag = 10 [(mav.opts) = { type: "int16_t" }];
}

// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
message RAW_PRESSURE {  // MavLink id: 28
  option (mav.message).id = 28;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Absolute pressure (raw)
  int32 press_abs = 2 [(mav.opts) = { type: "int16_t" }];
  // Differential pressure 1 (raw, 0 if nonexistent)
  int32 press_diff1 = 3 [(mav.opts) = { type: "int16_t" }];
  // Differential pressure 2 (raw, 0 if nonexistent)
  int32 press_diff2 = 4 [(mav.opts) = { type: "int16_t" }];
  // Raw Temperature measurement (raw)
  int32 temperature = 5 [(mav.opts) = { type: "int16_t" }];
}

// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
message SCALED_PRESSURE {  // MavLink id: 29
  option (mav.message).id = 29;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Absolute pressure
  float press_abs = 2 [(mav.opts) = { type: "float" }];
  // Differential pressure 1
  float press_diff = 3 [(mav.opts) = { type: "float" }];
  // Temperature
  int32 temperature = 4 [(mav.opts) = { type: "int16_t" }];
}

// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
message ATTITUDE {  // MavLink id: 30
  option (mav.message).id = 30;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Roll angle (-pi..+pi)
  float roll = 2 [(mav.opts) = { type: "float" }];
  // Pitch angle (-pi..+pi)
  float pitch = 3 [(mav.opts) = { type: "float" }];
  // Yaw angle (-pi..+pi)
  float yaw = 4 [(mav.opts) = { type: "float" }];
  // Roll angular speed
  float rollspeed = 5 [(mav.opts) = { type: "float" }];
  // Pitch angular speed
  float pitchspeed = 6 [(mav.opts) = { type: "float" }];
  // Yaw angular speed
  float yawspeed = 7 [(mav.opts) = { type: "float" }];
}

// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
message ATTITUDE_QUATERNION {  // MavLink id: 31
  option (mav.message).id = 31;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Quaternion component 1, w (1 in null-rotation)
  float q1 = 2 [(mav.opts) = { type: "float" }];
  // Quaternion component 2, x (0 in null-rotation)
  float q2 = 3 [(mav.opts) = { type: "float" }];
  // Quaternion component 3, y (0 in null-rotation)
  float q3 = 4 [(mav.opts) = { type: "float" }];
  // Quaternion component 4, z (0 in null-rotation)
  float q4 = 5 [(mav.opts) = { type: "float" }];
  // Roll angular speed
  float rollspeed = 6 [(mav.opts) = { type: "float" }];
  // Pitch angular speed
  float pitchspeed = 7 [(mav.opts) = { type: "float" }];
  // Yaw angular speed
  float yawspeed = 8 [(mav.opts) = { type: "float" }];
}

// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
message LOCAL_POSITION_NED {  // MavLink id: 32
  option (mav.message).id = 32;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position
  float z = 4 [(mav.opts) = { type: "float" }];
  // X Speed
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y Speed
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z Speed
  float vz = 7 [(mav.opts) = { type: "float" }];
}

// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
// is designed as scaled integer message since the resolution of float is not sufficient.
message GLOBAL_POSITION_INT {  // MavLink id: 33
  option (mav.message).id = 33;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Latitude, expressed
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude, expressed
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude above ground
  int32 relative_alt = 5 [(mav.opts) = { type: "int32_t" }];
  // Ground X Speed (Latitude, positive north)
  int32 vx = 6 [(mav.opts) = { type: "int16_t" }];
  // Ground Y Speed (Longitude, positive east)
  int32 vy = 7 [(mav.opts) = { type: "int16_t" }];
  // Ground Z Speed (Altitude, positive down)
  int32 vz = 8 [(mav.opts) = { type: "int16_t" }];
  // Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
  uint32 hdg = 9 [(mav.opts) = { type: "uint16_t" }];
}

// The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
message RC_CHANNELS_SCALED {  // MavLink id: 34
  option (mav.message).id = 34;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // RC channel 1 value scaled.
  int32 chan1_scaled = 2 [(mav.opts) = { type: "int16_t" }];
  // RC channel 2 value scaled.
  int32 chan2_scaled = 3 [(mav.opts) = { type: "int16_t" }];
  // RC channel 3 value scaled.
  int32 chan3_scaled = 4 [(mav.opts) = { type: "int16_t" }];
  // RC channel 4 value scaled.
  int32 chan4_scaled = 5 [(mav.opts) = { type: "int16_t" }];
  // RC channel 5 value scaled.
  int32 chan5_scaled = 6 [(mav.opts) = { type: "int16_t" }];
  // RC channel 6 value scaled.
  int32 chan6_scaled = 7 [(mav.opts) = { type: "int16_t" }];
  // RC channel 7 value scaled.
  int32 chan7_scaled = 8 [(mav.opts) = { type: "int16_t" }];
  // RC channel 8 value scaled.
  int32 chan8_scaled = 9 [(mav.opts) = { type: "int16_t" }];
  // Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
  uint32 port = 10 [(mav.opts) = { type: "uint8_t" }];
  // Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 rssi = 11 [(mav.opts) = { type: "uint8_t" }];
}

// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
message RC_CHANNELS_RAW {  // MavLink id: 35
  option (mav.message).id = 35;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // RC channel 1 value.
  uint32 chan1_raw = 2 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 2 value.
  uint32 chan2_raw = 3 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 3 value.
  uint32 chan3_raw = 4 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 4 value.
  uint32 chan4_raw = 5 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 5 value.
  uint32 chan5_raw = 6 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 6 value.
  uint32 chan6_raw = 7 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 7 value.
  uint32 chan7_raw = 8 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 8 value.
  uint32 chan8_raw = 9 [(mav.opts) = { type: "uint16_t" }];
  // Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
  uint32 port = 10 [(mav.opts) = { type: "uint8_t" }];
  // Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 rssi = 11 [(mav.opts) = { type: "uint8_t" }];
}

// Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
message SERVO_OUTPUT_RAW {  // MavLink id: 36
  option (mav.message).id = 36;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint32 time_usec = 1 [(mav.opts) = { type: "uint32_t" }];
  // Servo output 1 value
  uint32 servo1_raw = 2 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 2 value
  uint32 servo2_raw = 3 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 3 value
  uint32 servo3_raw = 4 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 4 value
  uint32 servo4_raw = 5 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 5 value
  uint32 servo5_raw = 6 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 6 value
  uint32 servo6_raw = 7 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 7 value
  uint32 servo7_raw = 8 [(mav.opts) = { type: "uint16_t" }];
  // Servo output 8 value
  uint32 servo8_raw = 9 [(mav.opts) = { type: "uint16_t" }];
  // Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
  uint32 port = 10 [(mav.opts) = { type: "uint8_t" }];
}

// Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.
message MISSION_REQUEST_PARTIAL_LIST {  // MavLink id: 37
  option (mav.message).id = 37;
  // Start index
  int32 start_index = 1 [(mav.opts) = { type: "int16_t" }];
  // End index, -1 by default (-1: send list to end). Else a valid index of the list
  int32 end_index = 2 [(mav.opts) = { type: "int16_t" }];
  // System ID
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
}

// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
message MISSION_WRITE_PARTIAL_LIST {  // MavLink id: 38
  option (mav.message).id = 38;
  // Start index. Must be smaller / equal to the largest index of the current onboard list.
  int32 start_index = 1 [(mav.opts) = { type: "int16_t" }];
  // End index, equal or greater than start index.
  int32 end_index = 2 [(mav.opts) = { type: "int16_t" }];
  // System ID
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
}

// Message encoding a mission item. This message is emitted to announce
// the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN may be used to indicate an optional/default value (e.g. to use the system's current latitude or yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
message MISSION_ITEM {  // MavLink id: 39
  option (mav.message).id = 39;
  // PARAM1, see MAV_CMD enum
  float param1 = 1 [(mav.opts) = { type: "float" }];
  // PARAM2, see MAV_CMD enum
  float param2 = 2 [(mav.opts) = { type: "float" }];
  // PARAM3, see MAV_CMD enum
  float param3 = 3 [(mav.opts) = { type: "float" }];
  // PARAM4, see MAV_CMD enum
  float param4 = 4 [(mav.opts) = { type: "float" }];
  // PARAM5 / local: X coordinate, global: latitude
  float x = 5 [(mav.opts) = { type: "float" }];
  // PARAM6 / local: Y coordinate, global: longitude
  float y = 6 [(mav.opts) = { type: "float" }];
  // PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).
  float z = 7 [(mav.opts) = { type: "float" }];
  // Sequence
  uint32 seq = 8 [(mav.opts) = { type: "uint16_t" }];
  // The scheduled action for the waypoint.
  MAV_CMD command = 9 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // System ID
  uint32 target_system = 10 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 11 [(mav.opts) = { type: "uint8_t" }];
  // The coordinate system of the waypoint.
  MAV_FRAME frame = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
  // false:0, true:1
  uint32 current = 13 [(mav.opts) = { type: "uint8_t" }];
  // Autocontinue to next waypoint
  uint32 autocontinue = 14 [(mav.opts) = { type: "uint8_t" }];
}

// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html
message MISSION_REQUEST {  // MavLink id: 40
  option (mav.message).id = 40;
  // Sequence
  uint32 seq = 1 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
message MISSION_SET_CURRENT {  // MavLink id: 41
  option (mav.message).id = 41;
  // Sequence
  uint32 seq = 1 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
message MISSION_CURRENT {  // MavLink id: 42
  option (mav.message).id = 42;
  // Sequence
  uint32 seq = 1 [(mav.opts) = { type: "uint16_t" }];
}

// Request the overall list of mission items from the system/component.
message MISSION_REQUEST_LIST {  // MavLink id: 43
  option (mav.message).id = 43;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
message MISSION_COUNT {  // MavLink id: 44
  option (mav.message).id = 44;
  // Number of mission items in the sequence
  uint32 count = 1 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Delete all mission items at once.
message MISSION_CLEAR_ALL {  // MavLink id: 45
  option (mav.message).id = 45;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
message MISSION_ITEM_REACHED {  // MavLink id: 46
  option (mav.message).id = 46;
  // Sequence
  uint32 seq = 1 [(mav.opts) = { type: "uint16_t" }];
}

// Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
message MISSION_ACK {  // MavLink id: 47
  option (mav.message).id = 47;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Mission result.
  MAV_MISSION_RESULT type = 3 [(mav.opts) = { type: "uint8_t", enum: "MAV_MISSION_RESULT" }];
}

// Sets the GPS co-ordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.
message SET_GPS_GLOBAL_ORIGIN {  // MavLink id: 48
  option (mav.message).id = 48;
  // Latitude (WGS84)
  int32 latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 altitude = 3 [(mav.opts) = { type: "int32_t" }];
  // System ID
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
}

// Publishes the GPS co-ordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.
message GPS_GLOBAL_ORIGIN {  // MavLink id: 49
  option (mav.message).id = 49;
  // Latitude (WGS84)
  int32 latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 altitude = 3 [(mav.opts) = { type: "int32_t" }];
}

// Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
message PARAM_MAP_RC {  // MavLink id: 50
  option (mav.message).id = 50;
  // Initial parameter value
  float param_value0 = 1 [(mav.opts) = { type: "float" }];
  // Scale, maps the RC range [-1, 1] to a parameter value
  float scale = 2 [(mav.opts) = { type: "float" }];
  // Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
  float param_value_min = 3 [(mav.opts) = { type: "float" }];
  // Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
  float param_value_max = 4 [(mav.opts) = { type: "float" }];
  // Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
  int32 param_index = 5 [(mav.opts) = { type: "int16_t" }];
  // System ID
  uint32 target_system = 6 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 7 [(mav.opts) = { type: "uint8_t" }];
  // Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 8 [(mav.opts) = { type: "char[16]" }];
  // Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.
  uint32 parameter_rc_channel_index = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html
message MISSION_REQUEST_INT {  // MavLink id: 51
  option (mav.message).id = 51;
  // Sequence
  uint32 seq = 1 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.
message MISSION_CHANGED {  // MavLink id: 52
  option (mav.message).id = 52;
  // Start index for partial mission change (-1 for all items).
  int32 start_index = 1 [(mav.opts) = { type: "int16_t" }];
  // End index of a partial mission change. -1 is a synonym for the last mission item (i.e. selects all items from start_index). Ignore field if start_index=-1.
  int32 end_index = 2 [(mav.opts) = { type: "int16_t" }];
  // System ID of the author of the new mission.
  uint32 origin_sysid = 3 [(mav.opts) = { type: "uint8_t" }];
  // Compnent ID of the author of the new mission.
  MAV_COMPONENT origin_compid = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_COMPONENT" }];
  // Mission type.
  MAV_MISSION_TYPE mission_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_MISSION_TYPE" }];
}

// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
message SAFETY_SET_ALLOWED_AREA {  // MavLink id: 54
  option (mav.message).id = 54;
  // x position 1 / Latitude 1
  float p1x = 1 [(mav.opts) = { type: "float" }];
  // y position 1 / Longitude 1
  float p1y = 2 [(mav.opts) = { type: "float" }];
  // z position 1 / Altitude 1
  float p1z = 3 [(mav.opts) = { type: "float" }];
  // x position 2 / Latitude 2
  float p2x = 4 [(mav.opts) = { type: "float" }];
  // y position 2 / Longitude 2
  float p2y = 5 [(mav.opts) = { type: "float" }];
  // z position 2 / Altitude 2
  float p2z = 6 [(mav.opts) = { type: "float" }];
  // System ID
  uint32 target_system = 7 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 8 [(mav.opts) = { type: "uint8_t" }];
  // Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
  MAV_FRAME frame = 9 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Read out the safety zone the MAV currently assumes.
message SAFETY_ALLOWED_AREA {  // MavLink id: 55
  option (mav.message).id = 55;
  // x position 1 / Latitude 1
  float p1x = 1 [(mav.opts) = { type: "float" }];
  // y position 1 / Longitude 1
  float p1y = 2 [(mav.opts) = { type: "float" }];
  // z position 1 / Altitude 1
  float p1z = 3 [(mav.opts) = { type: "float" }];
  // x position 2 / Latitude 2
  float p2x = 4 [(mav.opts) = { type: "float" }];
  // y position 2 / Longitude 2
  float p2y = 5 [(mav.opts) = { type: "float" }];
  // z position 2 / Altitude 2
  float p2z = 6 [(mav.opts) = { type: "float" }];
  // Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
  MAV_FRAME frame = 7 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
message ATTITUDE_QUATERNION_COV {  // MavLink id: 61
  option (mav.message).id = 61;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // Roll angular speed
  float rollspeed = 3 [(mav.opts) = { type: "float" }];
  // Pitch angular speed
  float pitchspeed = 4 [(mav.opts) = { type: "float" }];
  // Yaw angular speed
  float yawspeed = 5 [(mav.opts) = { type: "float" }];
  // Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
  repeated float covariance = 6 [(mav.opts) = { type: "float[9]" }];
}

// The state of the fixed wing navigation and position controller.
message NAV_CONTROLLER_OUTPUT {  // MavLink id: 62
  option (mav.message).id = 62;
  // Current desired roll
  float nav_roll = 1 [(mav.opts) = { type: "float" }];
  // Current desired pitch
  float nav_pitch = 2 [(mav.opts) = { type: "float" }];
  // Current altitude error
  float alt_error = 3 [(mav.opts) = { type: "float" }];
  // Current airspeed error
  float aspd_error = 4 [(mav.opts) = { type: "float" }];
  // Current crosstrack error on x-y plane
  float xtrack_error = 5 [(mav.opts) = { type: "float" }];
  // Current desired heading
  int32 nav_bearing = 6 [(mav.opts) = { type: "int16_t" }];
  // Bearing to current waypoint/target
  int32 target_bearing = 7 [(mav.opts) = { type: "int16_t" }];
  // Distance to active waypoint
  uint32 wp_dist = 8 [(mav.opts) = { type: "uint16_t" }];
}

// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
message GLOBAL_POSITION_INT_COV {  // MavLink id: 63
  option (mav.message).id = 63;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude in meters above MSL
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude above ground
  int32 relative_alt = 5 [(mav.opts) = { type: "int32_t" }];
  // Ground X Speed (Latitude)
  float vx = 6 [(mav.opts) = { type: "float" }];
  // Ground Y Speed (Longitude)
  float vy = 7 [(mav.opts) = { type: "float" }];
  // Ground Z Speed (Altitude)
  float vz = 8 [(mav.opts) = { type: "float" }];
  // Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
  repeated float covariance = 9 [(mav.opts) = { type: "float[36]" }];
  // Class id of the estimator this estimate originated from.
  MAV_ESTIMATOR_TYPE estimator_type = 10 [(mav.opts) = { type: "uint8_t", enum: "MAV_ESTIMATOR_TYPE" }];
}

// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
message LOCAL_POSITION_NED_COV {  // MavLink id: 64
  option (mav.message).id = 64;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X Position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position
  float z = 4 [(mav.opts) = { type: "float" }];
  // X Speed
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y Speed
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z Speed
  float vz = 7 [(mav.opts) = { type: "float" }];
  // X Acceleration
  float ax = 8 [(mav.opts) = { type: "float" }];
  // Y Acceleration
  float ay = 9 [(mav.opts) = { type: "float" }];
  // Z Acceleration
  float az = 10 [(mav.opts) = { type: "float" }];
  // Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
  repeated float covariance = 11 [(mav.opts) = { type: "float[45]" }];
  // Class id of the estimator this estimate originated from.
  MAV_ESTIMATOR_TYPE estimator_type = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_ESTIMATOR_TYPE" }];
}

// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
message RC_CHANNELS {  // MavLink id: 65
  option (mav.message).id = 65;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // RC channel 1 value.
  uint32 chan1_raw = 2 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 2 value.
  uint32 chan2_raw = 3 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 3 value.
  uint32 chan3_raw = 4 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 4 value.
  uint32 chan4_raw = 5 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 5 value.
  uint32 chan5_raw = 6 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 6 value.
  uint32 chan6_raw = 7 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 7 value.
  uint32 chan7_raw = 8 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 8 value.
  uint32 chan8_raw = 9 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 9 value.
  uint32 chan9_raw = 10 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 10 value.
  uint32 chan10_raw = 11 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 11 value.
  uint32 chan11_raw = 12 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 12 value.
  uint32 chan12_raw = 13 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 13 value.
  uint32 chan13_raw = 14 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 14 value.
  uint32 chan14_raw = 15 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 15 value.
  uint32 chan15_raw = 16 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 16 value.
  uint32 chan16_raw = 17 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 17 value.
  uint32 chan17_raw = 18 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 18 value.
  uint32 chan18_raw = 19 [(mav.opts) = { type: "uint16_t" }];
  // Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.
  uint32 chancount = 20 [(mav.opts) = { type: "uint8_t" }];
  // Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 rssi = 21 [(mav.opts) = { type: "uint8_t" }];
}

// Request a data stream.
message REQUEST_DATA_STREAM {  // MavLink id: 66
  option (mav.message).id = 66;
  // The requested message rate
  uint32 req_message_rate = 1 [(mav.opts) = { type: "uint16_t" }];
  // The target requested to send the message stream.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // The target requested to send the message stream.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // The ID of the requested data stream
  uint32 req_stream_id = 4 [(mav.opts) = { type: "uint8_t" }];
  // 1 to start sending, 0 to stop sending.
  uint32 start_stop = 5 [(mav.opts) = { type: "uint8_t" }];
}

// Data stream status information.
message DATA_STREAM {  // MavLink id: 67
  option (mav.message).id = 67;
  // The message rate
  uint32 message_rate = 1 [(mav.opts) = { type: "uint16_t" }];
  // The ID of the requested data stream
  uint32 stream_id = 2 [(mav.opts) = { type: "uint8_t" }];
  // 1 stream is enabled, 0 stream is stopped.
  uint32 on_off = 3 [(mav.opts) = { type: "uint8_t" }];
}

// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their
message MANUAL_CONTROL {  // MavLink id: 69
  option (mav.message).id = 69;
  // X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
  int32 x = 1 [(mav.opts) = { type: "int16_t" }];
  // Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
  int32 y = 2 [(mav.opts) = { type: "int16_t" }];
  // Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.
  int32 z = 3 [(mav.opts) = { type: "int16_t" }];
  // R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
  int32 r = 4 [(mav.opts) = { type: "int16_t" }];
  // A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
  uint32 buttons = 5 [(mav.opts) = { type: "uint16_t" }];
  // The system to be controlled.
  uint32 target = 6 [(mav.opts) = { type: "uint8_t" }];
}

// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
message RC_CHANNELS_OVERRIDE {  // MavLink id: 70
  option (mav.message).id = 70;
  // RC channel 1 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan1_raw = 1 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 2 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan2_raw = 2 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 3 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan3_raw = 3 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 4 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan4_raw = 4 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 5 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan5_raw = 5 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 6 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan6_raw = 6 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 7 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan7_raw = 7 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 8 value. A value of UINT16_MAX means to ignore this field.
  uint32 chan8_raw = 8 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 9 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 10 [(mav.opts) = { type: "uint8_t" }];
}

// Message encoding a mission item. This message is emitted to announce
// the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
message MISSION_ITEM_INT {  // MavLink id: 73
  option (mav.message).id = 73;
  // PARAM1, see MAV_CMD enum
  float param1 = 1 [(mav.opts) = { type: "float" }];
  // PARAM2, see MAV_CMD enum
  float param2 = 2 [(mav.opts) = { type: "float" }];
  // PARAM3, see MAV_CMD enum
  float param3 = 3 [(mav.opts) = { type: "float" }];
  // PARAM4, see MAV_CMD enum
  float param4 = 4 [(mav.opts) = { type: "float" }];
  // PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
  int32 x = 5 [(mav.opts) = { type: "int32_t" }];
  // PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
  int32 y = 6 [(mav.opts) = { type: "int32_t" }];
  // PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
  float z = 7 [(mav.opts) = { type: "float" }];
  // Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).
  uint32 seq = 8 [(mav.opts) = { type: "uint16_t" }];
  // The scheduled action for the waypoint.
  MAV_CMD command = 9 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // System ID
  uint32 target_system = 10 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 11 [(mav.opts) = { type: "uint8_t" }];
  // The coordinate system of the waypoint.
  MAV_FRAME frame = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
  // false:0, true:1
  uint32 current = 13 [(mav.opts) = { type: "uint8_t" }];
  // Autocontinue to next waypoint
  uint32 autocontinue = 14 [(mav.opts) = { type: "uint8_t" }];
}

// Metrics typically displayed on a HUD for fixed wing aircraft.
message VFR_HUD {  // MavLink id: 74
  option (mav.message).id = 74;
  // Vehicle speed in form appropriate for vehicle type. For standard aircraft this is typically calibrated airspeed (CAS) or indicated airspeed (IAS) - either of which can be used by a pilot to estimate stall speed.
  float airspeed = 1 [(mav.opts) = { type: "float" }];
  // Current ground speed.
  float groundspeed = 2 [(mav.opts) = { type: "float" }];
  // Current altitude (MSL).
  float alt = 3 [(mav.opts) = { type: "float" }];
  // Current climb rate.
  float climb = 4 [(mav.opts) = { type: "float" }];
  // Current heading in compass units (0-360, 0=north).
  int32 heading = 5 [(mav.opts) = { type: "int16_t" }];
  // Current throttle setting (0 to 100).
  uint32 throttle = 6 [(mav.opts) = { type: "uint16_t" }];
}

// Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value. The command microservice is documented at https://mavlink.io/en/services/command.html
message COMMAND_INT {  // MavLink id: 75
  option (mav.message).id = 75;
  // PARAM1, see MAV_CMD enum
  float param1 = 1 [(mav.opts) = { type: "float" }];
  // PARAM2, see MAV_CMD enum
  float param2 = 2 [(mav.opts) = { type: "float" }];
  // PARAM3, see MAV_CMD enum
  float param3 = 3 [(mav.opts) = { type: "float" }];
  // PARAM4, see MAV_CMD enum
  float param4 = 4 [(mav.opts) = { type: "float" }];
  // PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
  int32 x = 5 [(mav.opts) = { type: "int32_t" }];
  // PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7
  int32 y = 6 [(mav.opts) = { type: "int32_t" }];
  // PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).
  float z = 7 [(mav.opts) = { type: "float" }];
  // The scheduled action for the mission item.
  MAV_CMD command = 8 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // System ID
  uint32 target_system = 9 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 10 [(mav.opts) = { type: "uint8_t" }];
  // The coordinate system of the COMMAND.
  MAV_FRAME frame = 11 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
  // false:0, true:1
  uint32 current = 12 [(mav.opts) = { type: "uint8_t" }];
  // autocontinue to next wp
  uint32 autocontinue = 13 [(mav.opts) = { type: "uint8_t" }];
}

// Send a command with up to seven parameters to the MAV. The command microservice is documented at https://mavlink.io/en/services/command.html
message COMMAND_LONG {  // MavLink id: 76
  option (mav.message).id = 76;
  // Parameter 1 (for the specific command).
  float param1 = 1 [(mav.opts) = { type: "float" }];
  // Parameter 2 (for the specific command).
  float param2 = 2 [(mav.opts) = { type: "float" }];
  // Parameter 3 (for the specific command).
  float param3 = 3 [(mav.opts) = { type: "float" }];
  // Parameter 4 (for the specific command).
  float param4 = 4 [(mav.opts) = { type: "float" }];
  // Parameter 5 (for the specific command).
  float param5 = 5 [(mav.opts) = { type: "float" }];
  // Parameter 6 (for the specific command).
  float param6 = 6 [(mav.opts) = { type: "float" }];
  // Parameter 7 (for the specific command).
  float param7 = 7 [(mav.opts) = { type: "float" }];
  // Command ID (of command to send).
  MAV_CMD command = 8 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // System which should execute the command
  uint32 target_system = 9 [(mav.opts) = { type: "uint8_t" }];
  // Component which should execute the command, 0 for all components
  uint32 target_component = 10 [(mav.opts) = { type: "uint8_t" }];
  // 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
  uint32 confirmation = 11 [(mav.opts) = { type: "uint8_t" }];
}

// Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html
message COMMAND_ACK {  // MavLink id: 77
  option (mav.message).id = 77;
  // Command ID (of acknowledged command).
  MAV_CMD command = 1 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // Result of command.
  MAV_RESULT result = 2 [(mav.opts) = { type: "uint8_t", enum: "MAV_RESULT" }];
}

// Cancel a long running command. The target system should respond with a COMMAND_ACK to the original command with result=MAV_RESULT_CANCELLED if the long running process was cancelled. If it has already completed, the cancel action can be ignored. The cancel action can be retried until some sort of acknowledgement to the original command has been received. The command microservice is documented at https://mavlink.io/en/services/command.html
message COMMAND_CANCEL {  // MavLink id: 80
  option (mav.message).id = 80;
  // Command ID (of command to cancel).
  MAV_CMD command = 1 [(mav.opts) = { type: "uint16_t", enum: "MAV_CMD" }];
  // System executing long running command. Should not be broadcast (0).
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component executing long running command.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Setpoint in roll, pitch, yaw and thrust from the operator
message MANUAL_SETPOINT {  // MavLink id: 81
  option (mav.message).id = 81;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Desired roll rate
  float roll = 2 [(mav.opts) = { type: "float" }];
  // Desired pitch rate
  float pitch = 3 [(mav.opts) = { type: "float" }];
  // Desired yaw rate
  float yaw = 4 [(mav.opts) = { type: "float" }];
  // Collective thrust, normalized to 0 .. 1
  float thrust = 5 [(mav.opts) = { type: "float" }];
  // Flight mode switch position, 0.. 255
  uint32 mode_switch = 6 [(mav.opts) = { type: "uint8_t" }];
  // Override mode switch position, 0.. 255
  uint32 manual_override_switch = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
message SET_ATTITUDE_TARGET {  // MavLink id: 82
  option (mav.message).id = 82;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // Body roll rate
  float body_roll_rate = 3 [(mav.opts) = { type: "float" }];
  // Body pitch rate
  float body_pitch_rate = 4 [(mav.opts) = { type: "float" }];
  // Body yaw rate
  float body_yaw_rate = 5 [(mav.opts) = { type: "float" }];
  // Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
  float thrust = 6 [(mav.opts) = { type: "float" }];
  // System ID
  uint32 target_system = 7 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 8 [(mav.opts) = { type: "uint8_t" }];
  // Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude
  uint32 type_mask = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
message ATTITUDE_TARGET {  // MavLink id: 83
  option (mav.message).id = 83;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // Body roll rate
  float body_roll_rate = 3 [(mav.opts) = { type: "float" }];
  // Body pitch rate
  float body_pitch_rate = 4 [(mav.opts) = { type: "float" }];
  // Body yaw rate
  float body_yaw_rate = 5 [(mav.opts) = { type: "float" }];
  // Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
  float thrust = 6 [(mav.opts) = { type: "float" }];
  // Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude
  uint32 type_mask = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
message SET_POSITION_TARGET_LOCAL_NED {  // MavLink id: 84
  option (mav.message).id = 84;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position in NED frame
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position in NED frame
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position in NED frame (note, altitude is negative in NED)
  float z = 4 [(mav.opts) = { type: "float" }];
  // X velocity in NED frame
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y velocity in NED frame
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z velocity in NED frame
  float vz = 7 [(mav.opts) = { type: "float" }];
  // X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afx = 8 [(mav.opts) = { type: "float" }];
  // Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afy = 9 [(mav.opts) = { type: "float" }];
  // Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afz = 10 [(mav.opts) = { type: "float" }];
  // yaw setpoint
  float yaw = 11 [(mav.opts) = { type: "float" }];
  // yaw rate setpoint
  float yaw_rate = 12 [(mav.opts) = { type: "float" }];
  // Bitmap to indicate which dimensions should be ignored by the vehicle.
  // bitfield defined by enum POSITION_TARGET_TYPEMASK
  uint32 type_mask = 13 [(mav.opts) = { type: "uint16_t", enum: "POSITION_TARGET_TYPEMASK" }];
  // System ID
  uint32 target_system = 14 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 15 [(mav.opts) = { type: "uint8_t" }];
  // Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
  MAV_FRAME coordinate_frame = 16 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
message POSITION_TARGET_LOCAL_NED {  // MavLink id: 85
  option (mav.message).id = 85;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position in NED frame
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position in NED frame
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position in NED frame (note, altitude is negative in NED)
  float z = 4 [(mav.opts) = { type: "float" }];
  // X velocity in NED frame
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y velocity in NED frame
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z velocity in NED frame
  float vz = 7 [(mav.opts) = { type: "float" }];
  // X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afx = 8 [(mav.opts) = { type: "float" }];
  // Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afy = 9 [(mav.opts) = { type: "float" }];
  // Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afz = 10 [(mav.opts) = { type: "float" }];
  // yaw setpoint
  float yaw = 11 [(mav.opts) = { type: "float" }];
  // yaw rate setpoint
  float yaw_rate = 12 [(mav.opts) = { type: "float" }];
  // Bitmap to indicate which dimensions should be ignored by the vehicle.
  // bitfield defined by enum POSITION_TARGET_TYPEMASK
  uint32 type_mask = 13 [(mav.opts) = { type: "uint16_t", enum: "POSITION_TARGET_TYPEMASK" }];
  // Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
  MAV_FRAME coordinate_frame = 14 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
message SET_POSITION_TARGET_GLOBAL_INT {  // MavLink id: 86
  option (mav.message).id = 86;
  // Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position in WGS84 frame
  int32 lat_int = 2 [(mav.opts) = { type: "int32_t" }];
  // Y Position in WGS84 frame
  int32 lon_int = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL, Relative to home, or AGL - depending on frame)
  float alt = 4 [(mav.opts) = { type: "float" }];
  // X velocity in NED frame
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y velocity in NED frame
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z velocity in NED frame
  float vz = 7 [(mav.opts) = { type: "float" }];
  // X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afx = 8 [(mav.opts) = { type: "float" }];
  // Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afy = 9 [(mav.opts) = { type: "float" }];
  // Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afz = 10 [(mav.opts) = { type: "float" }];
  // yaw setpoint
  float yaw = 11 [(mav.opts) = { type: "float" }];
  // yaw rate setpoint
  float yaw_rate = 12 [(mav.opts) = { type: "float" }];
  // Bitmap to indicate which dimensions should be ignored by the vehicle.
  // bitfield defined by enum POSITION_TARGET_TYPEMASK
  uint32 type_mask = 13 [(mav.opts) = { type: "uint16_t", enum: "POSITION_TARGET_TYPEMASK" }];
  // System ID
  uint32 target_system = 14 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 15 [(mav.opts) = { type: "uint8_t" }];
  // Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
  MAV_FRAME coordinate_frame = 16 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
message POSITION_TARGET_GLOBAL_INT {  // MavLink id: 87
  option (mav.message).id = 87;
  // Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position in WGS84 frame
  int32 lat_int = 2 [(mav.opts) = { type: "int32_t" }];
  // Y Position in WGS84 frame
  int32 lon_int = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL, AGL or relative to home altitude, depending on frame)
  float alt = 4 [(mav.opts) = { type: "float" }];
  // X velocity in NED frame
  float vx = 5 [(mav.opts) = { type: "float" }];
  // Y velocity in NED frame
  float vy = 6 [(mav.opts) = { type: "float" }];
  // Z velocity in NED frame
  float vz = 7 [(mav.opts) = { type: "float" }];
  // X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afx = 8 [(mav.opts) = { type: "float" }];
  // Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afy = 9 [(mav.opts) = { type: "float" }];
  // Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
  float afz = 10 [(mav.opts) = { type: "float" }];
  // yaw setpoint
  float yaw = 11 [(mav.opts) = { type: "float" }];
  // yaw rate setpoint
  float yaw_rate = 12 [(mav.opts) = { type: "float" }];
  // Bitmap to indicate which dimensions should be ignored by the vehicle.
  // bitfield defined by enum POSITION_TARGET_TYPEMASK
  uint32 type_mask = 13 [(mav.opts) = { type: "uint16_t", enum: "POSITION_TARGET_TYPEMASK" }];
  // Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
  MAV_FRAME coordinate_frame = 14 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
message LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET {  // MavLink id: 89
  option (mav.message).id = 89;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X Position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position
  float z = 4 [(mav.opts) = { type: "float" }];
  // Roll
  float roll = 5 [(mav.opts) = { type: "float" }];
  // Pitch
  float pitch = 6 [(mav.opts) = { type: "float" }];
  // Yaw
  float yaw = 7 [(mav.opts) = { type: "float" }];
}

// Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
message HIL_STATE {  // MavLink id: 90
  option (mav.message).id = 90;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Roll angle
  float roll = 2 [(mav.opts) = { type: "float" }];
  // Pitch angle
  float pitch = 3 [(mav.opts) = { type: "float" }];
  // Yaw angle
  float yaw = 4 [(mav.opts) = { type: "float" }];
  // Body frame roll / phi angular speed
  float rollspeed = 5 [(mav.opts) = { type: "float" }];
  // Body frame pitch / theta angular speed
  float pitchspeed = 6 [(mav.opts) = { type: "float" }];
  // Body frame yaw / psi angular speed
  float yawspeed = 7 [(mav.opts) = { type: "float" }];
  // Latitude
  int32 lat = 8 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 9 [(mav.opts) = { type: "int32_t" }];
  // Altitude
  int32 alt = 10 [(mav.opts) = { type: "int32_t" }];
  // Ground X Speed (Latitude)
  int32 vx = 11 [(mav.opts) = { type: "int16_t" }];
  // Ground Y Speed (Longitude)
  int32 vy = 12 [(mav.opts) = { type: "int16_t" }];
  // Ground Z Speed (Altitude)
  int32 vz = 13 [(mav.opts) = { type: "int16_t" }];
  // X acceleration
  int32 xacc = 14 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration
  int32 yacc = 15 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration
  int32 zacc = 16 [(mav.opts) = { type: "int16_t" }];
}

// Sent from autopilot to simulation. Hardware in the loop control outputs
message HIL_CONTROLS {  // MavLink id: 91
  option (mav.message).id = 91;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Control output -1 .. 1
  float roll_ailerons = 2 [(mav.opts) = { type: "float" }];
  // Control output -1 .. 1
  float pitch_elevator = 3 [(mav.opts) = { type: "float" }];
  // Control output -1 .. 1
  float yaw_rudder = 4 [(mav.opts) = { type: "float" }];
  // Throttle 0 .. 1
  float throttle = 5 [(mav.opts) = { type: "float" }];
  // Aux 1, -1 .. 1
  float aux1 = 6 [(mav.opts) = { type: "float" }];
  // Aux 2, -1 .. 1
  float aux2 = 7 [(mav.opts) = { type: "float" }];
  // Aux 3, -1 .. 1
  float aux3 = 8 [(mav.opts) = { type: "float" }];
  // Aux 4, -1 .. 1
  float aux4 = 9 [(mav.opts) = { type: "float" }];
  // System mode.
  MAV_MODE mode = 10 [(mav.opts) = { type: "uint8_t", enum: "MAV_MODE" }];
  // Navigation mode (MAV_NAV_MODE)
  uint32 nav_mode = 11 [(mav.opts) = { type: "uint8_t" }];
}

// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
message HIL_RC_INPUTS_RAW {  // MavLink id: 92
  option (mav.message).id = 92;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // RC channel 1 value
  uint32 chan1_raw = 2 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 2 value
  uint32 chan2_raw = 3 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 3 value
  uint32 chan3_raw = 4 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 4 value
  uint32 chan4_raw = 5 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 5 value
  uint32 chan5_raw = 6 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 6 value
  uint32 chan6_raw = 7 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 7 value
  uint32 chan7_raw = 8 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 8 value
  uint32 chan8_raw = 9 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 9 value
  uint32 chan9_raw = 10 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 10 value
  uint32 chan10_raw = 11 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 11 value
  uint32 chan11_raw = 12 [(mav.opts) = { type: "uint16_t" }];
  // RC channel 12 value
  uint32 chan12_raw = 13 [(mav.opts) = { type: "uint16_t" }];
  // Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 rssi = 14 [(mav.opts) = { type: "uint8_t" }];
}

// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
message HIL_ACTUATOR_CONTROLS {  // MavLink id: 93
  option (mav.message).id = 93;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Flags as bitfield, 1: indicate simulation using lockstep.
  uint64 flags = 2 [(mav.opts) = { type: "uint64_t" }];
  // Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.
  repeated float controls = 3 [(mav.opts) = { type: "float[16]" }];
  // System mode. Includes arming state.
  // bitfield defined by enum MAV_MODE_FLAG
  uint32 mode = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_MODE_FLAG" }];
}

// Optical flow from a flow sensor (e.g. optical mouse sensor)
message OPTICAL_FLOW {  // MavLink id: 100
  option (mav.message).id = 100;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Flow in x-sensor direction, angular-speed compensated
  float flow_comp_m_x = 2 [(mav.opts) = { type: "float" }];
  // Flow in y-sensor direction, angular-speed compensated
  float flow_comp_m_y = 3 [(mav.opts) = { type: "float" }];
  // Ground distance. Positive value: distance known. Negative value: Unknown distance
  float ground_distance = 4 [(mav.opts) = { type: "float" }];
  // Flow in x-sensor direction
  int32 flow_x = 5 [(mav.opts) = { type: "int16_t" }];
  // Flow in y-sensor direction
  int32 flow_y = 6 [(mav.opts) = { type: "int16_t" }];
  // Sensor ID
  uint32 sensor_id = 7 [(mav.opts) = { type: "uint8_t" }];
  // Optical flow quality / confidence. 0: bad, 255: maximum quality
  uint32 quality = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Global position/attitude estimate from a vision source.
message GLOBAL_VISION_POSITION_ESTIMATE {  // MavLink id: 101
  option (mav.message).id = 101;
  // Timestamp (UNIX time or since system boot)
  uint64 usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Global X position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Global Y position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Global Z position
  float z = 4 [(mav.opts) = { type: "float" }];
  // Roll angle
  float roll = 5 [(mav.opts) = { type: "float" }];
  // Pitch angle
  float pitch = 6 [(mav.opts) = { type: "float" }];
  // Yaw angle
  float yaw = 7 [(mav.opts) = { type: "float" }];
}

// Local position/attitude estimate from a vision source.
message VISION_POSITION_ESTIMATE {  // MavLink id: 102
  option (mav.message).id = 102;
  // Timestamp (UNIX time or time since system boot)
  uint64 usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Local X position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Local Y position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Local Z position
  float z = 4 [(mav.opts) = { type: "float" }];
  // Roll angle
  float roll = 5 [(mav.opts) = { type: "float" }];
  // Pitch angle
  float pitch = 6 [(mav.opts) = { type: "float" }];
  // Yaw angle
  float yaw = 7 [(mav.opts) = { type: "float" }];
}

// Speed estimate from a vision source.
message VISION_SPEED_ESTIMATE {  // MavLink id: 103
  option (mav.message).id = 103;
  // Timestamp (UNIX time or time since system boot)
  uint64 usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Global X speed
  float x = 2 [(mav.opts) = { type: "float" }];
  // Global Y speed
  float y = 3 [(mav.opts) = { type: "float" }];
  // Global Z speed
  float z = 4 [(mav.opts) = { type: "float" }];
}

// Global position estimate from a Vicon motion system source.
message VICON_POSITION_ESTIMATE {  // MavLink id: 104
  option (mav.message).id = 104;
  // Timestamp (UNIX time or time since system boot)
  uint64 usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Global X position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Global Y position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Global Z position
  float z = 4 [(mav.opts) = { type: "float" }];
  // Roll angle
  float roll = 5 [(mav.opts) = { type: "float" }];
  // Pitch angle
  float pitch = 6 [(mav.opts) = { type: "float" }];
  // Yaw angle
  float yaw = 7 [(mav.opts) = { type: "float" }];
}

// The IMU readings in SI units in NED body frame
message HIGHRES_IMU {  // MavLink id: 105
  option (mav.message).id = 105;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X acceleration
  float xacc = 2 [(mav.opts) = { type: "float" }];
  // Y acceleration
  float yacc = 3 [(mav.opts) = { type: "float" }];
  // Z acceleration
  float zacc = 4 [(mav.opts) = { type: "float" }];
  // Angular speed around X axis
  float xgyro = 5 [(mav.opts) = { type: "float" }];
  // Angular speed around Y axis
  float ygyro = 6 [(mav.opts) = { type: "float" }];
  // Angular speed around Z axis
  float zgyro = 7 [(mav.opts) = { type: "float" }];
  // X Magnetic field
  float xmag = 8 [(mav.opts) = { type: "float" }];
  // Y Magnetic field
  float ymag = 9 [(mav.opts) = { type: "float" }];
  // Z Magnetic field
  float zmag = 10 [(mav.opts) = { type: "float" }];
  // Absolute pressure
  float abs_pressure = 11 [(mav.opts) = { type: "float" }];
  // Differential pressure
  float diff_pressure = 12 [(mav.opts) = { type: "float" }];
  // Altitude calculated from pressure
  float pressure_alt = 13 [(mav.opts) = { type: "float" }];
  // Temperature
  float temperature = 14 [(mav.opts) = { type: "float" }];
  // Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
  uint32 fields_updated = 15 [(mav.opts) = { type: "uint16_t" }];
}

// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
message OPTICAL_FLOW_RAD {  // MavLink id: 106
  option (mav.message).id = 106;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
  uint32 integration_time_us = 2 [(mav.opts) = { type: "uint32_t" }];
  // Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
  float integrated_x = 3 [(mav.opts) = { type: "float" }];
  // Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
  float integrated_y = 4 [(mav.opts) = { type: "float" }];
  // RH rotation around X axis
  float integrated_xgyro = 5 [(mav.opts) = { type: "float" }];
  // RH rotation around Y axis
  float integrated_ygyro = 6 [(mav.opts) = { type: "float" }];
  // RH rotation around Z axis
  float integrated_zgyro = 7 [(mav.opts) = { type: "float" }];
  // Time since the distance was sampled.
  uint32 time_delta_distance_us = 8 [(mav.opts) = { type: "uint32_t" }];
  // Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
  float distance = 9 [(mav.opts) = { type: "float" }];
  // Temperature
  int32 temperature = 10 [(mav.opts) = { type: "int16_t" }];
  // Sensor ID
  uint32 sensor_id = 11 [(mav.opts) = { type: "uint8_t" }];
  // Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
  uint32 quality = 12 [(mav.opts) = { type: "uint8_t" }];
}

// The IMU readings in SI units in NED body frame
message HIL_SENSOR {  // MavLink id: 107
  option (mav.message).id = 107;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X acceleration
  float xacc = 2 [(mav.opts) = { type: "float" }];
  // Y acceleration
  float yacc = 3 [(mav.opts) = { type: "float" }];
  // Z acceleration
  float zacc = 4 [(mav.opts) = { type: "float" }];
  // Angular speed around X axis in body frame
  float xgyro = 5 [(mav.opts) = { type: "float" }];
  // Angular speed around Y axis in body frame
  float ygyro = 6 [(mav.opts) = { type: "float" }];
  // Angular speed around Z axis in body frame
  float zgyro = 7 [(mav.opts) = { type: "float" }];
  // X Magnetic field
  float xmag = 8 [(mav.opts) = { type: "float" }];
  // Y Magnetic field
  float ymag = 9 [(mav.opts) = { type: "float" }];
  // Z Magnetic field
  float zmag = 10 [(mav.opts) = { type: "float" }];
  // Absolute pressure
  float abs_pressure = 11 [(mav.opts) = { type: "float" }];
  // Differential pressure (airspeed)
  float diff_pressure = 12 [(mav.opts) = { type: "float" }];
  // Altitude calculated from pressure
  float pressure_alt = 13 [(mav.opts) = { type: "float" }];
  // Temperature
  float temperature = 14 [(mav.opts) = { type: "float" }];
  // Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim.
  uint32 fields_updated = 15 [(mav.opts) = { type: "uint32_t" }];
}

// Status of simulation environment, if used
message SIM_STATE {  // MavLink id: 108
  option (mav.message).id = 108;
  // True attitude quaternion component 1, w (1 in null-rotation)
  float q1 = 1 [(mav.opts) = { type: "float" }];
  // True attitude quaternion component 2, x (0 in null-rotation)
  float q2 = 2 [(mav.opts) = { type: "float" }];
  // True attitude quaternion component 3, y (0 in null-rotation)
  float q3 = 3 [(mav.opts) = { type: "float" }];
  // True attitude quaternion component 4, z (0 in null-rotation)
  float q4 = 4 [(mav.opts) = { type: "float" }];
  // Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
  float roll = 5 [(mav.opts) = { type: "float" }];
  // Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
  float pitch = 6 [(mav.opts) = { type: "float" }];
  // Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
  float yaw = 7 [(mav.opts) = { type: "float" }];
  // X acceleration
  float xacc = 8 [(mav.opts) = { type: "float" }];
  // Y acceleration
  float yacc = 9 [(mav.opts) = { type: "float" }];
  // Z acceleration
  float zacc = 10 [(mav.opts) = { type: "float" }];
  // Angular speed around X axis
  float xgyro = 11 [(mav.opts) = { type: "float" }];
  // Angular speed around Y axis
  float ygyro = 12 [(mav.opts) = { type: "float" }];
  // Angular speed around Z axis
  float zgyro = 13 [(mav.opts) = { type: "float" }];
  // Latitude
  float lat = 14 [(mav.opts) = { type: "float" }];
  // Longitude
  float lon = 15 [(mav.opts) = { type: "float" }];
  // Altitude
  float alt = 16 [(mav.opts) = { type: "float" }];
  // Horizontal position standard deviation
  float std_dev_horz = 17 [(mav.opts) = { type: "float" }];
  // Vertical position standard deviation
  float std_dev_vert = 18 [(mav.opts) = { type: "float" }];
  // True velocity in north direction in earth-fixed NED frame
  float vn = 19 [(mav.opts) = { type: "float" }];
  // True velocity in east direction in earth-fixed NED frame
  float ve = 20 [(mav.opts) = { type: "float" }];
  // True velocity in down direction in earth-fixed NED frame
  float vd = 21 [(mav.opts) = { type: "float" }];
}

// Status generated by radio and injected into MAVLink stream.
message RADIO_STATUS {  // MavLink id: 109
  option (mav.message).id = 109;
  // Count of radio packet receive errors (since boot).
  uint32 rxerrors = 1 [(mav.opts) = { type: "uint16_t" }];
  // Count of error corrected radio packets (since boot).
  uint32 fixed = 2 [(mav.opts) = { type: "uint16_t" }];
  // Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 rssi = 3 [(mav.opts) = { type: "uint8_t" }];
  // Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
  uint32 remrssi = 4 [(mav.opts) = { type: "uint8_t" }];
  // Remaining free transmitter buffer space.
  uint32 txbuf = 5 [(mav.opts) = { type: "uint8_t" }];
  // Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.
  uint32 noise = 6 [(mav.opts) = { type: "uint8_t" }];
  // Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.
  uint32 remnoise = 7 [(mav.opts) = { type: "uint8_t" }];
}

// File transfer message
message FILE_TRANSFER_PROTOCOL {  // MavLink id: 110
  option (mav.message).id = 110;
  // Network ID (0 for broadcast)
  uint32 target_network = 1 [(mav.opts) = { type: "uint8_t" }];
  // System ID (0 for broadcast)
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast)
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
  repeated uint32 payload = 4 [(mav.opts) = { type: "uint8_t[251]" }];
}

// Time synchronization message.
message TIMESYNC {  // MavLink id: 111
  option (mav.message).id = 111;
  // Time sync timestamp 1
  int64 tc1 = 1 [(mav.opts) = { type: "int64_t" }];
  // Time sync timestamp 2
  int64 ts1 = 2 [(mav.opts) = { type: "int64_t" }];
}

// Camera-IMU triggering and synchronisation message.
message CAMERA_TRIGGER {  // MavLink id: 112
  option (mav.message).id = 112;
  // Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Image frame sequence
  uint32 seq = 2 [(mav.opts) = { type: "uint32_t" }];
}

// The global position, as returned by the Global Positioning System (GPS). This is
// NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
message HIL_GPS {  // MavLink id: 113
  option (mav.message).id = 113;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude (WGS84)
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // GPS HDOP horizontal dilution of position. If unknown, set to: 65535
  uint32 eph = 5 [(mav.opts) = { type: "uint16_t" }];
  // GPS VDOP vertical dilution of position. If unknown, set to: 65535
  uint32 epv = 6 [(mav.opts) = { type: "uint16_t" }];
  // GPS ground speed. If unknown, set to: 65535
  uint32 vel = 7 [(mav.opts) = { type: "uint16_t" }];
  // GPS velocity in north direction in earth-fixed NED frame
  int32 vn = 8 [(mav.opts) = { type: "int16_t" }];
  // GPS velocity in east direction in earth-fixed NED frame
  int32 ve = 9 [(mav.opts) = { type: "int16_t" }];
  // GPS velocity in down direction in earth-fixed NED frame
  int32 vd = 10 [(mav.opts) = { type: "int16_t" }];
  // Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535
  uint32 cog = 11 [(mav.opts) = { type: "uint16_t" }];
  // 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
  uint32 fix_type = 12 [(mav.opts) = { type: "uint8_t" }];
  // Number of satellites visible. If unknown, set to 255
  uint32 satellites_visible = 13 [(mav.opts) = { type: "uint8_t" }];
}

// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
message HIL_OPTICAL_FLOW {  // MavLink id: 114
  option (mav.message).id = 114;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
  uint32 integration_time_us = 2 [(mav.opts) = { type: "uint32_t" }];
  // Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
  float integrated_x = 3 [(mav.opts) = { type: "float" }];
  // Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
  float integrated_y = 4 [(mav.opts) = { type: "float" }];
  // RH rotation around X axis
  float integrated_xgyro = 5 [(mav.opts) = { type: "float" }];
  // RH rotation around Y axis
  float integrated_ygyro = 6 [(mav.opts) = { type: "float" }];
  // RH rotation around Z axis
  float integrated_zgyro = 7 [(mav.opts) = { type: "float" }];
  // Time since the distance was sampled.
  uint32 time_delta_distance_us = 8 [(mav.opts) = { type: "uint32_t" }];
  // Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
  float distance = 9 [(mav.opts) = { type: "float" }];
  // Temperature
  int32 temperature = 10 [(mav.opts) = { type: "int16_t" }];
  // Sensor ID
  uint32 sensor_id = 11 [(mav.opts) = { type: "uint8_t" }];
  // Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
  uint32 quality = 12 [(mav.opts) = { type: "uint8_t" }];
}

// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
message HIL_STATE_QUATERNION {  // MavLink id: 115
  option (mav.message).id = 115;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)
  repeated float attitude_quaternion = 2 [(mav.opts) = { type: "float[4]" }];
  // Body frame roll / phi angular speed
  float rollspeed = 3 [(mav.opts) = { type: "float" }];
  // Body frame pitch / theta angular speed
  float pitchspeed = 4 [(mav.opts) = { type: "float" }];
  // Body frame yaw / psi angular speed
  float yawspeed = 5 [(mav.opts) = { type: "float" }];
  // Latitude
  int32 lat = 6 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 7 [(mav.opts) = { type: "int32_t" }];
  // Altitude
  int32 alt = 8 [(mav.opts) = { type: "int32_t" }];
  // Ground X Speed (Latitude)
  int32 vx = 9 [(mav.opts) = { type: "int16_t" }];
  // Ground Y Speed (Longitude)
  int32 vy = 10 [(mav.opts) = { type: "int16_t" }];
  // Ground Z Speed (Altitude)
  int32 vz = 11 [(mav.opts) = { type: "int16_t" }];
  // Indicated airspeed
  uint32 ind_airspeed = 12 [(mav.opts) = { type: "uint16_t" }];
  // True airspeed
  uint32 true_airspeed = 13 [(mav.opts) = { type: "uint16_t" }];
  // X acceleration
  int32 xacc = 14 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration
  int32 yacc = 15 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration
  int32 zacc = 16 [(mav.opts) = { type: "int16_t" }];
}

// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
message SCALED_IMU2 {  // MavLink id: 116
  option (mav.message).id = 116;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X acceleration
  int32 xacc = 2 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration
  int32 yacc = 3 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration
  int32 zacc = 4 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around X axis
  int32 xgyro = 5 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Y axis
  int32 ygyro = 6 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Z axis
  int32 zgyro = 7 [(mav.opts) = { type: "int16_t" }];
  // X Magnetic field
  int32 xmag = 8 [(mav.opts) = { type: "int16_t" }];
  // Y Magnetic field
  int32 ymag = 9 [(mav.opts) = { type: "int16_t" }];
  // Z Magnetic field
  int32 zmag = 10 [(mav.opts) = { type: "int16_t" }];
}

// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called. If there are no log files available this request shall be answered with one LOG_ENTRY message with id = 0 and num_logs = 0.
message LOG_REQUEST_LIST {  // MavLink id: 117
  option (mav.message).id = 117;
  // First log id (0 for first available)
  uint32 start = 1 [(mav.opts) = { type: "uint16_t" }];
  // Last log id (0xffff for last available)
  uint32 end = 2 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
}

// Reply to LOG_REQUEST_LIST
message LOG_ENTRY {  // MavLink id: 118
  option (mav.message).id = 118;
  // UTC timestamp of log since 1970, or 0 if not available
  uint32 time_utc = 1 [(mav.opts) = { type: "uint32_t" }];
  // Size of the log (may be approximate)
  uint32 size = 2 [(mav.opts) = { type: "uint32_t" }];
  // Log id
  uint32 id = 3 [(mav.opts) = { type: "uint16_t" }];
  // Total number of logs
  uint32 num_logs = 4 [(mav.opts) = { type: "uint16_t" }];
  // High log number
  uint32 last_log_num = 5 [(mav.opts) = { type: "uint16_t" }];
}

// Request a chunk of a log
message LOG_REQUEST_DATA {  // MavLink id: 119
  option (mav.message).id = 119;
  // Offset into the log
  uint32 ofs = 1 [(mav.opts) = { type: "uint32_t" }];
  // Number of bytes
  uint32 count = 2 [(mav.opts) = { type: "uint32_t" }];
  // Log id (from LOG_ENTRY reply)
  uint32 id = 3 [(mav.opts) = { type: "uint16_t" }];
  // System ID
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// Reply to LOG_REQUEST_DATA
message LOG_DATA {  // MavLink id: 120
  option (mav.message).id = 120;
  // Offset into the log
  uint32 ofs = 1 [(mav.opts) = { type: "uint32_t" }];
  // Log id (from LOG_ENTRY reply)
  uint32 id = 2 [(mav.opts) = { type: "uint16_t" }];
  // Number of bytes (zero for end of log)
  uint32 count = 3 [(mav.opts) = { type: "uint8_t" }];
  // log data
  repeated uint32 data = 4 [(mav.opts) = { type: "uint8_t[90]" }];
}

// Erase all logs
message LOG_ERASE {  // MavLink id: 121
  option (mav.message).id = 121;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Stop log transfer and resume normal logging
message LOG_REQUEST_END {  // MavLink id: 122
  option (mav.message).id = 122;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Data for injecting into the onboard GPS (used for DGPS)
message GPS_INJECT_DATA {  // MavLink id: 123
  option (mav.message).id = 123;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Data length
  uint32 len = 3 [(mav.opts) = { type: "uint8_t" }];
  // Raw data (110 is enough for 12 satellites of RTCMv2)
  repeated uint32 data = 4 [(mav.opts) = { type: "uint8_t[110]" }];
}

// Second GPS data.
message GPS2_RAW {  // MavLink id: 124
  option (mav.message).id = 124;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude (WGS84)
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // Age of DGPS info
  uint32 dgps_age = 5 [(mav.opts) = { type: "uint32_t" }];
  // GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX
  uint32 eph = 6 [(mav.opts) = { type: "uint16_t" }];
  // GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX
  uint32 epv = 7 [(mav.opts) = { type: "uint16_t" }];
  // GPS ground speed. If unknown, set to: UINT16_MAX
  uint32 vel = 8 [(mav.opts) = { type: "uint16_t" }];
  // Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
  uint32 cog = 9 [(mav.opts) = { type: "uint16_t" }];
  // GPS fix type.
  GPS_FIX_TYPE fix_type = 10 [(mav.opts) = { type: "uint8_t", enum: "GPS_FIX_TYPE" }];
  // Number of satellites visible. If unknown, set to 255
  uint32 satellites_visible = 11 [(mav.opts) = { type: "uint8_t" }];
  // Number of DGPS satellites
  uint32 dgps_numch = 12 [(mav.opts) = { type: "uint8_t" }];
}

// Power supply status
message POWER_STATUS {  // MavLink id: 125
  option (mav.message).id = 125;
  // 5V rail voltage.
  uint32 Vcc = 1 [(mav.opts) = { type: "uint16_t" }];
  // Servo rail voltage.
  uint32 Vservo = 2 [(mav.opts) = { type: "uint16_t" }];
  // Bitmap of power supply status flags.
  // bitfield defined by enum MAV_POWER_STATUS
  uint32 flags = 3 [(mav.opts) = { type: "uint16_t", enum: "MAV_POWER_STATUS" }];
}

// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
message SERIAL_CONTROL {  // MavLink id: 126
  option (mav.message).id = 126;
  // Baudrate of transfer. Zero means no change.
  uint32 baudrate = 1 [(mav.opts) = { type: "uint32_t" }];
  // Timeout for reply data
  uint32 timeout = 2 [(mav.opts) = { type: "uint16_t" }];
  // Serial control device type.
  SERIAL_CONTROL_DEV device = 3 [(mav.opts) = { type: "uint8_t", enum: "SERIAL_CONTROL_DEV" }];
  // Bitmap of serial control flags.
  // bitfield defined by enum SERIAL_CONTROL_FLAG
  uint32 flags = 4 [(mav.opts) = { type: "uint8_t", enum: "SERIAL_CONTROL_FLAG" }];
  // how many bytes in this transfer
  uint32 count = 5 [(mav.opts) = { type: "uint8_t" }];
  // serial data
  repeated uint32 data = 6 [(mav.opts) = { type: "uint8_t[70]" }];
}

// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
message GPS_RTK {  // MavLink id: 127
  option (mav.message).id = 127;
  // Time since boot of last baseline message received.
  uint32 time_last_baseline_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // GPS Time of Week of last baseline
  uint32 tow = 2 [(mav.opts) = { type: "uint32_t" }];
  // Current baseline in ECEF x or NED north component.
  int32 baseline_a_mm = 3 [(mav.opts) = { type: "int32_t" }];
  // Current baseline in ECEF y or NED east component.
  int32 baseline_b_mm = 4 [(mav.opts) = { type: "int32_t" }];
  // Current baseline in ECEF z or NED down component.
  int32 baseline_c_mm = 5 [(mav.opts) = { type: "int32_t" }];
  // Current estimate of baseline accuracy.
  uint32 accuracy = 6 [(mav.opts) = { type: "uint32_t" }];
  // Current number of integer ambiguity hypotheses.
  int32 iar_num_hypotheses = 7 [(mav.opts) = { type: "int32_t" }];
  // GPS Week Number of last baseline
  uint32 wn = 8 [(mav.opts) = { type: "uint16_t" }];
  // Identification of connected RTK receiver.
  uint32 rtk_receiver_id = 9 [(mav.opts) = { type: "uint8_t" }];
  // GPS-specific health report for RTK data.
  uint32 rtk_health = 10 [(mav.opts) = { type: "uint8_t" }];
  // Rate of baseline messages being received by GPS
  uint32 rtk_rate = 11 [(mav.opts) = { type: "uint8_t" }];
  // Current number of sats used for RTK calculation.
  uint32 nsats = 12 [(mav.opts) = { type: "uint8_t" }];
  // Coordinate system of baseline
  RTK_BASELINE_COORDINATE_SYSTEM baseline_coords_type = 13 [(mav.opts) = { type: "uint8_t", enum: "RTK_BASELINE_COORDINATE_SYSTEM" }];
}

// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
message GPS2_RTK {  // MavLink id: 128
  option (mav.message).id = 128;
  // Time since boot of last baseline message received.
  uint32 time_last_baseline_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // GPS Time of Week of last baseline
  uint32 tow = 2 [(mav.opts) = { type: "uint32_t" }];
  // Current baseline in ECEF x or NED north component.
  int32 baseline_a_mm = 3 [(mav.opts) = { type: "int32_t" }];
  // Current baseline in ECEF y or NED east component.
  int32 baseline_b_mm = 4 [(mav.opts) = { type: "int32_t" }];
  // Current baseline in ECEF z or NED down component.
  int32 baseline_c_mm = 5 [(mav.opts) = { type: "int32_t" }];
  // Current estimate of baseline accuracy.
  uint32 accuracy = 6 [(mav.opts) = { type: "uint32_t" }];
  // Current number of integer ambiguity hypotheses.
  int32 iar_num_hypotheses = 7 [(mav.opts) = { type: "int32_t" }];
  // GPS Week Number of last baseline
  uint32 wn = 8 [(mav.opts) = { type: "uint16_t" }];
  // Identification of connected RTK receiver.
  uint32 rtk_receiver_id = 9 [(mav.opts) = { type: "uint8_t" }];
  // GPS-specific health report for RTK data.
  uint32 rtk_health = 10 [(mav.opts) = { type: "uint8_t" }];
  // Rate of baseline messages being received by GPS
  uint32 rtk_rate = 11 [(mav.opts) = { type: "uint8_t" }];
  // Current number of sats used for RTK calculation.
  uint32 nsats = 12 [(mav.opts) = { type: "uint8_t" }];
  // Coordinate system of baseline
  RTK_BASELINE_COORDINATE_SYSTEM baseline_coords_type = 13 [(mav.opts) = { type: "uint8_t", enum: "RTK_BASELINE_COORDINATE_SYSTEM" }];
}

// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
message SCALED_IMU3 {  // MavLink id: 129
  option (mav.message).id = 129;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // X acceleration
  int32 xacc = 2 [(mav.opts) = { type: "int16_t" }];
  // Y acceleration
  int32 yacc = 3 [(mav.opts) = { type: "int16_t" }];
  // Z acceleration
  int32 zacc = 4 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around X axis
  int32 xgyro = 5 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Y axis
  int32 ygyro = 6 [(mav.opts) = { type: "int16_t" }];
  // Angular speed around Z axis
  int32 zgyro = 7 [(mav.opts) = { type: "int16_t" }];
  // X Magnetic field
  int32 xmag = 8 [(mav.opts) = { type: "int16_t" }];
  // Y Magnetic field
  int32 ymag = 9 [(mav.opts) = { type: "int16_t" }];
  // Z Magnetic field
  int32 zmag = 10 [(mav.opts) = { type: "int16_t" }];
}

// Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
message DATA_TRANSMISSION_HANDSHAKE {  // MavLink id: 130
  option (mav.message).id = 130;
  // total data size (set on ACK only).
  uint32 size = 1 [(mav.opts) = { type: "uint32_t" }];
  // Width of a matrix or image.
  uint32 width = 2 [(mav.opts) = { type: "uint16_t" }];
  // Height of a matrix or image.
  uint32 height = 3 [(mav.opts) = { type: "uint16_t" }];
  // Number of packets being sent (set on ACK only).
  uint32 packets = 4 [(mav.opts) = { type: "uint16_t" }];
  // Type of requested/acknowledged data.
  MAVLINK_DATA_STREAM_TYPE type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAVLINK_DATA_STREAM_TYPE" }];
  // Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).
  uint32 payload = 6 [(mav.opts) = { type: "uint8_t" }];
  // JPEG quality. Values: [1-100].
  uint32 jpg_quality = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
message ENCAPSULATED_DATA {  // MavLink id: 131
  option (mav.message).id = 131;
  // sequence number (starting with 0 on every transmission)
  uint32 seqnr = 1 [(mav.opts) = { type: "uint16_t" }];
  // image data bytes
  repeated uint32 data = 2 [(mav.opts) = { type: "uint8_t[253]" }];
}

// Distance sensor information for an onboard rangefinder.
message DISTANCE_SENSOR {  // MavLink id: 132
  option (mav.message).id = 132;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Minimum distance the sensor can measure
  uint32 min_distance = 2 [(mav.opts) = { type: "uint16_t" }];
  // Maximum distance the sensor can measure
  uint32 max_distance = 3 [(mav.opts) = { type: "uint16_t" }];
  // Current distance reading
  uint32 current_distance = 4 [(mav.opts) = { type: "uint16_t" }];
  // Type of distance sensor.
  MAV_DISTANCE_SENSOR type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_DISTANCE_SENSOR" }];
  // Onboard ID of the sensor
  uint32 id = 6 [(mav.opts) = { type: "uint8_t" }];
  // Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270
  MAV_SENSOR_ORIENTATION orientation = 7 [(mav.opts) = { type: "uint8_t", enum: "MAV_SENSOR_ORIENTATION" }];
  // Measurement variance. Max standard deviation is 6cm. 255 if unknown.
  uint32 covariance = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Request for terrain data and terrain status
message TERRAIN_REQUEST {  // MavLink id: 133
  option (mav.message).id = 133;
  // Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
  uint64 mask = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude of SW corner of first grid
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude of SW corner of first grid
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Grid spacing
  uint32 grid_spacing = 4 [(mav.opts) = { type: "uint16_t" }];
}

// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST
message TERRAIN_DATA {  // MavLink id: 134
  option (mav.message).id = 134;
  // Latitude of SW corner of first grid
  int32 lat = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude of SW corner of first grid
  int32 lon = 2 [(mav.opts) = { type: "int32_t" }];
  // Grid spacing
  uint32 grid_spacing = 3 [(mav.opts) = { type: "uint16_t" }];
  // Terrain data MSL
  repeated int32 data = 4 [(mav.opts) = { type: "int16_t[16]" }];
  // bit within the terrain request mask
  uint32 gridbit = 5 [(mav.opts) = { type: "uint8_t" }];
}

// Request that the vehicle report terrain height at the given location. Used by GCS to check if vehicle has all terrain data needed for a mission.
message TERRAIN_CHECK {  // MavLink id: 135
  option (mav.message).id = 135;
  // Latitude
  int32 lat = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 2 [(mav.opts) = { type: "int32_t" }];
}

// Response from a TERRAIN_CHECK request
message TERRAIN_REPORT {  // MavLink id: 136
  option (mav.message).id = 136;
  // Latitude
  int32 lat = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 2 [(mav.opts) = { type: "int32_t" }];
  // Terrain height MSL
  float terrain_height = 3 [(mav.opts) = { type: "float" }];
  // Current vehicle height above lat/lon terrain height
  float current_height = 4 [(mav.opts) = { type: "float" }];
  // grid spacing (zero if terrain at this location unavailable)
  uint32 spacing = 5 [(mav.opts) = { type: "uint16_t" }];
  // Number of 4x4 terrain blocks waiting to be received or read from disk
  uint32 pending = 6 [(mav.opts) = { type: "uint16_t" }];
  // Number of 4x4 terrain blocks in memory
  uint32 loaded = 7 [(mav.opts) = { type: "uint16_t" }];
}

// Barometer readings for 2nd barometer
message SCALED_PRESSURE2 {  // MavLink id: 137
  option (mav.message).id = 137;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Absolute pressure
  float press_abs = 2 [(mav.opts) = { type: "float" }];
  // Differential pressure
  float press_diff = 3 [(mav.opts) = { type: "float" }];
  // Temperature measurement
  int32 temperature = 4 [(mav.opts) = { type: "int16_t" }];
}

// Motion capture attitude and position
message ATT_POS_MOCAP {  // MavLink id: 138
  option (mav.message).id = 138;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // X position (NED)
  float x = 3 [(mav.opts) = { type: "float" }];
  // Y position (NED)
  float y = 4 [(mav.opts) = { type: "float" }];
  // Z position (NED)
  float z = 5 [(mav.opts) = { type: "float" }];
}

// Set the vehicle attitude and body angular rates.
message SET_ACTUATOR_CONTROL_TARGET {  // MavLink id: 139
  option (mav.message).id = 139;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
  repeated float controls = 2 [(mav.opts) = { type: "float[8]" }];
  // Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
  uint32 group_mlx = 3 [(mav.opts) = { type: "uint8_t" }];
  // System ID
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// Set the vehicle attitude and body angular rates.
message ACTUATOR_CONTROL_TARGET {  // MavLink id: 140
  option (mav.message).id = 140;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
  repeated float controls = 2 [(mav.opts) = { type: "float[8]" }];
  // Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
  uint32 group_mlx = 3 [(mav.opts) = { type: "uint8_t" }];
}

// The current system altitude.
message ALTITUDE {  // MavLink id: 141
  option (mav.message).id = 141;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
  float altitude_monotonic = 2 [(mav.opts) = { type: "float" }];
  // This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.
  float altitude_amsl = 3 [(mav.opts) = { type: "float" }];
  // This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
  float altitude_local = 4 [(mav.opts) = { type: "float" }];
  // This is the altitude above the home position. It resets on each change of the current home position.
  float altitude_relative = 5 [(mav.opts) = { type: "float" }];
  // This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
  float altitude_terrain = 6 [(mav.opts) = { type: "float" }];
  // This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
  float bottom_clearance = 7 [(mav.opts) = { type: "float" }];
}

// The autopilot is requesting a resource (file, binary, other type of data)
message RESOURCE_REQUEST {  // MavLink id: 142
  option (mav.message).id = 142;
  // Request ID. This ID should be re-used when sending back URI contents
  uint32 request_id = 1 [(mav.opts) = { type: "uint8_t" }];
  // The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
  uint32 uri_type = 2 [(mav.opts) = { type: "uint8_t" }];
  // The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
  repeated uint32 uri = 3 [(mav.opts) = { type: "uint8_t[120]" }];
  // The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
  uint32 transfer_type = 4 [(mav.opts) = { type: "uint8_t" }];
  // The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
  repeated uint32 storage = 5 [(mav.opts) = { type: "uint8_t[120]" }];
}

// Barometer readings for 3rd barometer
message SCALED_PRESSURE3 {  // MavLink id: 143
  option (mav.message).id = 143;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Absolute pressure
  float press_abs = 2 [(mav.opts) = { type: "float" }];
  // Differential pressure
  float press_diff = 3 [(mav.opts) = { type: "float" }];
  // Temperature measurement
  int32 temperature = 4 [(mav.opts) = { type: "int16_t" }];
}

// Current motion information from a designated system
message FOLLOW_TARGET {  // MavLink id: 144
  option (mav.message).id = 144;
  // Timestamp (time since system boot).
  uint64 timestamp = 1 [(mav.opts) = { type: "uint64_t" }];
  // button states or switches of a tracker device
  uint64 custom_state = 2 [(mav.opts) = { type: "uint64_t" }];
  // Latitude (WGS84)
  int32 lat = 3 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 lon = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL)
  float alt = 5 [(mav.opts) = { type: "float" }];
  // target velocity (0,0,0) for unknown
  repeated float vel = 6 [(mav.opts) = { type: "float[3]" }];
  // linear target acceleration (0,0,0) for unknown
  repeated float acc = 7 [(mav.opts) = { type: "float[3]" }];
  // (1 0 0 0 for unknown)
  repeated float attitude_q = 8 [(mav.opts) = { type: "float[4]" }];
  // (0 0 0 for unknown)
  repeated float rates = 9 [(mav.opts) = { type: "float[3]" }];
  // eph epv
  repeated float position_cov = 10 [(mav.opts) = { type: "float[3]" }];
  // bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
  uint32 est_capabilities = 11 [(mav.opts) = { type: "uint8_t" }];
}

// The smoothed, monotonic system state used to feed the control loops of the system.
message CONTROL_SYSTEM_STATE {  // MavLink id: 146
  option (mav.message).id = 146;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X acceleration in body frame
  float x_acc = 2 [(mav.opts) = { type: "float" }];
  // Y acceleration in body frame
  float y_acc = 3 [(mav.opts) = { type: "float" }];
  // Z acceleration in body frame
  float z_acc = 4 [(mav.opts) = { type: "float" }];
  // X velocity in body frame
  float x_vel = 5 [(mav.opts) = { type: "float" }];
  // Y velocity in body frame
  float y_vel = 6 [(mav.opts) = { type: "float" }];
  // Z velocity in body frame
  float z_vel = 7 [(mav.opts) = { type: "float" }];
  // X position in local frame
  float x_pos = 8 [(mav.opts) = { type: "float" }];
  // Y position in local frame
  float y_pos = 9 [(mav.opts) = { type: "float" }];
  // Z position in local frame
  float z_pos = 10 [(mav.opts) = { type: "float" }];
  // Airspeed, set to -1 if unknown
  float airspeed = 11 [(mav.opts) = { type: "float" }];
  // Variance of body velocity estimate
  repeated float vel_variance = 12 [(mav.opts) = { type: "float[3]" }];
  // Variance in local position
  repeated float pos_variance = 13 [(mav.opts) = { type: "float[3]" }];
  // The attitude, represented as Quaternion
  repeated float q = 14 [(mav.opts) = { type: "float[4]" }];
  // Angular rate in roll axis
  float roll_rate = 15 [(mav.opts) = { type: "float" }];
  // Angular rate in pitch axis
  float pitch_rate = 16 [(mav.opts) = { type: "float" }];
  // Angular rate in yaw axis
  float yaw_rate = 17 [(mav.opts) = { type: "float" }];
}

// Battery information. Updates GCS with flight controller battery status. Use SMART_BATTERY_* messages instead for smart batteries.
message BATTERY_STATUS {  // MavLink id: 147
  option (mav.message).id = 147;
  // Consumed charge, -1: autopilot does not provide consumption estimate
  int32 current_consumed = 1 [(mav.opts) = { type: "int32_t" }];
  // Consumed energy, -1: autopilot does not provide energy consumption estimate
  int32 energy_consumed = 2 [(mav.opts) = { type: "int32_t" }];
  // Temperature of the battery. INT16_MAX for unknown temperature.
  int32 temperature = 3 [(mav.opts) = { type: "int16_t" }];
  // Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).
  repeated uint32 voltages = 4 [(mav.opts) = { type: "uint16_t[10]" }];
  // Battery current, -1: autopilot does not measure the current
  int32 current_battery = 5 [(mav.opts) = { type: "int16_t" }];
  // Battery ID
  uint32 id = 6 [(mav.opts) = { type: "uint8_t" }];
  // Function of the battery
  MAV_BATTERY_FUNCTION battery_function = 7 [(mav.opts) = { type: "uint8_t", enum: "MAV_BATTERY_FUNCTION" }];
  // Type (chemistry) of the battery
  MAV_BATTERY_TYPE type = 8 [(mav.opts) = { type: "uint8_t", enum: "MAV_BATTERY_TYPE" }];
  // Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.
  int32 battery_remaining = 9 [(mav.opts) = { type: "int8_t" }];
}

// Version and capability of autopilot software. This should be emitted in response to a request with MAV_CMD_REQUEST_MESSAGE.
message AUTOPILOT_VERSION {  // MavLink id: 148
  option (mav.message).id = 148;
  // Bitmap of capabilities
  // bitfield defined by enum MAV_PROTOCOL_CAPABILITY
  uint64 capabilities = 1 [(mav.opts) = { type: "uint64_t", enum: "MAV_PROTOCOL_CAPABILITY" }];
  // UID if provided by hardware (see uid2)
  uint64 uid = 2 [(mav.opts) = { type: "uint64_t" }];
  // Firmware version number
  uint32 flight_sw_version = 3 [(mav.opts) = { type: "uint32_t" }];
  // Middleware version number
  uint32 middleware_sw_version = 4 [(mav.opts) = { type: "uint32_t" }];
  // Operating system version number
  uint32 os_sw_version = 5 [(mav.opts) = { type: "uint32_t" }];
  // HW / board version (last 8 bytes should be silicon ID, if any)
  uint32 board_version = 6 [(mav.opts) = { type: "uint32_t" }];
  // ID of the board vendor
  uint32 vendor_id = 7 [(mav.opts) = { type: "uint16_t" }];
  // ID of the product
  uint32 product_id = 8 [(mav.opts) = { type: "uint16_t" }];
  // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
  repeated uint32 flight_custom_version = 9 [(mav.opts) = { type: "uint8_t[8]" }];
  // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
  repeated uint32 middleware_custom_version = 10 [(mav.opts) = { type: "uint8_t[8]" }];
  // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
  repeated uint32 os_custom_version = 11 [(mav.opts) = { type: "uint8_t[8]" }];
}

// The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
message LANDING_TARGET {  // MavLink id: 149
  option (mav.message).id = 149;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X-axis angular offset of the target from the center of the image
  float angle_x = 2 [(mav.opts) = { type: "float" }];
  // Y-axis angular offset of the target from the center of the image
  float angle_y = 3 [(mav.opts) = { type: "float" }];
  // Distance to the target from the vehicle
  float distance = 4 [(mav.opts) = { type: "float" }];
  // Size of target along x-axis
  float size_x = 5 [(mav.opts) = { type: "float" }];
  // Size of target along y-axis
  float size_y = 6 [(mav.opts) = { type: "float" }];
  // The ID of the target if multiple targets are present
  uint32 target_num = 7 [(mav.opts) = { type: "uint8_t" }];
  // Coordinate frame used for following fields.
  MAV_FRAME frame = 8 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Status of geo-fencing. Sent in extended status stream when fencing enabled.
message FENCE_STATUS {  // MavLink id: 162
  option (mav.message).id = 162;
  // Time (since boot) of last breach.
  uint32 breach_time = 1 [(mav.opts) = { type: "uint32_t" }];
  // Number of fence breaches.
  uint32 breach_count = 2 [(mav.opts) = { type: "uint16_t" }];
  // Breach status (0 if currently inside fence, 1 if outside).
  uint32 breach_status = 3 [(mav.opts) = { type: "uint8_t" }];
  // Last breach type.
  FENCE_BREACH breach_type = 4 [(mav.opts) = { type: "uint8_t", enum: "FENCE_BREACH" }];
}

// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
message ESTIMATOR_STATUS {  // MavLink id: 230
  option (mav.message).id = 230;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Velocity innovation test ratio
  float vel_ratio = 2 [(mav.opts) = { type: "float" }];
  // Horizontal position innovation test ratio
  float pos_horiz_ratio = 3 [(mav.opts) = { type: "float" }];
  // Vertical position innovation test ratio
  float pos_vert_ratio = 4 [(mav.opts) = { type: "float" }];
  // Magnetometer innovation test ratio
  float mag_ratio = 5 [(mav.opts) = { type: "float" }];
  // Height above terrain innovation test ratio
  float hagl_ratio = 6 [(mav.opts) = { type: "float" }];
  // True airspeed innovation test ratio
  float tas_ratio = 7 [(mav.opts) = { type: "float" }];
  // Horizontal position 1-STD accuracy relative to the EKF local origin
  float pos_horiz_accuracy = 8 [(mav.opts) = { type: "float" }];
  // Vertical position 1-STD accuracy relative to the EKF local origin
  float pos_vert_accuracy = 9 [(mav.opts) = { type: "float" }];
  // Bitmap indicating which EKF outputs are valid.
  // bitfield defined by enum ESTIMATOR_STATUS_FLAGS
  uint32 flags = 10 [(mav.opts) = { type: "uint16_t", enum: "ESTIMATOR_STATUS_FLAGS" }];
}

// Wind covariance estimate from vehicle.
message WIND_COV {  // MavLink id: 231
  option (mav.message).id = 231;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Wind in X (NED) direction
  float wind_x = 2 [(mav.opts) = { type: "float" }];
  // Wind in Y (NED) direction
  float wind_y = 3 [(mav.opts) = { type: "float" }];
  // Wind in Z (NED) direction
  float wind_z = 4 [(mav.opts) = { type: "float" }];
  // Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate.
  float var_horiz = 5 [(mav.opts) = { type: "float" }];
  // Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate.
  float var_vert = 6 [(mav.opts) = { type: "float" }];
  // Altitude (MSL) that this measurement was taken at
  float wind_alt = 7 [(mav.opts) = { type: "float" }];
  // Horizontal speed 1-STD accuracy
  float horiz_accuracy = 8 [(mav.opts) = { type: "float" }];
  // Vertical speed 1-STD accuracy
  float vert_accuracy = 9 [(mav.opts) = { type: "float" }];
}

// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.
message GPS_INPUT {  // MavLink id: 232
  option (mav.message).id = 232;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // GPS time (from start of GPS week)
  uint32 time_week_ms = 2 [(mav.opts) = { type: "uint32_t" }];
  // Latitude (WGS84)
  int32 lat = 3 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 lon = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  float alt = 5 [(mav.opts) = { type: "float" }];
  // GPS HDOP horizontal dilution of position
  float hdop = 6 [(mav.opts) = { type: "float" }];
  // GPS VDOP vertical dilution of position
  float vdop = 7 [(mav.opts) = { type: "float" }];
  // GPS velocity in north direction in earth-fixed NED frame
  float vn = 8 [(mav.opts) = { type: "float" }];
  // GPS velocity in east direction in earth-fixed NED frame
  float ve = 9 [(mav.opts) = { type: "float" }];
  // GPS velocity in down direction in earth-fixed NED frame
  float vd = 10 [(mav.opts) = { type: "float" }];
  // GPS speed accuracy
  float speed_accuracy = 11 [(mav.opts) = { type: "float" }];
  // GPS horizontal accuracy
  float horiz_accuracy = 12 [(mav.opts) = { type: "float" }];
  // GPS vertical accuracy
  float vert_accuracy = 13 [(mav.opts) = { type: "float" }];
  // Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.
  // bitfield defined by enum GPS_INPUT_IGNORE_FLAGS
  uint32 ignore_flags = 14 [(mav.opts) = { type: "uint16_t", enum: "GPS_INPUT_IGNORE_FLAGS" }];
  // GPS week number
  uint32 time_week = 15 [(mav.opts) = { type: "uint16_t" }];
  // ID of the GPS for multiple GPS inputs
  uint32 gps_id = 16 [(mav.opts) = { type: "uint8_t" }];
  // 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
  uint32 fix_type = 17 [(mav.opts) = { type: "uint8_t" }];
  // Number of satellites visible.
  uint32 satellites_visible = 18 [(mav.opts) = { type: "uint8_t" }];
}

// RTCM message for injecting into the onboard GPS (used for DGPS)
message GPS_RTCM_DATA {  // MavLink id: 233
  option (mav.message).id = 233;
  // LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
  uint32 flags = 1 [(mav.opts) = { type: "uint8_t" }];
  // data length
  uint32 len = 2 [(mav.opts) = { type: "uint8_t" }];
  // RTCM message (may be fragmented)
  repeated uint32 data = 3 [(mav.opts) = { type: "uint8_t[180]" }];
}

// Message appropriate for high latency connections like Iridium
message HIGH_LATENCY {  // MavLink id: 234
  option (mav.message).id = 234;
  // A bitfield for use for autopilot-specific flags.
  uint32 custom_mode = 1 [(mav.opts) = { type: "uint32_t" }];
  // Latitude
  int32 latitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 longitude = 3 [(mav.opts) = { type: "int32_t" }];
  // roll
  int32 roll = 4 [(mav.opts) = { type: "int16_t" }];
  // pitch
  int32 pitch = 5 [(mav.opts) = { type: "int16_t" }];
  // heading
  uint32 heading = 6 [(mav.opts) = { type: "uint16_t" }];
  // heading setpoint
  int32 heading_sp = 7 [(mav.opts) = { type: "int16_t" }];
  // Altitude above mean sea level
  int32 altitude_amsl = 8 [(mav.opts) = { type: "int16_t" }];
  // Altitude setpoint relative to the home position
  int32 altitude_sp = 9 [(mav.opts) = { type: "int16_t" }];
  // distance to target
  uint32 wp_distance = 10 [(mav.opts) = { type: "uint16_t" }];
  // Bitmap of enabled system modes.
  // bitfield defined by enum MAV_MODE_FLAG
  uint32 base_mode = 11 [(mav.opts) = { type: "uint8_t", enum: "MAV_MODE_FLAG" }];
  // The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
  MAV_LANDED_STATE landed_state = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_LANDED_STATE" }];
  // throttle (percentage)
  int32 throttle = 13 [(mav.opts) = { type: "int8_t" }];
  // airspeed
  uint32 airspeed = 14 [(mav.opts) = { type: "uint8_t" }];
  // airspeed setpoint
  uint32 airspeed_sp = 15 [(mav.opts) = { type: "uint8_t" }];
  // groundspeed
  uint32 groundspeed = 16 [(mav.opts) = { type: "uint8_t" }];
  // climb rate
  int32 climb_rate = 17 [(mav.opts) = { type: "int8_t" }];
  // Number of satellites visible. If unknown, set to 255
  uint32 gps_nsat = 18 [(mav.opts) = { type: "uint8_t" }];
  // GPS Fix type.
  GPS_FIX_TYPE gps_fix_type = 19 [(mav.opts) = { type: "uint8_t", enum: "GPS_FIX_TYPE" }];
  // Remaining battery (percentage)
  uint32 battery_remaining = 20 [(mav.opts) = { type: "uint8_t" }];
  // Autopilot temperature (degrees C)
  int32 temperature = 21 [(mav.opts) = { type: "int8_t" }];
  // Air temperature (degrees C) from airspeed sensor
  int32 temperature_air = 22 [(mav.opts) = { type: "int8_t" }];
  // failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
  uint32 failsafe = 23 [(mav.opts) = { type: "uint8_t" }];
  // current waypoint number
  uint32 wp_num = 24 [(mav.opts) = { type: "uint8_t" }];
}

// Message appropriate for high latency connections like Iridium (version 2)
message HIGH_LATENCY2 {  // MavLink id: 235
  option (mav.message).id = 235;
  // Timestamp (milliseconds since boot or Unix epoch)
  uint32 timestamp = 1 [(mav.opts) = { type: "uint32_t" }];
  // Latitude
  int32 latitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 longitude = 3 [(mav.opts) = { type: "int32_t" }];
  // A bitfield for use for autopilot-specific flags (2 byte version).
  uint32 custom_mode = 4 [(mav.opts) = { type: "uint16_t" }];
  // Altitude above mean sea level
  int32 altitude = 5 [(mav.opts) = { type: "int16_t" }];
  // Altitude setpoint
  int32 target_altitude = 6 [(mav.opts) = { type: "int16_t" }];
  // Distance to target waypoint or position
  uint32 target_distance = 7 [(mav.opts) = { type: "uint16_t" }];
  // Current waypoint number
  uint32 wp_num = 8 [(mav.opts) = { type: "uint16_t" }];
  // Bitmap of failure flags.
  // bitfield defined by enum HL_FAILURE_FLAG
  uint32 failure_flags = 9 [(mav.opts) = { type: "uint16_t", enum: "HL_FAILURE_FLAG" }];
  // Type of the MAV (quadrotor, helicopter, etc.)
  MAV_TYPE type = 10 [(mav.opts) = { type: "uint8_t", enum: "MAV_TYPE" }];
  // Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
  MAV_AUTOPILOT autopilot = 11 [(mav.opts) = { type: "uint8_t", enum: "MAV_AUTOPILOT" }];
  // Heading
  uint32 heading = 12 [(mav.opts) = { type: "uint8_t" }];
  // Heading setpoint
  uint32 target_heading = 13 [(mav.opts) = { type: "uint8_t" }];
  // Throttle
  uint32 throttle = 14 [(mav.opts) = { type: "uint8_t" }];
  // Airspeed
  uint32 airspeed = 15 [(mav.opts) = { type: "uint8_t" }];
  // Airspeed setpoint
  uint32 airspeed_sp = 16 [(mav.opts) = { type: "uint8_t" }];
  // Groundspeed
  uint32 groundspeed = 17 [(mav.opts) = { type: "uint8_t" }];
  // Windspeed
  uint32 windspeed = 18 [(mav.opts) = { type: "uint8_t" }];
  // Wind heading
  uint32 wind_heading = 19 [(mav.opts) = { type: "uint8_t" }];
  // Maximum error horizontal position since last message
  uint32 eph = 20 [(mav.opts) = { type: "uint8_t" }];
  // Maximum error vertical position since last message
  uint32 epv = 21 [(mav.opts) = { type: "uint8_t" }];
  // Air temperature from airspeed sensor
  int32 temperature_air = 22 [(mav.opts) = { type: "int8_t" }];
  // Maximum climb rate magnitude since last message
  int32 climb_rate = 23 [(mav.opts) = { type: "int8_t" }];
  // Battery level (-1 if field not provided).
  int32 battery = 24 [(mav.opts) = { type: "int8_t" }];
  // Field for custom payload.
  int32 custom0 = 25 [(mav.opts) = { type: "int8_t" }];
  // Field for custom payload.
  int32 custom1 = 26 [(mav.opts) = { type: "int8_t" }];
  // Field for custom payload.
  int32 custom2 = 27 [(mav.opts) = { type: "int8_t" }];
}

// Vibration levels and accelerometer clipping
message VIBRATION {  // MavLink id: 241
  option (mav.message).id = 241;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Vibration levels on X-axis
  float vibration_x = 2 [(mav.opts) = { type: "float" }];
  // Vibration levels on Y-axis
  float vibration_y = 3 [(mav.opts) = { type: "float" }];
  // Vibration levels on Z-axis
  float vibration_z = 4 [(mav.opts) = { type: "float" }];
  // first accelerometer clipping count
  uint32 clipping_0 = 5 [(mav.opts) = { type: "uint32_t" }];
  // second accelerometer clipping count
  uint32 clipping_1 = 6 [(mav.opts) = { type: "uint32_t" }];
  // third accelerometer clipping count
  uint32 clipping_2 = 7 [(mav.opts) = { type: "uint32_t" }];
}

// This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
message HOME_POSITION {  // MavLink id: 242
  option (mav.message).id = 242;
  // Latitude (WGS84)
  int32 latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 altitude = 3 [(mav.opts) = { type: "int32_t" }];
  // Local X position of this position in the local coordinate frame
  float x = 4 [(mav.opts) = { type: "float" }];
  // Local Y position of this position in the local coordinate frame
  float y = 5 [(mav.opts) = { type: "float" }];
  // Local Z position of this position in the local coordinate frame
  float z = 6 [(mav.opts) = { type: "float" }];
  // World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
  repeated float q = 7 [(mav.opts) = { type: "float[4]" }];
  // Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_x = 8 [(mav.opts) = { type: "float" }];
  // Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_y = 9 [(mav.opts) = { type: "float" }];
  // Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_z = 10 [(mav.opts) = { type: "float" }];
}

// The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
message SET_HOME_POSITION {  // MavLink id: 243
  option (mav.message).id = 243;
  // Latitude (WGS84)
  int32 latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL). Positive for up.
  int32 altitude = 3 [(mav.opts) = { type: "int32_t" }];
  // Local X position of this position in the local coordinate frame
  float x = 4 [(mav.opts) = { type: "float" }];
  // Local Y position of this position in the local coordinate frame
  float y = 5 [(mav.opts) = { type: "float" }];
  // Local Z position of this position in the local coordinate frame
  float z = 6 [(mav.opts) = { type: "float" }];
  // World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
  repeated float q = 7 [(mav.opts) = { type: "float[4]" }];
  // Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_x = 8 [(mav.opts) = { type: "float" }];
  // Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_y = 9 [(mav.opts) = { type: "float" }];
  // Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
  float approach_z = 10 [(mav.opts) = { type: "float" }];
  // System ID.
  uint32 target_system = 11 [(mav.opts) = { type: "uint8_t" }];
}

// The interval between messages for a particular MAVLink message ID. This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL command. This interface replaces DATA_STREAM.
message MESSAGE_INTERVAL {  // MavLink id: 244
  option (mav.message).id = 244;
  // The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.
  int32 interval_us = 1 [(mav.opts) = { type: "int32_t" }];
  // The ID of the requested MAVLink message. v1.0 is limited to 254 messages.
  uint32 message_id = 2 [(mav.opts) = { type: "uint16_t" }];
}

// Provides state for additional features
message EXTENDED_SYS_STATE {  // MavLink id: 245
  option (mav.message).id = 245;
  // The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.
  MAV_VTOL_STATE vtol_state = 1 [(mav.opts) = { type: "uint8_t", enum: "MAV_VTOL_STATE" }];
  // The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
  MAV_LANDED_STATE landed_state = 2 [(mav.opts) = { type: "uint8_t", enum: "MAV_LANDED_STATE" }];
}

// The location and information of an ADSB vehicle
message ADSB_VEHICLE {  // MavLink id: 246
  option (mav.message).id = 246;
  // ICAO address
  uint32 ICAO_address = 1 [(mav.opts) = { type: "uint32_t" }];
  // Latitude
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude(ASL)
  int32 altitude = 4 [(mav.opts) = { type: "int32_t" }];
  // Course over ground
  uint32 heading = 5 [(mav.opts) = { type: "uint16_t" }];
  // The horizontal velocity
  uint32 hor_velocity = 6 [(mav.opts) = { type: "uint16_t" }];
  // The vertical velocity. Positive is up
  int32 ver_velocity = 7 [(mav.opts) = { type: "int16_t" }];
  // Bitmap to indicate various statuses including valid data fields
  // bitfield defined by enum ADSB_FLAGS
  uint32 flags = 8 [(mav.opts) = { type: "uint16_t", enum: "ADSB_FLAGS" }];
  // Squawk code
  uint32 squawk = 9 [(mav.opts) = { type: "uint16_t" }];
  // ADSB altitude type.
  ADSB_ALTITUDE_TYPE altitude_type = 10 [(mav.opts) = { type: "uint8_t", enum: "ADSB_ALTITUDE_TYPE" }];
  // The callsign, 8+null
  string callsign = 11 [(mav.opts) = { type: "char[9]" }];
  // ADSB emitter type.
  ADSB_EMITTER_TYPE emitter_type = 12 [(mav.opts) = { type: "uint8_t", enum: "ADSB_EMITTER_TYPE" }];
  // Time since last communication in seconds
  uint32 tslc = 13 [(mav.opts) = { type: "uint8_t" }];
}

// Information about a potential collision
message COLLISION {  // MavLink id: 247
  option (mav.message).id = 247;
  // Unique identifier, domain based on src field
  uint32 id = 1 [(mav.opts) = { type: "uint32_t" }];
  // Estimated time until collision occurs
  float time_to_minimum_delta = 2 [(mav.opts) = { type: "float" }];
  // Closest vertical distance between vehicle and object
  float altitude_minimum_delta = 3 [(mav.opts) = { type: "float" }];
  // Closest horizontal distance between vehicle and object
  float horizontal_minimum_delta = 4 [(mav.opts) = { type: "float" }];
  // Collision data source
  MAV_COLLISION_SRC src = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_COLLISION_SRC" }];
  // Action that is being taken to avoid this collision
  MAV_COLLISION_ACTION action = 6 [(mav.opts) = { type: "uint8_t", enum: "MAV_COLLISION_ACTION" }];
  // How concerned the aircraft is about this collision
  MAV_COLLISION_THREAT_LEVEL threat_level = 7 [(mav.opts) = { type: "uint8_t", enum: "MAV_COLLISION_THREAT_LEVEL" }];
}

// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
message V2_EXTENSION {  // MavLink id: 248
  option (mav.message).id = 248;
  // A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
  uint32 message_type = 1 [(mav.opts) = { type: "uint16_t" }];
  // Network ID (0 for broadcast)
  uint32 target_network = 2 [(mav.opts) = { type: "uint8_t" }];
  // System ID (0 for broadcast)
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast)
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
  // Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.
  repeated uint32 payload = 5 [(mav.opts) = { type: "uint8_t[249]" }];
}

// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
message MEMORY_VECT {  // MavLink id: 249
  option (mav.message).id = 249;
  // Starting address of the debug variables
  uint32 address = 1 [(mav.opts) = { type: "uint16_t" }];
  // Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
  uint32 ver = 2 [(mav.opts) = { type: "uint8_t" }];
  // Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
  uint32 type = 3 [(mav.opts) = { type: "uint8_t" }];
  // Memory contents at specified address
  repeated int32 value = 4 [(mav.opts) = { type: "int8_t[32]" }];
}

// To debug something using a named 3D vector.
message DEBUG_VECT {  // MavLink id: 250
  option (mav.message).id = 250;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // x
  float x = 2 [(mav.opts) = { type: "float" }];
  // y
  float y = 3 [(mav.opts) = { type: "float" }];
  // z
  float z = 4 [(mav.opts) = { type: "float" }];
  // Name
  string name = 5 [(mav.opts) = { type: "char[10]" }];
}

// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
message NAMED_VALUE_FLOAT {  // MavLink id: 251
  option (mav.message).id = 251;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Floating point value
  float value = 2 [(mav.opts) = { type: "float" }];
  // Name of the debug variable
  string name = 3 [(mav.opts) = { type: "char[10]" }];
}

// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
message NAMED_VALUE_INT {  // MavLink id: 252
  option (mav.message).id = 252;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Signed integer value
  int32 value = 2 [(mav.opts) = { type: "int32_t" }];
  // Name of the debug variable
  string name = 3 [(mav.opts) = { type: "char[10]" }];
}

// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
message STATUSTEXT {  // MavLink id: 253
  option (mav.message).id = 253;
  // Severity of status. Relies on the definitions within RFC-5424.
  MAV_SEVERITY severity = 1 [(mav.opts) = { type: "uint8_t", enum: "MAV_SEVERITY" }];
  // Status text message, without null termination character
  string text = 2 [(mav.opts) = { type: "char[50]" }];
}

// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
message DEBUG {  // MavLink id: 254
  option (mav.message).id = 254;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // DEBUG value
  float value = 2 [(mav.opts) = { type: "float" }];
  // index of debug variable
  uint32 ind = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing
message SETUP_SIGNING {  // MavLink id: 256
  option (mav.message).id = 256;
  // initial timestamp
  uint64 initial_timestamp = 1 [(mav.opts) = { type: "uint64_t" }];
  // system id of the target
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // component ID of the target
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // signing key
  repeated uint32 secret_key = 4 [(mav.opts) = { type: "uint8_t[32]" }];
}

// Report button state change.
message BUTTON_CHANGE {  // MavLink id: 257
  option (mav.message).id = 257;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Time of last change of button state.
  uint32 last_change_ms = 2 [(mav.opts) = { type: "uint32_t" }];
  // Bitmap for state of buttons.
  uint32 state = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Control vehicle tone generation (buzzer).
message PLAY_TUNE {  // MavLink id: 258
  option (mav.message).id = 258;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // tune in board specific format
  string tune = 3 [(mav.opts) = { type: "char[30]" }];
}

// Information about a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
message CAMERA_INFORMATION {  // MavLink id: 259
  option (mav.message).id = 259;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Version of the camera firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff)
  uint32 firmware_version = 2 [(mav.opts) = { type: "uint32_t" }];
  // Focal length
  float focal_length = 3 [(mav.opts) = { type: "float" }];
  // Image sensor size horizontal
  float sensor_size_h = 4 [(mav.opts) = { type: "float" }];
  // Image sensor size vertical
  float sensor_size_v = 5 [(mav.opts) = { type: "float" }];
  // Bitmap of camera capability flags.
  // bitfield defined by enum CAMERA_CAP_FLAGS
  uint32 flags = 6 [(mav.opts) = { type: "uint32_t", enum: "CAMERA_CAP_FLAGS" }];
  // Horizontal image resolution
  uint32 resolution_h = 7 [(mav.opts) = { type: "uint16_t" }];
  // Vertical image resolution
  uint32 resolution_v = 8 [(mav.opts) = { type: "uint16_t" }];
  // Camera definition version (iteration)
  uint32 cam_definition_version = 9 [(mav.opts) = { type: "uint16_t" }];
  // Name of the camera vendor
  repeated uint32 vendor_name = 10 [(mav.opts) = { type: "uint8_t[32]" }];
  // Name of the camera model
  repeated uint32 model_name = 11 [(mav.opts) = { type: "uint8_t[32]" }];
  // Reserved for a lens ID
  uint32 lens_id = 12 [(mav.opts) = { type: "uint8_t" }];
  // Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol).
  string cam_definition_uri = 13 [(mav.opts) = { type: "char[140]" }];
}

// Settings of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
message CAMERA_SETTINGS {  // MavLink id: 260
  option (mav.message).id = 260;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Camera mode
  CAMERA_MODE mode_id = 2 [(mav.opts) = { type: "uint8_t", enum: "CAMERA_MODE" }];
}

// Information about a storage medium. This message is sent in response to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of the storage changes (STORAGE_STATUS). Use MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested storage: 0 for all, 1 for first, 2 for second, etc.
message STORAGE_INFORMATION {  // MavLink id: 261
  option (mav.message).id = 261;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
  float total_capacity = 2 [(mav.opts) = { type: "float" }];
  // Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
  float used_capacity = 3 [(mav.opts) = { type: "float" }];
  // Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
  float available_capacity = 4 [(mav.opts) = { type: "float" }];
  // Read speed.
  float read_speed = 5 [(mav.opts) = { type: "float" }];
  // Write speed.
  float write_speed = 6 [(mav.opts) = { type: "float" }];
  // Storage ID (1 for first, 2 for second, etc.)
  uint32 storage_id = 7 [(mav.opts) = { type: "uint8_t" }];
  // Number of storage devices
  uint32 storage_count = 8 [(mav.opts) = { type: "uint8_t" }];
  // Status of storage
  STORAGE_STATUS status = 9 [(mav.opts) = { type: "uint8_t", enum: "STORAGE_STATUS" }];
}

// Information about the status of a capture. Can be requested with a MAV_CMD_REQUEST_MESSAGE command.
message CAMERA_CAPTURE_STATUS {  // MavLink id: 262
  option (mav.message).id = 262;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Image capture interval
  float image_interval = 2 [(mav.opts) = { type: "float" }];
  // Time since recording started
  uint32 recording_time_ms = 3 [(mav.opts) = { type: "uint32_t" }];
  // Available storage capacity.
  float available_capacity = 4 [(mav.opts) = { type: "float" }];
  // Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)
  uint32 image_status = 5 [(mav.opts) = { type: "uint8_t" }];
  // Current status of video capturing (0: idle, 1: capture in progress)
  uint32 video_status = 6 [(mav.opts) = { type: "uint8_t" }];
}

// Information about a captured image. This is emitted every time a message is captured. It may be re-requested using MAV_CMD_REQUEST_MESSAGE, using param2 to indicate the sequence number for the missing image.
message CAMERA_IMAGE_CAPTURED {  // MavLink id: 263
  option (mav.message).id = 263;
  // Timestamp (time since UNIX epoch) in UTC. 0 for unknown.
  uint64 time_utc = 1 [(mav.opts) = { type: "uint64_t" }];
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 2 [(mav.opts) = { type: "uint32_t" }];
  // Latitude where image was taken
  int32 lat = 3 [(mav.opts) = { type: "int32_t" }];
  // Longitude where capture was taken
  int32 lon = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL) where image was taken
  int32 alt = 5 [(mav.opts) = { type: "int32_t" }];
  // Altitude above ground
  int32 relative_alt = 6 [(mav.opts) = { type: "int32_t" }];
  // Quaternion of camera orientation (w, x, y, z order, zero-rotation is 0, 0, 0, 0)
  repeated float q = 7 [(mav.opts) = { type: "float[4]" }];
  // Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)
  int32 image_index = 8 [(mav.opts) = { type: "int32_t" }];
  // Camera ID (1 for first, 2 for second, etc.)
  uint32 camera_id = 9 [(mav.opts) = { type: "uint8_t" }];
  // Boolean indicating success (1) or failure (0) while capturing this image.
  int32 capture_result = 10 [(mav.opts) = { type: "int8_t" }];
  // URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.
  string file_url = 11 [(mav.opts) = { type: "char[205]" }];
}

// Information about flight since last arming.
message FLIGHT_INFORMATION {  // MavLink id: 264
  option (mav.message).id = 264;
  // Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown
  uint64 arming_time_utc = 1 [(mav.opts) = { type: "uint64_t" }];
  // Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown
  uint64 takeoff_time_utc = 2 [(mav.opts) = { type: "uint64_t" }];
  // Universally unique identifier (UUID) of flight, should correspond to name of log files
  uint64 flight_uuid = 3 [(mav.opts) = { type: "uint64_t" }];
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 4 [(mav.opts) = { type: "uint32_t" }];
}

// Orientation of a mount
message MOUNT_ORIENTATION {  // MavLink id: 265
  option (mav.message).id = 265;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Roll in global frame (set to NaN for invalid).
  float roll = 2 [(mav.opts) = { type: "float" }];
  // Pitch in global frame (set to NaN for invalid).
  float pitch = 3 [(mav.opts) = { type: "float" }];
  // Yaw relative to vehicle (set to NaN for invalid).
  float yaw = 4 [(mav.opts) = { type: "float" }];
}

// A message containing logged data (see also MAV_CMD_LOGGING_START)
message LOGGING_DATA {  // MavLink id: 266
  option (mav.message).id = 266;
  // sequence number (can wrap)
  uint32 sequence = 1 [(mav.opts) = { type: "uint16_t" }];
  // system ID of the target
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // component ID of the target
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // data length
  uint32 length = 4 [(mav.opts) = { type: "uint8_t" }];
  // offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).
  uint32 first_message_offset = 5 [(mav.opts) = { type: "uint8_t" }];
  // logged data
  repeated uint32 data = 6 [(mav.opts) = { type: "uint8_t[249]" }];
}

// A message containing logged data which requires a LOGGING_ACK to be sent back
message LOGGING_DATA_ACKED {  // MavLink id: 267
  option (mav.message).id = 267;
  // sequence number (can wrap)
  uint32 sequence = 1 [(mav.opts) = { type: "uint16_t" }];
  // system ID of the target
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // component ID of the target
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // data length
  uint32 length = 4 [(mav.opts) = { type: "uint8_t" }];
  // offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).
  uint32 first_message_offset = 5 [(mav.opts) = { type: "uint8_t" }];
  // logged data
  repeated uint32 data = 6 [(mav.opts) = { type: "uint8_t[249]" }];
}

// An ack for a LOGGING_DATA_ACKED message
message LOGGING_ACK {  // MavLink id: 268
  option (mav.message).id = 268;
  // sequence number (must match the one in LOGGING_DATA_ACKED)
  uint32 sequence = 1 [(mav.opts) = { type: "uint16_t" }];
  // system ID of the target
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // component ID of the target
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Information about video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE, where param2 indicates the video stream id: 0 for all streams, 1 for first, 2 for second, etc.
message VIDEO_STREAM_INFORMATION {  // MavLink id: 269
  option (mav.message).id = 269;
  // Frame rate.
  float framerate = 1 [(mav.opts) = { type: "float" }];
  // Bit rate.
  uint32 bitrate = 2 [(mav.opts) = { type: "uint32_t" }];
  // Bitmap of stream status flags.
  // bitfield defined by enum VIDEO_STREAM_STATUS_FLAGS
  uint32 flags = 3 [(mav.opts) = { type: "uint16_t", enum: "VIDEO_STREAM_STATUS_FLAGS" }];
  // Horizontal resolution.
  uint32 resolution_h = 4 [(mav.opts) = { type: "uint16_t" }];
  // Vertical resolution.
  uint32 resolution_v = 5 [(mav.opts) = { type: "uint16_t" }];
  // Video image rotation clockwise.
  uint32 rotation = 6 [(mav.opts) = { type: "uint16_t" }];
  // Horizontal Field of view.
  uint32 hfov = 7 [(mav.opts) = { type: "uint16_t" }];
  // Video Stream ID (1 for first, 2 for second, etc.)
  uint32 stream_id = 8 [(mav.opts) = { type: "uint8_t" }];
  // Number of streams available.
  uint32 count = 9 [(mav.opts) = { type: "uint8_t" }];
  // Type of stream.
  VIDEO_STREAM_TYPE type = 10 [(mav.opts) = { type: "uint8_t", enum: "VIDEO_STREAM_TYPE" }];
  // Stream name.
  string name = 11 [(mav.opts) = { type: "char[32]" }];
  // Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).
  string uri = 12 [(mav.opts) = { type: "char[160]" }];
}

// Information about the status of a video stream. It may be requested using MAV_CMD_REQUEST_MESSAGE.
message VIDEO_STREAM_STATUS {  // MavLink id: 270
  option (mav.message).id = 270;
  // Frame rate
  float framerate = 1 [(mav.opts) = { type: "float" }];
  // Bit rate
  uint32 bitrate = 2 [(mav.opts) = { type: "uint32_t" }];
  // Bitmap of stream status flags
  // bitfield defined by enum VIDEO_STREAM_STATUS_FLAGS
  uint32 flags = 3 [(mav.opts) = { type: "uint16_t", enum: "VIDEO_STREAM_STATUS_FLAGS" }];
  // Horizontal resolution
  uint32 resolution_h = 4 [(mav.opts) = { type: "uint16_t" }];
  // Vertical resolution
  uint32 resolution_v = 5 [(mav.opts) = { type: "uint16_t" }];
  // Video image rotation clockwise
  uint32 rotation = 6 [(mav.opts) = { type: "uint16_t" }];
  // Horizontal Field of view
  uint32 hfov = 7 [(mav.opts) = { type: "uint16_t" }];
  // Video Stream ID (1 for first, 2 for second, etc.)
  uint32 stream_id = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
message GIMBAL_MANAGER_INFORMATION {  // MavLink id: 280
  option (mav.message).id = 280;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Bitmap of gimbal capability flags.
  // bitfield defined by enum GIMBAL_MANAGER_CAP_FLAGS
  uint32 cap_flags = 2 [(mav.opts) = { type: "uint32_t", enum: "GIMBAL_MANAGER_CAP_FLAGS" }];
  // Maximum tilt/pitch angle (positive: up, negative: down)
  float tilt_max = 3 [(mav.opts) = { type: "float" }];
  // Minimum tilt/pitch angle (positive: up, negative: down)
  float tilt_min = 4 [(mav.opts) = { type: "float" }];
  // Maximum tilt/pitch angular rate (positive: up, negative: down)
  float tilt_rate_max = 5 [(mav.opts) = { type: "float" }];
  // Maximum pan/yaw angle (positive: to the right, negative: to the left)
  float pan_max = 6 [(mav.opts) = { type: "float" }];
  // Minimum pan/yaw angle (positive: to the right, negative: to the left)
  float pan_min = 7 [(mav.opts) = { type: "float" }];
  // Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
  float pan_rate_max = 8 [(mav.opts) = { type: "float" }];
  // Gimbal device ID that this gimbal manager is responsible for.
  uint32 gimbal_device_id = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).
message GIMBAL_MANAGER_STATUS {  // MavLink id: 281
  option (mav.message).id = 281;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // High level gimbal manager flags currently applied.
  // bitfield defined by enum GIMBAL_MANAGER_FLAGS
  uint32 flags = 2 [(mav.opts) = { type: "uint32_t", enum: "GIMBAL_MANAGER_FLAGS" }];
  // Gimbal device ID that this gimbal manager is responsible for.
  uint32 gimbal_device_id = 3 [(mav.opts) = { type: "uint8_t" }];
}

// High level message to control a gimbal's attitude. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
message GIMBAL_MANAGER_SET_ATTITUDE {  // MavLink id: 282
  option (mav.message).id = 282;
  // High level gimbal manager flags to use.
  // bitfield defined by enum GIMBAL_MANAGER_FLAGS
  uint32 flags = 1 [(mav.opts) = { type: "uint32_t", enum: "GIMBAL_MANAGER_FLAGS" }];
  // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // X component of angular velocity, positive is banking to the right, NaN to be ignored.
  float angular_velocity_x = 3 [(mav.opts) = { type: "float" }];
  // Y component of angular velocity, positive is tilting up, NaN to be ignored.
  float angular_velocity_y = 4 [(mav.opts) = { type: "float" }];
  // Z component of angular velocity, positive is panning to the right, NaN to be ignored.
  float angular_velocity_z = 5 [(mav.opts) = { type: "float" }];
  // System ID
  uint32 target_system = 6 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 7 [(mav.opts) = { type: "uint8_t" }];
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  uint32 gimbal_device_id = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE.
message GIMBAL_DEVICE_INFORMATION {  // MavLink id: 283
  option (mav.message).id = 283;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff)
  uint32 firmware_version = 2 [(mav.opts) = { type: "uint32_t" }];
  // Maximum tilt/pitch angle (positive: up, negative: down)
  float tilt_max = 3 [(mav.opts) = { type: "float" }];
  // Minimum tilt/pitch angle (positive: up, negative: down)
  float tilt_min = 4 [(mav.opts) = { type: "float" }];
  // Maximum tilt/pitch angular rate (positive: up, negative: down)
  float tilt_rate_max = 5 [(mav.opts) = { type: "float" }];
  // Maximum pan/yaw angle (positive: to the right, negative: to the left)
  float pan_max = 6 [(mav.opts) = { type: "float" }];
  // Minimum pan/yaw angle (positive: to the right, negative: to the left)
  float pan_min = 7 [(mav.opts) = { type: "float" }];
  // Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
  float pan_rate_max = 8 [(mav.opts) = { type: "float" }];
  // Bitmap of gimbal capability flags.
  // bitfield defined by enum GIMBAL_DEVICE_CAP_FLAGS
  uint32 cap_flags = 9 [(mav.opts) = { type: "uint16_t", enum: "GIMBAL_DEVICE_CAP_FLAGS" }];
  // Name of the gimbal vendor
  repeated uint32 vendor_name = 10 [(mav.opts) = { type: "uint8_t[32]" }];
  // Name of the gimbal model
  repeated uint32 model_name = 11 [(mav.opts) = { type: "uint8_t[32]" }];
}

// Low level message to control a gimbal device's attitude. This message is to be sent from the gimbal manager to the gimbal device component. Angles and rates can be set to NaN according to use case.
message GIMBAL_DEVICE_SET_ATTITUDE {  // MavLink id: 284
  option (mav.message).id = 284;
  // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, set all fields to NaN if only angular velocity should be used)
  repeated float q = 1 [(mav.opts) = { type: "float[4]" }];
  // X component of angular velocity, positive is banking to the right, NaN to be ignored.
  float angular_velocity_x = 2 [(mav.opts) = { type: "float" }];
  // Y component of angular velocity, positive is tilting up, NaN to be ignored.
  float angular_velocity_y = 3 [(mav.opts) = { type: "float" }];
  // Z component of angular velocity, positive is panning to the right, NaN to be ignored.
  float angular_velocity_z = 4 [(mav.opts) = { type: "float" }];
  // Low level gimbal flags.
  // bitfield defined by enum GIMBAL_DEVICE_FLAGS
  uint32 flags = 5 [(mav.opts) = { type: "uint16_t", enum: "GIMBAL_DEVICE_FLAGS" }];
  // System ID
  uint32 target_system = 6 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Message reporting the status of a gimbal device. This message should be broadcasted by a gimbal device component. The angles encoded in the quaternion are in the global frame (roll: positive is tilt to the right, pitch: positive is tilting up, yaw is turn to the right). This message should be broadcast at a low regular rate (e.g. 10Hz).
message GIMBAL_DEVICE_ATTITUDE_STATUS {  // MavLink id: 285
  option (mav.message).id = 285;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // X component of angular velocity (NaN if unknown)
  float angular_velocity_x = 3 [(mav.opts) = { type: "float" }];
  // Y component of angular velocity (NaN if unknown)
  float angular_velocity_y = 4 [(mav.opts) = { type: "float" }];
  // Z component of angular velocity (NaN if unknown)
  float angular_velocity_z = 5 [(mav.opts) = { type: "float" }];
  // Failure flags (0 for no failure)
  // bitfield defined by enum GIMBAL_DEVICE_ERROR_FLAGS
  uint32 failure_flags = 6 [(mav.opts) = { type: "uint32_t", enum: "GIMBAL_DEVICE_ERROR_FLAGS" }];
  // Current gimbal flags set.
  // bitfield defined by enum GIMBAL_DEVICE_FLAGS
  uint32 flags = 7 [(mav.opts) = { type: "uint16_t", enum: "GIMBAL_DEVICE_FLAGS" }];
  // System ID
  uint32 target_system = 8 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Low level message containing autopilot state relevant for a gimbal device. This message is to be sent from the gimbal manager to the gimbal device component. The data of this message server for the gimbal's estimator corrections in particular horizon compensation, as well as the autopilot's control intention e.g. feed forward angular control in z-axis.
message AUTOPILOT_STATE_FOR_GIMBAL_DEVICE {  // MavLink id: 286
  option (mav.message).id = 286;
  // Timestamp (time since system boot).
  uint64 time_boot_us = 1 [(mav.opts) = { type: "uint64_t" }];
  // Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamiltonian convention).
  repeated float q = 2 [(mav.opts) = { type: "float[4]" }];
  // Estimated delay of the attitude data.
  uint32 q_estimated_delay_us = 3 [(mav.opts) = { type: "uint32_t" }];
  // X Speed in NED (North, East, Down).
  float vx = 4 [(mav.opts) = { type: "float" }];
  // Y Speed in NED (North, East, Down).
  float vy = 5 [(mav.opts) = { type: "float" }];
  // Z Speed in NED (North, East, Down).
  float vz = 6 [(mav.opts) = { type: "float" }];
  // Estimated delay of the speed data.
  uint32 v_estimated_delay_us = 7 [(mav.opts) = { type: "uint32_t" }];
  // Feed forward Z component of angular velocity, positive is yawing to the right, NaN to be ignored. This is to indicate if the autopilot is actively yawing.
  float feed_forward_angular_velocity_z = 8 [(mav.opts) = { type: "float" }];
  // Bitmap indicating which estimator outputs are valid.
  // bitfield defined by enum ESTIMATOR_STATUS_FLAGS
  uint32 estimator_status = 9 [(mav.opts) = { type: "uint16_t", enum: "ESTIMATOR_STATUS_FLAGS" }];
  // System ID
  uint32 target_system = 10 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 11 [(mav.opts) = { type: "uint8_t" }];
  // The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
  MAV_LANDED_STATE landed_state = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_LANDED_STATE" }];
}

// High level message to control a gimbal's tilt and pan angles. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
message GIMBAL_MANAGER_SET_TILTPAN {  // MavLink id: 287
  option (mav.message).id = 287;
  // High level gimbal manager flags to use.
  // bitfield defined by enum GIMBAL_MANAGER_FLAGS
  uint32 flags = 1 [(mav.opts) = { type: "uint32_t", enum: "GIMBAL_MANAGER_FLAGS" }];
  // Tilt/pitch angle (positive: up, negative: down, NaN to be ignored).
  float tilt = 2 [(mav.opts) = { type: "float" }];
  // Pan/yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
  float pan = 3 [(mav.opts) = { type: "float" }];
  // Tilt/pitch angular rate (positive: up, negative: down, NaN to be ignored).
  float tilt_rate = 4 [(mav.opts) = { type: "float" }];
  // Pan/yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).
  float pan_rate = 5 [(mav.opts) = { type: "float" }];
  // System ID
  uint32 target_system = 6 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 7 [(mav.opts) = { type: "uint8_t" }];
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  uint32 gimbal_device_id = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Configure WiFi AP SSID, password, and mode. This message is re-emitted as an acknowledgement by the AP. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE
message WIFI_CONFIG_AP {  // MavLink id: 299
  option (mav.message).id = 299;
  // Name of Wi-Fi network (SSID). Blank to leave it unchanged when setting. Current SSID when sent back as a response.
  string ssid = 1 [(mav.opts) = { type: "char[32]" }];
  // Password. Blank for an open AP. MD5 hash when message is sent back as a response.
  string password = 2 [(mav.opts) = { type: "char[64]" }];
}

// Version and capability of protocol version. This message can be requested with MAV_CMD_REQUEST_MESSAGE and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to a request for PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly.
message PROTOCOL_VERSION {  // MavLink id: 300
  option (mav.message).id = 300;
  // Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.
  uint32 version = 1 [(mav.opts) = { type: "uint16_t" }];
  // Minimum MAVLink version supported
  uint32 min_version = 2 [(mav.opts) = { type: "uint16_t" }];
  // Maximum MAVLink version supported (set to the same value as version by default)
  uint32 max_version = 3 [(mav.opts) = { type: "uint16_t" }];
  // The first 8 bytes (not characters printed in hex!) of the git hash.
  repeated uint32 spec_version_hash = 4 [(mav.opts) = { type: "uint8_t[8]" }];
  // The first 8 bytes (not characters printed in hex!) of the git hash.
  repeated uint32 library_version_hash = 5 [(mav.opts) = { type: "uint8_t[8]" }];
}

// The location and information of an AIS vessel
message AIS_VESSEL {  // MavLink id: 301
  option (mav.message).id = 301;
  // Mobile Marine Service Identifier, 9 decimal digits
  uint32 MMSI = 1 [(mav.opts) = { type: "uint32_t" }];
  // Latitude
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Course over ground
  uint32 COG = 4 [(mav.opts) = { type: "uint16_t" }];
  // True heading
  uint32 heading = 5 [(mav.opts) = { type: "uint16_t" }];
  // Speed over ground
  uint32 velocity = 6 [(mav.opts) = { type: "uint16_t" }];
  // Distance from lat/lon location to bow
  uint32 dimension_bow = 7 [(mav.opts) = { type: "uint16_t" }];
  // Distance from lat/lon location to stern
  uint32 dimension_stern = 8 [(mav.opts) = { type: "uint16_t" }];
  // Time since last communication in seconds
  uint32 tslc = 9 [(mav.opts) = { type: "uint16_t" }];
  // Bitmask to indicate various statuses including valid data fields
  // bitfield defined by enum AIS_FLAGS
  uint32 flags = 10 [(mav.opts) = { type: "uint16_t", enum: "AIS_FLAGS" }];
  // Turn rate
  int32 turn_rate = 11 [(mav.opts) = { type: "int8_t" }];
  // Navigational status
  AIS_NAV_STATUS navigational_status = 12 [(mav.opts) = { type: "uint8_t", enum: "AIS_NAV_STATUS" }];
  // Type of vessels
  AIS_TYPE type = 13 [(mav.opts) = { type: "uint8_t", enum: "AIS_TYPE" }];
  // Distance from lat/lon location to port side
  uint32 dimension_port = 14 [(mav.opts) = { type: "uint8_t" }];
  // Distance from lat/lon location to starboard side
  uint32 dimension_starboard = 15 [(mav.opts) = { type: "uint8_t" }];
  // The vessel callsign
  string callsign = 16 [(mav.opts) = { type: "char[7]" }];
  // The vessel name
  string name = 17 [(mav.opts) = { type: "char[20]" }];
}

// General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.
message UAVCAN_NODE_STATUS {  // MavLink id: 310
  option (mav.message).id = 310;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Time since the start-up of the node.
  uint32 uptime_sec = 2 [(mav.opts) = { type: "uint32_t" }];
  // Vendor-specific status information.
  uint32 vendor_specific_status_code = 3 [(mav.opts) = { type: "uint16_t" }];
  // Generalized node health status.
  UAVCAN_NODE_HEALTH health = 4 [(mav.opts) = { type: "uint8_t", enum: "UAVCAN_NODE_HEALTH" }];
  // Generalized operating mode.
  UAVCAN_NODE_MODE mode = 5 [(mav.opts) = { type: "uint8_t", enum: "UAVCAN_NODE_MODE" }];
  // Not used currently.
  uint32 sub_mode = 6 [(mav.opts) = { type: "uint8_t" }];
}

// General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.
message UAVCAN_NODE_INFO {  // MavLink id: 311
  option (mav.message).id = 311;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Time since the start-up of the node.
  uint32 uptime_sec = 2 [(mav.opts) = { type: "uint32_t" }];
  // Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown.
  uint32 sw_vcs_commit = 3 [(mav.opts) = { type: "uint32_t" }];
  // Node name string. For example, "sapog.px4.io".
  string name = 4 [(mav.opts) = { type: "char[80]" }];
  // Hardware major version number.
  uint32 hw_version_major = 5 [(mav.opts) = { type: "uint8_t" }];
  // Hardware minor version number.
  uint32 hw_version_minor = 6 [(mav.opts) = { type: "uint8_t" }];
  // Hardware unique 128-bit ID.
  repeated uint32 hw_unique_id = 7 [(mav.opts) = { type: "uint8_t[16]" }];
  // Software major version number.
  uint32 sw_version_major = 8 [(mav.opts) = { type: "uint8_t" }];
  // Software minor version number.
  uint32 sw_version_minor = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Request to read the value of a parameter with the either the param_id string id or param_index.
message PARAM_EXT_REQUEST_READ {  // MavLink id: 320
  option (mav.message).id = 320;
  // Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)
  int32 param_index = 1 [(mav.opts) = { type: "int16_t" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 4 [(mav.opts) = { type: "char[16]" }];
}

// Request all parameters of this component. After this request, all parameters are emitted.
message PARAM_EXT_REQUEST_LIST {  // MavLink id: 321
  option (mav.message).id = 321;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.
message PARAM_EXT_VALUE {  // MavLink id: 322
  option (mav.message).id = 322;
  // Total number of parameters
  uint32 param_count = 1 [(mav.opts) = { type: "uint16_t" }];
  // Index of this parameter
  uint32 param_index = 2 [(mav.opts) = { type: "uint16_t" }];
  // Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 3 [(mav.opts) = { type: "char[16]" }];
  // Parameter value
  string param_value = 4 [(mav.opts) = { type: "char[128]" }];
  // Parameter type.
  MAV_PARAM_EXT_TYPE param_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_PARAM_EXT_TYPE" }];
}

// Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.
message PARAM_EXT_SET {  // MavLink id: 323
  option (mav.message).id = 323;
  // System ID
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 3 [(mav.opts) = { type: "char[16]" }];
  // Parameter value
  string param_value = 4 [(mav.opts) = { type: "char[128]" }];
  // Parameter type.
  MAV_PARAM_EXT_TYPE param_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_PARAM_EXT_TYPE" }];
}

// Response from a PARAM_EXT_SET message.
message PARAM_EXT_ACK {  // MavLink id: 324
  option (mav.message).id = 324;
  // Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
  string param_id = 1 [(mav.opts) = { type: "char[16]" }];
  // Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)
  string param_value = 2 [(mav.opts) = { type: "char[128]" }];
  // Parameter type.
  MAV_PARAM_EXT_TYPE param_type = 3 [(mav.opts) = { type: "uint8_t", enum: "MAV_PARAM_EXT_TYPE" }];
  // Result code.
  PARAM_ACK param_result = 4 [(mav.opts) = { type: "uint8_t", enum: "PARAM_ACK" }];
}

// Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
message OBSTACLE_DISTANCE {  // MavLink id: 330
  option (mav.message).id = 330;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
  repeated uint32 distances = 2 [(mav.opts) = { type: "uint16_t[72]" }];
  // Minimum distance the sensor can measure.
  uint32 min_distance = 3 [(mav.opts) = { type: "uint16_t" }];
  // Maximum distance the sensor can measure.
  uint32 max_distance = 4 [(mav.opts) = { type: "uint16_t" }];
  // Class id of the distance sensor type.
  MAV_DISTANCE_SENSOR sensor_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_DISTANCE_SENSOR" }];
  // Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.
  uint32 increment = 6 [(mav.opts) = { type: "uint8_t" }];
}

// Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).
message ODOMETRY {  // MavLink id: 331
  option (mav.message).id = 331;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X Position
  float x = 2 [(mav.opts) = { type: "float" }];
  // Y Position
  float y = 3 [(mav.opts) = { type: "float" }];
  // Z Position
  float z = 4 [(mav.opts) = { type: "float" }];
  // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
  repeated float q = 5 [(mav.opts) = { type: "float[4]" }];
  // X linear speed
  float vx = 6 [(mav.opts) = { type: "float" }];
  // Y linear speed
  float vy = 7 [(mav.opts) = { type: "float" }];
  // Z linear speed
  float vz = 8 [(mav.opts) = { type: "float" }];
  // Roll angular speed
  float rollspeed = 9 [(mav.opts) = { type: "float" }];
  // Pitch angular speed
  float pitchspeed = 10 [(mav.opts) = { type: "float" }];
  // Yaw angular speed
  float yawspeed = 11 [(mav.opts) = { type: "float" }];
  // Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
  repeated float pose_covariance = 12 [(mav.opts) = { type: "float[21]" }];
  // Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
  repeated float velocity_covariance = 13 [(mav.opts) = { type: "float[21]" }];
  // Coordinate frame of reference for the pose data.
  MAV_FRAME frame_id = 14 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
  // Coordinate frame of reference for the velocity in free space (twist) data.
  MAV_FRAME child_frame_id = 15 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Describe a trajectory using an array of up-to 5 waypoints in the local frame (MAV_FRAME_LOCAL_NED).
message TRAJECTORY_REPRESENTATION_WAYPOINTS {  // MavLink id: 332
  option (mav.message).id = 332;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X-coordinate of waypoint, set to NaN if not being used
  repeated float pos_x = 2 [(mav.opts) = { type: "float[5]" }];
  // Y-coordinate of waypoint, set to NaN if not being used
  repeated float pos_y = 3 [(mav.opts) = { type: "float[5]" }];
  // Z-coordinate of waypoint, set to NaN if not being used
  repeated float pos_z = 4 [(mav.opts) = { type: "float[5]" }];
  // X-velocity of waypoint, set to NaN if not being used
  repeated float vel_x = 5 [(mav.opts) = { type: "float[5]" }];
  // Y-velocity of waypoint, set to NaN if not being used
  repeated float vel_y = 6 [(mav.opts) = { type: "float[5]" }];
  // Z-velocity of waypoint, set to NaN if not being used
  repeated float vel_z = 7 [(mav.opts) = { type: "float[5]" }];
  // X-acceleration of waypoint, set to NaN if not being used
  repeated float acc_x = 8 [(mav.opts) = { type: "float[5]" }];
  // Y-acceleration of waypoint, set to NaN if not being used
  repeated float acc_y = 9 [(mav.opts) = { type: "float[5]" }];
  // Z-acceleration of waypoint, set to NaN if not being used
  repeated float acc_z = 10 [(mav.opts) = { type: "float[5]" }];
  // Yaw angle, set to NaN if not being used
  repeated float pos_yaw = 11 [(mav.opts) = { type: "float[5]" }];
  // Yaw rate, set to NaN if not being used
  repeated float vel_yaw = 12 [(mav.opts) = { type: "float[5]" }];
  // Scheduled action for each waypoint, UINT16_MAX if not being used.
  repeated MAV_CMD command = 13 [(mav.opts) = { type: "uint16_t[5]", enum: "MAV_CMD" }];
  // Number of valid points (up-to 5 waypoints are possible)
  uint32 valid_points = 14 [(mav.opts) = { type: "uint8_t" }];
}

// Describe a trajectory using an array of up-to 5 bezier control points in the local frame (MAV_FRAME_LOCAL_NED).
message TRAJECTORY_REPRESENTATION_BEZIER {  // MavLink id: 333
  option (mav.message).id = 333;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // X-coordinate of bezier control points. Set to NaN if not being used
  repeated float pos_x = 2 [(mav.opts) = { type: "float[5]" }];
  // Y-coordinate of bezier control points. Set to NaN if not being used
  repeated float pos_y = 3 [(mav.opts) = { type: "float[5]" }];
  // Z-coordinate of bezier control points. Set to NaN if not being used
  repeated float pos_z = 4 [(mav.opts) = { type: "float[5]" }];
  // Bezier time horizon. Set to NaN if velocity/acceleration should not be incorporated
  repeated float delta = 5 [(mav.opts) = { type: "float[5]" }];
  // Yaw. Set to NaN for unchanged
  repeated float pos_yaw = 6 [(mav.opts) = { type: "float[5]" }];
  // Number of valid control points (up-to 5 points are possible)
  uint32 valid_points = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Report current used cellular network status
message CELLULAR_STATUS {  // MavLink id: 334
  option (mav.message).id = 334;
  // Mobile country code. If unknown, set to UINT16_MAX
  uint32 mcc = 1 [(mav.opts) = { type: "uint16_t" }];
  // Mobile network code. If unknown, set to UINT16_MAX
  uint32 mnc = 2 [(mav.opts) = { type: "uint16_t" }];
  // Location area code. If unknown, set to 0
  uint32 lac = 3 [(mav.opts) = { type: "uint16_t" }];
  // Cellular modem status
  CELLULAR_STATUS_FLAG status = 4 [(mav.opts) = { type: "uint8_t", enum: "CELLULAR_STATUS_FLAG" }];
  // Failure reason when status in in CELLUAR_STATUS_FAILED
  CELLULAR_NETWORK_FAILED_REASON failure_reason = 5 [(mav.opts) = { type: "uint8_t", enum: "CELLULAR_NETWORK_FAILED_REASON" }];
  // Cellular network radio type: gsm, cdma, lte...
  CELLULAR_NETWORK_RADIO_TYPE type = 6 [(mav.opts) = { type: "uint8_t", enum: "CELLULAR_NETWORK_RADIO_TYPE" }];
  // Signal quality in percent. If unknown, set to UINT8_MAX
  uint32 quality = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Status of the Iridium SBD link.
message ISBD_LINK_STATUS {  // MavLink id: 335
  option (mav.message).id = 335;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 timestamp = 1 [(mav.opts) = { type: "uint64_t" }];
  // Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 last_heartbeat = 2 [(mav.opts) = { type: "uint64_t" }];
  // Number of failed SBD sessions.
  uint32 failed_sessions = 3 [(mav.opts) = { type: "uint16_t" }];
  // Number of successful SBD sessions.
  uint32 successful_sessions = 4 [(mav.opts) = { type: "uint16_t" }];
  // Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.
  uint32 signal_quality = 5 [(mav.opts) = { type: "uint8_t" }];
  // 1: Ring call pending, 0: No call pending.
  uint32 ring_pending = 6 [(mav.opts) = { type: "uint8_t" }];
  // 1: Transmission session pending, 0: No transmission session pending.
  uint32 tx_session_pending = 7 [(mav.opts) = { type: "uint8_t" }];
  // 1: Receiving session pending, 0: No receiving session pending.
  uint32 rx_session_pending = 8 [(mav.opts) = { type: "uint8_t" }];
}

// Configure cellular modems. This message is re-emitted as an acknowledgement by the modem. The message may also be explicitly requested using MAV_CMD_REQUEST_MESSAGE.
message CELLULAR_CONFIG {  // MavLink id: 336
  option (mav.message).id = 336;
  // Enable / disable PIN on the SIM card. 0: Unchange setttings 1: PIN disabled, 2: PIN enabled.
  uint32 enable_pin = 1 [(mav.opts) = { type: "uint8_t" }];
  // PIN sent to the simcard. Blank when PIN is disabled. Empty when message is sent back as a response.
  string pin = 2 [(mav.opts) = { type: "char[32]" }];
  // Name of the cellular APN. Blank to leave it unchanged when setting. Current APN when sent back as a response.
  string apn = 3 [(mav.opts) = { type: "char[32]" }];
  // Required PUK code in case the user failed to authenticate 3 times with the PIN.
  string puk = 4 [(mav.opts) = { type: "char[32]" }];
  // Configure whether roaming is allowed, 0: settings not changed, 1: roaming disabled, 2: roaming enabled.
  uint32 roaming = 5 [(mav.opts) = { type: "uint8_t" }];
  // Message acceptance response (sent back to GS).
  CELLULAR_CONFIG_RESPONSE response = 6 [(mav.opts) = { type: "uint8_t", enum: "CELLULAR_CONFIG_RESPONSE" }];
}

// RPM sensor data message.
message RAW_RPM {  // MavLink id: 339
  option (mav.message).id = 339;
  // Indicated rate
  float frequency = 1 [(mav.opts) = { type: "float" }];
  // Index of this RPM sensor (0-indexed)
  uint32 index = 2 [(mav.opts) = { type: "uint8_t" }];
}

// The global position resulting from GPS and sensor fusion.
message UTM_GLOBAL_POSITION {  // MavLink id: 340
  option (mav.message).id = 340;
  // Time of applicability of position (microseconds since UNIX epoch).
  uint64 time = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude (WGS84)
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude (WGS84)
  int32 lon = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (WGS84)
  int32 alt = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude above ground
  int32 relative_alt = 5 [(mav.opts) = { type: "int32_t" }];
  // Next waypoint, latitude (WGS84)
  int32 next_lat = 6 [(mav.opts) = { type: "int32_t" }];
  // Next waypoint, longitude (WGS84)
  int32 next_lon = 7 [(mav.opts) = { type: "int32_t" }];
  // Next waypoint, altitude (WGS84)
  int32 next_alt = 8 [(mav.opts) = { type: "int32_t" }];
  // Ground X speed (latitude, positive north)
  int32 vx = 9 [(mav.opts) = { type: "int16_t" }];
  // Ground Y speed (longitude, positive east)
  int32 vy = 10 [(mav.opts) = { type: "int16_t" }];
  // Ground Z speed (altitude, positive down)
  int32 vz = 11 [(mav.opts) = { type: "int16_t" }];
  // Horizontal position uncertainty (standard deviation)
  uint32 h_acc = 12 [(mav.opts) = { type: "uint16_t" }];
  // Altitude uncertainty (standard deviation)
  uint32 v_acc = 13 [(mav.opts) = { type: "uint16_t" }];
  // Speed uncertainty (standard deviation)
  uint32 vel_acc = 14 [(mav.opts) = { type: "uint16_t" }];
  // Time until next update. Set to 0 if unknown or in data driven mode.
  uint32 update_rate = 15 [(mav.opts) = { type: "uint16_t" }];
  // Unique UAS ID.
  repeated uint32 uas_id = 16 [(mav.opts) = { type: "uint8_t[18]" }];
  // Flight state
  UTM_FLIGHT_STATE flight_state = 17 [(mav.opts) = { type: "uint8_t", enum: "UTM_FLIGHT_STATE" }];
  // Bitwise OR combination of the data available flags.
  // bitfield defined by enum UTM_DATA_AVAIL_FLAGS
  uint32 flags = 18 [(mav.opts) = { type: "uint8_t", enum: "UTM_DATA_AVAIL_FLAGS" }];
}

// Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.
message DEBUG_FLOAT_ARRAY {  // MavLink id: 350
  option (mav.message).id = 350;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Unique ID used to discriminate between arrays
  uint32 array_id = 2 [(mav.opts) = { type: "uint16_t" }];
  // Name, for human-friendly display in a Ground Control Station
  string name = 3 [(mav.opts) = { type: "char[10]" }];
}

// Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
message ORBIT_EXECUTION_STATUS {  // MavLink id: 360
  option (mav.message).id = 360;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.
  float radius = 2 [(mav.opts) = { type: "float" }];
  // X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
  int32 x = 3 [(mav.opts) = { type: "int32_t" }];
  // Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
  int32 y = 4 [(mav.opts) = { type: "int32_t" }];
  // Altitude of center point. Coordinate system depends on frame field.
  float z = 5 [(mav.opts) = { type: "float" }];
  // The coordinate system of the fields: x, y, z.
  MAV_FRAME frame = 6 [(mav.opts) = { type: "uint8_t", enum: "MAV_FRAME" }];
}

// Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.
message SMART_BATTERY_INFO {  // MavLink id: 370
  option (mav.message).id = 370;
  // Capacity when full according to manufacturer, -1: field not provided.
  int32 capacity_full_specification = 1 [(mav.opts) = { type: "int32_t" }];
  // Capacity when full (accounting for battery degradation), -1: field not provided.
  int32 capacity_full = 2 [(mav.opts) = { type: "int32_t" }];
  // Serial number. -1: field not provided.
  int32 serial_number = 3 [(mav.opts) = { type: "int32_t" }];
  // Charge/discharge cycle count. -1: field not provided.
  uint32 cycle_count = 4 [(mav.opts) = { type: "uint16_t" }];
  // Battery weight. 0: field not provided.
  uint32 weight = 5 [(mav.opts) = { type: "uint16_t" }];
  // Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.
  uint32 discharge_minimum_voltage = 6 [(mav.opts) = { type: "uint16_t" }];
  // Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.
  uint32 charging_minimum_voltage = 7 [(mav.opts) = { type: "uint16_t" }];
  // Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.
  uint32 resting_minimum_voltage = 8 [(mav.opts) = { type: "uint16_t" }];
  // Battery ID
  uint32 id = 9 [(mav.opts) = { type: "uint8_t" }];
  // Static device name. Encode as manufacturer and product names separated using an underscore.
  string device_name = 10 [(mav.opts) = { type: "char[50]" }];
}

// Smart Battery information (dynamic). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.
message SMART_BATTERY_STATUS {  // MavLink id: 371
  option (mav.message).id = 371;
  // Fault/health indications.
  // bitfield defined by enum MAV_SMART_BATTERY_FAULT
  int32 fault_bitmask = 1 [(mav.opts) = { type: "int32_t", enum: "MAV_SMART_BATTERY_FAULT" }];
  // Estimated remaining battery time. -1: field not provided.
  int32 time_remaining = 2 [(mav.opts) = { type: "int32_t" }];
  // Battery ID
  uint32 id = 3 [(mav.opts) = { type: "uint16_t" }];
  // Remaining battery energy. Values: [0-100], -1: field not provided.
  int32 capacity_remaining = 4 [(mav.opts) = { type: "int16_t" }];
  // Battery current (through all cells/loads). Positive if discharging, negative if charging. UINT16_MAX: field not provided.
  int32 current = 5 [(mav.opts) = { type: "int16_t" }];
  // Battery temperature. -1: field not provided.
  int32 temperature = 6 [(mav.opts) = { type: "int16_t" }];
  // The cell number of the first index in the 'voltages' array field. Using this field allows you to specify cell voltages for batteries with more than 16 cells.
  uint32 cell_offset = 7 [(mav.opts) = { type: "uint16_t" }];
  // Individual cell voltages. Batteries with more 16 cells can use the cell_offset field to specify the cell offset for the array specified in the current message . Index values above the valid cell count for this battery should have the UINT16_MAX value.
  repeated uint32 voltages = 8 [(mav.opts) = { type: "uint16_t[16]" }];
}

// Telemetry of power generation system. Alternator or mechanical generator.
message GENERATOR_STATUS {  // MavLink id: 373
  option (mav.message).id = 373;
  // Status flags.
  // bitfield defined by enum MAV_GENERATOR_STATUS_FLAG
  uint64 status = 1 [(mav.opts) = { type: "uint64_t", enum: "MAV_GENERATOR_STATUS_FLAG" }];
  // Current into/out of battery. Positive for out. Negative for in. NaN: field not provided.
  float battery_current = 2 [(mav.opts) = { type: "float" }];
  // Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided
  float load_current = 3 [(mav.opts) = { type: "float" }];
  // The power being generated. NaN: field not provided
  float power_generated = 4 [(mav.opts) = { type: "float" }];
  // Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus.
  float bus_voltage = 5 [(mav.opts) = { type: "float" }];
  // The target battery current. Positive for out. Negative for in. NaN: field not provided
  float bat_current_setpoint = 6 [(mav.opts) = { type: "float" }];
  // Speed of electrical generator or alternator. UINT16_MAX: field not provided.
  uint32 generator_speed = 7 [(mav.opts) = { type: "uint16_t" }];
  // The temperature of the rectifier or power converter. INT16_MAX: field not provided.
  int32 rectifier_temperature = 8 [(mav.opts) = { type: "int16_t" }];
  // The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided.
  int32 generator_temperature = 9 [(mav.opts) = { type: "int16_t" }];
}

// The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.
message ACTUATOR_OUTPUT_STATUS {  // MavLink id: 375
  option (mav.message).id = 375;
  // Timestamp (since system boot).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Active outputs
  uint32 active = 2 [(mav.opts) = { type: "uint32_t" }];
  // Servo / motor output array values. Zero values indicate unused channels.
  repeated float actuator = 3 [(mav.opts) = { type: "float[32]" }];
}

// Time/duration estimates for various events and actions given the current vehicle state and position.
message TIME_ESTIMATE_TO_TARGET {  // MavLink id: 380
  option (mav.message).id = 380;
  // Estimated time to complete the vehicle's configured "safe return" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.
  int32 safe_return = 1 [(mav.opts) = { type: "int32_t" }];
  // Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.
  int32 land = 2 [(mav.opts) = { type: "int32_t" }];
  // Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.
  int32 mission_next_item = 3 [(mav.opts) = { type: "int32_t" }];
  // Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.
  int32 mission_end = 4 [(mav.opts) = { type: "int32_t" }];
  // Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.
  int32 commanded_action = 5 [(mav.opts) = { type: "int32_t" }];
}

// Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.
message TUNNEL {  // MavLink id: 385
  option (mav.message).id = 385;
  // A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
  MAV_TUNNEL_PAYLOAD_TYPE payload_type = 1 [(mav.opts) = { type: "uint16_t", enum: "MAV_TUNNEL_PAYLOAD_TYPE" }];
  // System ID (can be 0 for broadcast, but this is discouraged)
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (can be 0 for broadcast, but this is discouraged)
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Length of the data transported in payload
  uint32 payload_length = 4 [(mav.opts) = { type: "uint8_t" }];
  // Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.
  repeated uint32 payload = 5 [(mav.opts) = { type: "uint8_t[128]" }];
}

// Hardware status sent by an onboard computer.
message ONBOARD_COMPUTER_STATUS {  // MavLink id: 390
  option (mav.message).id = 390;
  // Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Time since system boot.
  uint32 uptime = 2 [(mav.opts) = { type: "uint32_t" }];
  // Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
  uint32 ram_usage = 3 [(mav.opts) = { type: "uint32_t" }];
  // Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
  uint32 ram_total = 4 [(mav.opts) = { type: "uint32_t" }];
  // Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
  repeated uint32 storage_type = 5 [(mav.opts) = { type: "uint32_t[4]" }];
  // Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 storage_usage = 6 [(mav.opts) = { type: "uint32_t[4]" }];
  // Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 storage_total = 7 [(mav.opts) = { type: "uint32_t[4]" }];
  // Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary
  repeated uint32 link_type = 8 [(mav.opts) = { type: "uint32_t[6]" }];
  // Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 link_tx_rate = 9 [(mav.opts) = { type: "uint32_t[6]" }];
  // Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 link_rx_rate = 10 [(mav.opts) = { type: "uint32_t[6]" }];
  // Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 link_tx_max = 11 [(mav.opts) = { type: "uint32_t[6]" }];
  // Network capacity to the component system. A value of UINT32_MAX implies the field is unused.
  repeated uint32 link_rx_max = 12 [(mav.opts) = { type: "uint32_t[6]" }];
  // Fan speeds. A value of INT16_MAX implies the field is unused.
  repeated int32 fan_speed = 13 [(mav.opts) = { type: "int16_t[4]" }];
  // Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
  uint32 type = 14 [(mav.opts) = { type: "uint8_t" }];
  // CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
  repeated uint32 cpu_cores = 15 [(mav.opts) = { type: "uint8_t[8]" }];
  // Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
  repeated uint32 cpu_combined = 16 [(mav.opts) = { type: "uint8_t[10]" }];
  // GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
  repeated uint32 gpu_cores = 17 [(mav.opts) = { type: "uint8_t[4]" }];
  // Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
  repeated uint32 gpu_combined = 18 [(mav.opts) = { type: "uint8_t[10]" }];
  // Temperature of the board. A value of INT8_MAX implies the field is unused.
  int32 temperature_board = 19 [(mav.opts) = { type: "int8_t" }];
  // Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
  repeated int32 temperature_core = 20 [(mav.opts) = { type: "int8_t[8]" }];
}

// Information about a component. For camera components instead use CAMERA_INFORMATION, and for autopilots use AUTOPILOT_VERSION. Components including GCSes should consider supporting requests of this message via MAV_CMD_REQUEST_MESSAGE.
message COMPONENT_INFORMATION {  // MavLink id: 395
  option (mav.message).id = 395;
  // Timestamp (time since system boot).
  uint32 time_boot_ms = 1 [(mav.opts) = { type: "uint32_t" }];
  // The type of metadata being requested.
  COMP_METADATA_TYPE metadata_type = 2 [(mav.opts) = { type: "uint32_t", enum: "COMP_METADATA_TYPE" }];
  // Unique uid for this metadata which a gcs can use for created cached metadata and understanding whether it's cache it up to date or whether it needs to download new data.
  uint32 metadata_uid = 3 [(mav.opts) = { type: "uint32_t" }];
  // Unique uid for the translation file associated with the metadata.
  uint32 translation_uid = 4 [(mav.opts) = { type: "uint32_t" }];
  // Component definition URI. If prefix mavlinkftp:// file is downloaded from vehicle over mavlink ftp protocol. If prefix http[s]:// file is downloaded over internet. Files are json format. They can end in .gz to indicate file is in gzip format.
  string metadata_uri = 5 [(mav.opts) = { type: "char[70]" }];
  // The translations for strings within the metadata file. If null the either do not exist or may be included in the metadata file itself. The translations specified here supercede any which may be in the metadata file itself. The uri format is the same as component_metadata_uri . Files are in Json Translation spec format. Empty string indicates no tranlsation file.
  string translation_uri = 6 [(mav.opts) = { type: "char[70]" }];
}

// Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.
message PLAY_TUNE_V2 {  // MavLink id: 400
  option (mav.message).id = 400;
  // Tune format
  // bitfield defined by enum TUNE_FORMAT
  uint32 format = 1 [(mav.opts) = { type: "uint32_t", enum: "TUNE_FORMAT" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Tune definition as a NULL-terminated string.
  string tune = 4 [(mav.opts) = { type: "char[248]" }];
}

// Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.
message SUPPORTED_TUNES {  // MavLink id: 401
  option (mav.message).id = 401;
  // Bitfield of supported tune formats.
  // bitfield defined by enum TUNE_FORMAT
  uint32 format = 1 [(mav.opts) = { type: "uint32_t", enum: "TUNE_FORMAT" }];
  // System ID
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Cumulative distance traveled for each reported wheel.
message WHEEL_DISTANCE {  // MavLink id: 9000
  option (mav.message).id = 9000;
  // Timestamp (synced to UNIX time or since system boot).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.
  repeated double distance = 2 [(mav.opts) = { type: "double[16]" }];
  // Number of wheels reported.
  uint32 count = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c. These messages are compatible with the ASTM Remote ID standard at https://www.astm.org/Standards/F3411.htm and the ASD-STAN Direct Remote ID standard. The usage of these messages is documented at https://mavlink.io/en/services/opendroneid.html.
message OPEN_DRONE_ID_BASIC_ID {  // MavLink id: 12900
  option (mav.message).id = 12900;
  // System ID (0 for broadcast).
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 3 [(mav.opts) = { type: "uint8_t[20]" }];
  // Indicates the format for the uas_id field of this message.
  MAV_ODID_ID_TYPE id_type = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_ID_TYPE" }];
  // Indicates the type of UA (Unmanned Aircraft).
  MAV_ODID_UA_TYPE ua_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_UA_TYPE" }];
  // UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.
  repeated uint32 uas_id = 6 [(mav.opts) = { type: "uint8_t[20]" }];
}

// Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
message OPEN_DRONE_ID_LOCATION {  // MavLink id: 12901
  option (mav.message).id = 12901;
  // Current latitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
  int32 latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Current longitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon).
  int32 longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.
  float altitude_barometric = 3 [(mav.opts) = { type: "float" }];
  // The geodetic altitude as defined by WGS84. If unknown: -1000 m.
  float altitude_geodetic = 4 [(mav.opts) = { type: "float" }];
  // The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.
  float height = 5 [(mav.opts) = { type: "float" }];
  // Seconds after the full hour with reference to UTC time. Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000.
  float timestamp = 6 [(mav.opts) = { type: "float" }];
  // Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees. If unknown: 36100 centi-degrees.
  uint32 direction = 7 [(mav.opts) = { type: "uint16_t" }];
  // Ground speed. Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s.
  uint32 speed_horizontal = 8 [(mav.opts) = { type: "uint16_t" }];
  // The vertical speed. Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s.
  int32 speed_vertical = 9 [(mav.opts) = { type: "int16_t" }];
  // System ID (0 for broadcast).
  uint32 target_system = 10 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 11 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 12 [(mav.opts) = { type: "uint8_t[20]" }];
  // Indicates whether the unmanned aircraft is on the ground or in the air.
  MAV_ODID_STATUS status = 13 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_STATUS" }];
  // Indicates the reference point for the height field.
  MAV_ODID_HEIGHT_REF height_reference = 14 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_HEIGHT_REF" }];
  // The accuracy of the horizontal position.
  MAV_ODID_HOR_ACC horizontal_accuracy = 15 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_HOR_ACC" }];
  // The accuracy of the vertical position.
  MAV_ODID_VER_ACC vertical_accuracy = 16 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_VER_ACC" }];
  // The accuracy of the barometric altitude.
  MAV_ODID_VER_ACC barometer_accuracy = 17 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_VER_ACC" }];
  // The accuracy of the horizontal and vertical speed.
  MAV_ODID_SPEED_ACC speed_accuracy = 18 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_SPEED_ACC" }];
  // The accuracy of the timestamps.
  MAV_ODID_TIME_ACC timestamp_accuracy = 19 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_TIME_ACC" }];
}

// Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. Five data pages are supported. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 4, PageCount, Length and TimeStamp are not present and the size of AuthData is 23 bytes.
message OPEN_DRONE_ID_AUTHENTICATION {  // MavLink id: 12902
  option (mav.message).id = 12902;
  // This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
  uint32 timestamp = 1 [(mav.opts) = { type: "uint32_t" }];
  // System ID (0 for broadcast).
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 4 [(mav.opts) = { type: "uint8_t[20]" }];
  // Indicates the type of authentication.
  MAV_ODID_AUTH_TYPE authentication_type = 5 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_AUTH_TYPE" }];
  // Allowed range is 0 - 4.
  uint32 data_page = 6 [(mav.opts) = { type: "uint8_t" }];
  // This field is only present for page 0. Allowed range is 0 - 5.
  uint32 page_count = 7 [(mav.opts) = { type: "uint8_t" }];
  // This field is only present for page 0. Total bytes of authentication_data from all data pages. Allowed range is 0 - 109 (17 + 23*4).
  uint32 length = 8 [(mav.opts) = { type: "uint8_t" }];
  // Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.
  repeated uint32 authentication_data = 9 [(mav.opts) = { type: "uint8_t[23]" }];
}

// Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner.
message OPEN_DRONE_ID_SELF_ID {  // MavLink id: 12903
  option (mav.message).id = 12903;
  // System ID (0 for broadcast).
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 3 [(mav.opts) = { type: "uint8_t[20]" }];
  // Indicates the type of the description field.
  MAV_ODID_DESC_TYPE description_type = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_DESC_TYPE" }];
  // Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
  string description = 5 [(mav.opts) = { type: "char[23]" }];
}

// Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location and possible aircraft group information.
message OPEN_DRONE_ID_SYSTEM {  // MavLink id: 12904
  option (mav.message).id = 12904;
  // Latitude of the operator. If unknown: 0 (both Lat/Lon).
  int32 operator_latitude = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude of the operator. If unknown: 0 (both Lat/Lon).
  int32 operator_longitude = 2 [(mav.opts) = { type: "int32_t" }];
  // Area Operations Ceiling relative to WGS84. If unknown: -1000 m.
  float area_ceiling = 3 [(mav.opts) = { type: "float" }];
  // Area Operations Floor relative to WGS84. If unknown: -1000 m.
  float area_floor = 4 [(mav.opts) = { type: "float" }];
  // Number of aircraft in the area, group or formation (default 1).
  uint32 area_count = 5 [(mav.opts) = { type: "uint16_t" }];
  // Radius of the cylindrical area of the group or formation (default 0).
  uint32 area_radius = 6 [(mav.opts) = { type: "uint16_t" }];
  // System ID (0 for broadcast).
  uint32 target_system = 7 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 8 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 9 [(mav.opts) = { type: "uint8_t[20]" }];
  // Specifies the operator location type.
  MAV_ODID_OPERATOR_LOCATION_TYPE operator_location_type = 10 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_OPERATOR_LOCATION_TYPE" }];
  // Specifies the classification type of the UA.
  MAV_ODID_CLASSIFICATION_TYPE classification_type = 11 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_CLASSIFICATION_TYPE" }];
  // When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the category of the UA.
  MAV_ODID_CATEGORY_EU category_eu = 12 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_CATEGORY_EU" }];
  // When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA.
  MAV_ODID_CLASS_EU class_eu = 13 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_CLASS_EU" }];
}

// Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.
message OPEN_DRONE_ID_OPERATOR_ID {  // MavLink id: 12905
  option (mav.message).id = 12905;
  // System ID (0 for broadcast).
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html.
  repeated uint32 id_or_mac = 3 [(mav.opts) = { type: "uint8_t[20]" }];
  // Indicates the type of the operator_id field.
  MAV_ODID_OPERATOR_ID_TYPE operator_id_type = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_ODID_OPERATOR_ID_TYPE" }];
  // Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
  string operator_id = 5 [(mav.opts) = { type: "char[20]" }];
}

// An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above messages descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking.
message OPEN_DRONE_ID_MESSAGE_PACK {  // MavLink id: 12915
  option (mav.message).id = 12915;
  // System ID (0 for broadcast).
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID (0 for broadcast).
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // This field must currently always be equal to 25 (bytes), since all encoded OpenDroneID messages are specificed to have this length.
  uint32 single_message_size = 3 [(mav.opts) = { type: "uint8_t" }];
  // Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 10.
  uint32 msg_pack_size = 4 [(mav.opts) = { type: "uint8_t" }];
  // Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.
  repeated uint32 messages = 5 [(mav.opts) = { type: "uint8_t[250]" }];
}

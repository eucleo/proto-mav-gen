syntax = "proto3";

package ardupilotmega;

import "mav.proto";

import "common.proto";
import "uavionix.proto";
import "icarous.proto";

enum ACCELCAL_VEHICLE_POS {
  // Not used in MavLink, make protobuf happy.
  ACCELCAL_VEHICLE_POS_UNDEFINED = 0;
  ACCELCAL_VEHICLE_POS_LEVEL = 1;
  ACCELCAL_VEHICLE_POS_LEFT = 2;
  ACCELCAL_VEHICLE_POS_RIGHT = 3;
  ACCELCAL_VEHICLE_POS_NOSEDOWN = 4;
  ACCELCAL_VEHICLE_POS_NOSEUP = 5;
  ACCELCAL_VEHICLE_POS_BACK = 6;
  ACCELCAL_VEHICLE_POS_SUCCESS = 16777215;
  ACCELCAL_VEHICLE_POS_FAILED = 16777216;
}

enum MAV_CMD {
  // Not used in MavLink, make protobuf happy.
  MAV_CMD_UNDEFINED = 0;
  // Navigate to waypoint.
  MAV_CMD_NAV_WAYPOINT = 16;
  // ***** START Params
  // Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
  // Acceptance radius (if the sphere with this radius is hit, the waypoint counts as reached)
  // 0 to pass through the WP, if > 0 radius to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
  // Desired yaw angle at waypoint (rotary wing). NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter around this waypoint an unlimited amount of time
  MAV_CMD_NAV_LOITER_UNLIM = 17;
  // ***** START Params
  // Empty
  // Empty
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
  // Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter around this waypoint for X turns
  MAV_CMD_NAV_LOITER_TURNS = 18;
  // ***** START Params
  // Number of turns.
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Loiter at the specified latitude, longitude and altitude for a certain amount of time. Multicopter vehicles stop at the point (within a vehicle-specific acceptance radius). Forward-only moving vehicles (e.g. fixed-wing) circle the point with the specified radius/direction. If the Heading Required parameter (2) is non-zero forward moving aircraft will only leave the loiter circle once heading towards the next waypoint.
  MAV_CMD_NAV_LOITER_TIME = 19;
  // ***** START Params
  // Loiter time (only starts once Lat, Lon and Alt is reached).
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, else counter-clockwise.
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Return to launch location
  MAV_CMD_NAV_RETURN_TO_LAUNCH = 20;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Land at location.
  MAV_CMD_NAV_LAND = 21;
  // ***** START Params
  // Minimum target altitude if landing is aborted (0 = undefined/use system default).
  // Precision land mode.
  // Empty
  // Desired yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude.
  // Longitude.
  // Landing altitude (ground level in current frame).
  // ***** END Params
  // Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.
  MAV_CMD_NAV_TAKEOFF = 22;
  // ***** START Params
  // Minimum pitch (if airspeed sensor present), desired pitch without sensor
  // Empty
  // Empty
  // Yaw angle (if magnetometer present), ignored without magnetometer. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Land at local position (local frame only)
  MAV_CMD_NAV_LAND_LOCAL = 23;
  // ***** START Params
  // Landing target number (if available)
  // Maximum accepted offset from desired landing position - computed magnitude from spherical coordinates: d = sqrt(x^2 + y^2 + z^2), which gives the maximum accepted distance between the desired landing position and the position where the vehicle is about to land
  // Landing descend rate
  // Desired yaw angle
  // Y-axis position
  // X-axis position
  // Z-axis / ground level position
  // ***** END Params
  // Takeoff from local position (local frame only)
  MAV_CMD_NAV_TAKEOFF_LOCAL = 24;
  // ***** START Params
  // Minimum pitch (if airspeed sensor present), desired pitch without sensor
  // Empty
  // Takeoff ascend rate
  // Yaw angle (if magnetometer or another yaw estimation source present), ignored without one of these
  // Y-axis position
  // X-axis position
  // Z-axis position
  // ***** END Params
  // Vehicle following, i.e. this waypoint represents the position of a moving vehicle
  MAV_CMD_NAV_FOLLOW = 25;
  // ***** START Params
  // Following logic to use (e.g. loitering or sinusoidal following) - depends on specific autopilot implementation
  // Ground speed of vehicle to be followed
  // Radius around waypoint. If positive loiter clockwise, else counter-clockwise
  // Desired yaw angle.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
  MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30;
  // ***** START Params
  // Climb or Descend (0 = Neutral, command completes when within 5m of this command's altitude, 1 = Climbing, command completes when at or above this command's altitude, 2 = Descending, command completes when at or below this command's altitude.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Desired altitude
  // ***** END Params
  // Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.
  MAV_CMD_NAV_LOITER_TO_ALT = 31;
  // ***** START Params
  // Leave loiter circle only once heading towards the next waypoint (0 = False)
  // Loiter radius around waypoint for forward-only moving vehicles (not multicopters). If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter.
  // Empty
  // Loiter circle exit location and/or path to next waypoint ("xtrack") for forward-only moving vehicles (not multicopters). 0 for the vehicle to converge towards the center xtrack when it leaves the loiter (the line between the centers of the current and next waypoint), 1 to converge to the direct line between the location that the vehicle exits the loiter radius and the next waypoint. Otherwise the angle (in degrees) between the tangent of the loiter circle and the center xtrack at which the vehicle must leave the loiter (and converge to the center xtrack). NaN to use the current system default xtrack behaviour.
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Begin following a target
  MAV_CMD_DO_FOLLOW = 32;
  // ***** START Params
  // System ID (of the FOLLOW_TARGET beacon). Send 0 to disable follow-me and return to the default position hold mode.
  // Reserved
  // Reserved
  // Altitude mode: 0: Keep current altitude, 1: keep altitude difference to target, 2: go to a fixed altitude above home.
  // Altitude above home. (used if mode=2)
  // Reserved
  // Time to land in which the MAV should go to the default position hold mode after a message RX timeout.
  // ***** END Params
  // Reposition the MAV after a follow target command has been sent
  MAV_CMD_DO_FOLLOW_REPOSITION = 33;
  // ***** START Params
  // Camera q1 (where 0 is on the ray from the camera to the tracking device)
  // Camera q2
  // Camera q3
  // Camera q4
  // altitude offset from target
  // X offset from target
  // Y offset from target
  // ***** END Params
  // Start orbiting on the circumference of a circle defined by the parameters. Setting any value NaN results in using defaults.
  MAV_CMD_DO_ORBIT = 34;
  // ***** START Params
  // Radius of the circle. positive: Orbit clockwise. negative: Orbit counter-clockwise.
  // Tangential Velocity. NaN: Vehicle configuration default.
  // Yaw behavior of the vehicle.
  // Reserved (e.g. for dynamic center beacon options)
  // Center point latitude (if no MAV_FRAME specified) / X coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // Center point longitude (if no MAV_FRAME specified) / Y coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // Center point altitude (MSL) (if no MAV_FRAME specified) / Z coordinate according to MAV_FRAME. NaN: Use current vehicle position or current center if already orbiting.
  // ***** END Params
  // Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
  MAV_CMD_NAV_ROI = 80;
  // ***** START Params
  // Region of interest mode.
  // Waypoint index/ target ID. (see MAV_ROI enum)
  // ROI index (allows a vehicle to manage multiple ROI's)
  // Empty
  // x the location of the fixed ROI (see MAV_FRAME)
  // y
  // z
  // ***** END Params
  // Control autonomous path planning on the MAV.
  MAV_CMD_NAV_PATHPLANNING = 81;
  // ***** START Params
  // 0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning
  // 0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid
  // Empty
  // Yaw angle at goal
  // Latitude/X of goal
  // Longitude/Y of goal
  // Altitude/Z of goal
  // ***** END Params
  // Navigate to waypoint using a spline path.
  MAV_CMD_NAV_SPLINE_WAYPOINT = 82;
  // ***** START Params
  // Hold time. (ignored by fixed wing, time to stay at waypoint for rotary wing)
  // Empty
  // Empty
  // Empty
  // Latitude/X of goal
  // Longitude/Y of goal
  // Altitude/Z of goal
  // ***** END Params
  // Mission command to wait for an altitude or downwards vertical speed. This is meant for high altitude balloon launches, allowing the aircraft to be idle until either an altitude is reached or a negative vertical speed is reached (indicating early balloon burst). The wiggle time is how often to wiggle the control surfaces to prevent them seizing up.
  MAV_CMD_NAV_ALTITUDE_WAIT = 83;
  // ***** START Params
  // Altitude (m).
  // Descent speed (m/s).
  // Wiggle Time (s).
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Takeoff from ground using VTOL mode, and transition to forward flight with specified heading. The command should be ignored by vehicles that dont support both VTOL and fixed-wing flight (multicopters, boats,etc.).
  MAV_CMD_NAV_VTOL_TAKEOFF = 84;
  // ***** START Params
  // Empty
  // Front transition heading.
  // Empty
  // Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Land using VTOL mode
  MAV_CMD_NAV_VTOL_LAND = 85;
  // ***** START Params
  // Empty
  // Empty
  // Approach altitude (with the same reference as the Altitude field). NaN if unspecified.
  // Yaw angle. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.).
  // Latitude
  // Longitude
  // Altitude (ground level)
  // ***** END Params
  // hand control over to an external controller
  MAV_CMD_NAV_GUIDED_ENABLE = 92;
  // ***** START Params
  // On / Off (> 0.5f on)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Delay the next navigation command a number of seconds or until a specified time
  MAV_CMD_NAV_DELAY = 93;
  // ***** START Params
  // Delay (-1 to enable time-of-day fields)
  // hour (24h format, UTC, -1 to ignore)
  // minute (24h format, UTC, -1 to ignore)
  // second (24h format, UTC)
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
  MAV_CMD_NAV_PAYLOAD_PLACE = 94;
  // ***** START Params
  // Maximum distance to descend.
  // Empty
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
  MAV_CMD_NAV_LAST = 95;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Delay mission state machine.
  MAV_CMD_CONDITION_DELAY = 112;
  // ***** START Params
  // Delay
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.
  MAV_CMD_CONDITION_CHANGE_ALT = 113;
  // ***** START Params
  // Descent / Ascend rate.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Target Altitude
  // ***** END Params
  // Delay mission state machine until within desired distance of next NAV point.
  MAV_CMD_CONDITION_DISTANCE = 114;
  // ***** START Params
  // Distance.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Reach a certain target angle.
  MAV_CMD_CONDITION_YAW = 115;
  // ***** START Params
  // target angle, 0 is north
  // angular speed
  // direction: -1: counter clockwise, 1: clockwise
  // 0: absolute angle, 1: relative offset
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
  MAV_CMD_CONDITION_LAST = 159;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set system mode.
  MAV_CMD_DO_SET_MODE = 176;
  // ***** START Params
  // Mode
  // Custom mode - this is system specific, please refer to the individual autopilot specifications for details.
  // Custom sub mode - this is system specific, please refer to the individual autopilot specifications for details.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Jump to the desired command in the mission list.  Repeat this action only the specified number of times
  MAV_CMD_DO_JUMP = 177;
  // ***** START Params
  // Sequence number
  // Repeat count
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Change speed and/or throttle set points.
  MAV_CMD_DO_CHANGE_SPEED = 178;
  // ***** START Params
  // Speed type (0=Airspeed, 1=Ground Speed, 2=Climb Speed, 3=Descent Speed)
  // Speed (-1 indicates no change)
  // Throttle (-1 indicates no change)
  // 0: absolute, 1: relative
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Changes the home location either to the current location or a specified location.
  MAV_CMD_DO_SET_HOME = 179;
  // ***** START Params
  // Use current (1=use current location, 0=use specified location)
  // Empty
  // Empty
  // Yaw angle. NaN to use default heading
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
  MAV_CMD_DO_SET_PARAMETER = 180;
  // ***** START Params
  // Parameter number
  // Parameter value
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set a relay to a condition.
  MAV_CMD_DO_SET_RELAY = 181;
  // ***** START Params
  // Relay instance number.
  // Setting. (1=on, 0=off, others possible depending on system hardware)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Cycle a relay on and off for a desired number of cycles with a desired period.
  MAV_CMD_DO_REPEAT_RELAY = 182;
  // ***** START Params
  // Relay instance number.
  // Cycle count.
  // Cycle time.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set a servo to a desired PWM value.
  MAV_CMD_DO_SET_SERVO = 183;
  // ***** START Params
  // Servo instance number.
  // Pulse Width Modulation.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
  MAV_CMD_DO_REPEAT_SERVO = 184;
  // ***** START Params
  // Servo instance number.
  // Pulse Width Modulation.
  // Cycle count.
  // Cycle time.
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Terminate flight immediately
  MAV_CMD_DO_FLIGHTTERMINATION = 185;
  // ***** START Params
  // Flight termination activated if > 0.5
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Change altitude set point.
  MAV_CMD_DO_CHANGE_ALTITUDE = 186;
  // ***** START Params
  // Altitude
  // Frame of new altitude.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets actuators (e.g. servos) to a desired value. The actuator numbers are mapped to specific outputs (e.g. on any MAIN or AUX PWM or UAVCAN) using a flight-stack specific mechanism (i.e. a parameter).
  MAV_CMD_DO_SET_ACTUATOR = 187;
  // ***** START Params
  // Actuator 1 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 2 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 3 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 4 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 5 value, scaled from [-1 to 1]. NaN to ignore.
  // Actuator 6 value, scaled from [-1 to 1]. NaN to ignore.
  // Index of actuator set (i.e if set to 1, Actuator 1 becomes Actuator 7)
  // ***** END Params
  // Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
  MAV_CMD_DO_LAND_START = 189;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Empty
  // ***** END Params
  // Mission command to perform a landing from a rally point.
  MAV_CMD_DO_RALLY_LAND = 190;
  // ***** START Params
  // Break altitude
  // Landing speed
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to safely abort an autonomous landing.
  MAV_CMD_DO_GO_AROUND = 191;
  // ***** START Params
  // Altitude
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Reposition the vehicle to a specific WGS84 global position.
  MAV_CMD_DO_REPOSITION = 192;
  // ***** START Params
  // Ground speed, less than 0 (-1) for default
  // Bitmask of option flags.
  // Reserved
  // Yaw heading. NaN to use the current system yaw heading mode (e.g. yaw towards next waypoint, yaw to home, etc.). For planes indicates loiter direction (0: clockwise, 1: counter clockwise)
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // If in a GPS controlled position mode, hold the current position or continue.
  MAV_CMD_DO_PAUSE_CONTINUE = 193;
  // ***** START Params
  // 0: Pause current mission or reposition command, hold current position. 1: Continue mission. A VTOL capable vehicle should enter hover mode (multicopter and VTOL planes). A plane should loiter with the default loiter radius.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Set moving direction to forward or reverse.
  MAV_CMD_DO_SET_REVERSE = 194;
  // ***** START Params
  // Direction (0=Forward, 1=Reverse)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.
  MAV_CMD_DO_SET_ROI_LOCATION = 195;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Latitude of ROI location
  // Longitude of ROI location
  // Altitude of ROI location
  // ***** END Params
  // Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
  MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Pitch offset from next waypoint, positive tilting up
  // roll offset from next waypoint, positive banking to the right
  // yaw offset from next waypoint, positive panning to the right
  // ***** END Params
  // Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.
  MAV_CMD_DO_SET_ROI_NONE = 197;
  // ***** START Params
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
  MAV_CMD_DO_SET_ROI_SYSID = 198;
  // ***** START Params
  // System ID
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // Control onboard camera system.
  MAV_CMD_DO_CONTROL_VIDEO = 200;
  // ***** START Params
  // Camera ID (-1 for all)
  // Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw
  // Transmission mode: 0: video stream, >0: single images every n seconds
  // Recording: 0: disabled, 1: enabled compressed, 2: enabled raw
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
  MAV_CMD_DO_SET_ROI = 201;
  // ***** START Params
  // Region of interest mode.
  // Waypoint index/ target ID (depends on param 1).
  // Region of interest index. (allows a vehicle to manage multiple ROI's)
  // Empty
  // MAV_ROI_WPNEXT: pitch offset from next waypoint, MAV_ROI_LOCATION: latitude
  // MAV_ROI_WPNEXT: roll offset from next waypoint, MAV_ROI_LOCATION: longitude
  // MAV_ROI_WPNEXT: yaw offset from next waypoint, MAV_ROI_LOCATION: altitude
  // ***** END Params
  // Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
  MAV_CMD_DO_DIGICAM_CONFIGURE = 202;
  // ***** START Params
  // Modes: P, TV, AV, M, Etc.
  // Shutter speed: Divisor number for one second.
  // Aperture: F stop number.
  // ISO number e.g. 80, 100, 200, Etc.
  // Exposure type enumerator.
  // Command Identity.
  // Main engine cut-off time before camera trigger. (0 means no cut-off)
  // ***** END Params
  // Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
  MAV_CMD_DO_DIGICAM_CONTROL = 203;
  // ***** START Params
  // Session control e.g. show/hide lens
  // Zoom's absolute position
  // Zooming step value to offset zoom from the current position
  // Focus Locking, Unlocking or Re-locking
  // Shooting Command
  // Command Identity
  // Test shot identifier. If set to 1, image will only be captured, but not counted towards internal frame count.
  // ***** END Params
  // Mission command to configure a camera or antenna mount
  MAV_CMD_DO_MOUNT_CONFIGURE = 204;
  // ***** START Params
  // Mount operation mode
  // stabilize roll? (1 = yes, 0 = no)
  // stabilize pitch? (1 = yes, 0 = no)
  // stabilize yaw? (1 = yes, 0 = no)
  // roll input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // pitch input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // yaw input (0 = angle body frame, 1 = angular rate, 2 = angle absolute frame)
  // ***** END Params
  // Mission command to control a camera or antenna mount
  MAV_CMD_DO_MOUNT_CONTROL = 205;
  // ***** START Params
  // pitch depending on mount mode (degrees or degrees/second depending on pitch input).
  // roll depending on mount mode (degrees or degrees/second depending on roll input).
  // yaw depending on mount mode (degrees or degrees/second depending on yaw input).
  // altitude depending on mount mode.
  // latitude, set if appropriate mount mode.
  // longitude, set if appropriate mount mode.
  // Mount mode.
  // ***** END Params
  // Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
  MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206;
  // ***** START Params
  // Camera trigger distance. 0 to stop triggering.
  // Camera shutter integration time. -1 or 0 to ignore
  // Trigger camera once immediately. (0 = no trigger, 1 = trigger)
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to enable the geofence
  MAV_CMD_DO_FENCE_ENABLE = 207;
  // ***** START Params
  // enable? (0=disable, 1=enable, 2=disable_floor_only)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission item/command to release a parachute or enable/disable auto release.
  MAV_CMD_DO_PARACHUTE = 208;
  // ***** START Params
  // Action
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to perform motor test.
  MAV_CMD_DO_MOTOR_TEST = 209;
  // ***** START Params
  // Motor instance number. (from 1 to max number of motors on the vehicle)
  // Throttle type.
  // Throttle.
  // Timeout.
  // Motor count. (number of motors to test to test in sequence, waiting for the timeout above between them; 0=1 motor, 1=1 motor, 2=2 motors...)
  // Motor test order.
  // Empty
  // ***** END Params
  // Change to/from inverted flight.
  MAV_CMD_DO_INVERTED_FLIGHT = 210;
  // ***** START Params
  // Inverted flight. (0=normal, 1=inverted)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to operate EPM gripper.
  MAV_CMD_DO_GRIPPER = 211;
  // ***** START Params
  // Gripper number (a number from 1 to max number of grippers on the vehicle).
  // Gripper action (0=release, 1=grab. See GRIPPER_ACTIONS enum).
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Enable/disable autotune.
  MAV_CMD_DO_AUTOTUNE_ENABLE = 212;
  // ***** START Params
  // Enable (1: enable, 0:disable).
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Sets a desired vehicle turn angle and speed change.
  MAV_CMD_NAV_SET_YAW_SPEED = 213;
  // ***** START Params
  // Yaw angle to adjust steering by.
  // Speed.
  // Final angle. (0=absolute, 1=relative)
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
  MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214;
  // ***** START Params
  // Camera trigger cycle time. -1 or 0 to ignore.
  // Camera shutter integration time. Should be less than trigger cycle time. -1 or 0 to ignore.
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set the distance to be repeated on mission resume
  MAV_CMD_DO_SET_RESUME_REPEAT_DIST = 215;
  // ***** START Params
  // Distance.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Mission command to control a camera or antenna mount, using a quaternion as reference.
  MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220;
  // ***** START Params
  // quaternion param q1, w (1 in null-rotation)
  // quaternion param q2, x (0 in null-rotation)
  // quaternion param q3, y (0 in null-rotation)
  // quaternion param q4, z (0 in null-rotation)
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // set id of master controller
  MAV_CMD_DO_GUIDED_MASTER = 221;
  // ***** START Params
  // System ID
  // Component ID
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set limits for external control
  MAV_CMD_DO_GUIDED_LIMITS = 222;
  // ***** START Params
  // Timeout - maximum time that external controller will be allowed to control vehicle. 0 means no timeout.
  // Altitude (MSL) min - if vehicle moves below this alt, the command will be aborted and the mission will continue. 0 means no lower altitude limit.
  // Altitude (MSL) max - if vehicle moves above this alt, the command will be aborted and the mission will continue. 0 means no upper altitude limit.
  // Horizontal move limit - if vehicle moves more than this distance from its location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal move limit.
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
  MAV_CMD_DO_ENGINE_CONTROL = 223;
  // ***** START Params
  // 0: Stop engine, 1:Start Engine
  // 0: Warm start, 1:Cold start. Controls use of choke where applicable
  // Height delay. This is for commanding engine start only after the vehicle has gained the specified height. Used in VTOL vehicles during takeoff to start engine after the aircraft is off the ground. Zero for no delay.
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
  MAV_CMD_DO_SET_MISSION_CURRENT = 224;
  // ***** START Params
  // Mission sequence value to set
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
  MAV_CMD_DO_LAST = 240;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.
  MAV_CMD_PREFLIGHT_CALIBRATION = 241;
  // ***** START Params
  // 1: gyro calibration, 3: gyro temperature calibration
  // 1: magnetometer calibration
  // 1: ground pressure calibration
  // 1: radio RC calibration, 2: RC trim calibration
  // 1: accelerometer calibration, 2: board level calibration, 3: accelerometer temperature calibration, 4: simple accelerometer calibration
  // 1: APM: compass/motor interference calibration (PX4: airspeed calibration, deprecated), 2: airspeed calibration
  // 1: ESC calibration, 3: barometer temperature calibration
  // ***** END Params
  // Set sensor offsets. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242;
  // ***** START Params
  // Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer, 6: third magnetometer
  // X axis offset (or generic dimension 1), in the sensor's raw units
  // Y axis offset (or generic dimension 2), in the sensor's raw units
  // Z axis offset (or generic dimension 3), in the sensor's raw units
  // Generic dimension 4, in the sensor's raw units
  // Generic dimension 5, in the sensor's raw units
  // Generic dimension 6, in the sensor's raw units
  // ***** END Params
  // Trigger UAVCAN config. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_UAVCAN = 243;
  // ***** START Params
  // 1: Trigger actuator ID assignment and direction mapping.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
  MAV_CMD_PREFLIGHT_STORAGE = 245;
  // ***** START Params
  // Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults
  // Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults
  // Onboard logging: 0: Ignore, 1: Start default rate logging, -1: Stop logging, > 1: logging rate (e.g. set to 1000 for 1000 Hz logging)
  // Reserved
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Request the reboot or shutdown of system components.
  MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246;
  // ***** START Params
  // 0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot, 3: Reboot autopilot and keep it in the bootloader until upgraded.
  // 0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer, 3: Reboot onboard computer and keep it in the bootloader until upgraded.
  // WIP: 0: Do nothing for camera, 1: Reboot onboard camera, 2: Shutdown onboard camera, 3: Reboot onboard camera and keep it in the bootloader until upgraded
  // WIP: 0: Do nothing for mount (e.g. gimbal), 1: Reboot mount, 2: Shutdown mount, 3: Reboot mount and keep it in the bootloader until upgraded
  // Reserved (set to 0)
  // Reserved (set to 0)
  // WIP: ID (e.g. camera ID -1 for all IDs)
  // ***** END Params
  // Request a target system to start an upgrade of one (or all) of its components. For example, the command might be sent to a companion computer to cause it to upgrade a connected flight controller. The system doing the upgrade will report progress using the normal command protocol sequence for a long running operation. Command protocol information: https://mavlink.io/en/services/command.html.
  MAV_CMD_DO_UPGRADE = 247;
  // ***** START Params
  // Component id of the component to be upgraded. If set to 0, all components should be upgraded.
  // 0: Do not reboot component after the action is executed, 1: Reboot component after the action is executed.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // WIP: upgrade progress report rate (can be used for more granular control).
  // ***** END Params
  // Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.
  MAV_CMD_OVERRIDE_GOTO = 252;
  // ***** START Params
  // MAV_GOTO_DO_HOLD: pause mission and either hold or move to specified position (depending on param2), MAV_GOTO_DO_CONTINUE: resume mission.
  // MAV_GOTO_HOLD_AT_CURRENT_POSITION: hold at current position, MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position.
  // Coordinate frame of hold point.
  // Desired yaw angle.
  // Latitude/X position.
  // Longitude/Y position.
  // Altitude/Z position.
  // ***** END Params
  // start running a mission
  MAV_CMD_MISSION_START = 300;
  // ***** START Params
  // first_item: the first mission item to run
  // last_item:  the last mission item to run (after this item is run, the mission ends)
  // ***** END Params
  // Arms / Disarms a component
  MAV_CMD_COMPONENT_ARM_DISARM = 400;
  // ***** START Params
  // 0: disarm, 1: arm
  // 0: arm-disarm unless prevented by safety checks (i.e. when landed), 21196: force arming/disarming (e.g. allow arming to override preflight checks and disarming in flight)
  // ***** END Params
  // Turns illuminators ON/OFF. An illuminator is a light source that is used for lighting up dark areas external to the sytstem: e.g. a torch or searchlight (as opposed to a light source for illuminating the system itself, e.g. an indicator light).
  MAV_CMD_ILLUMINATOR_ON_OFF = 405;
  // ***** START Params
  // 0: Illuminators OFF, 1: Illuminators ON
  // ***** END Params
  // Request the home position from the vehicle.
  MAV_CMD_GET_HOME_POSITION = 410;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // Inject artificial failure for testing purposes. Note that autopilots should implement an additional protection before accepting this command such as a specific param setting.
  MAV_CMD_INJECT_FAILURE = 420;
  // ***** START Params
  // The unit which is affected by the failure.
  // The type how the failure manifests itself.
  // Instance affected by failure (0 to signal all).
  // ***** END Params
  // Starts receiver pairing.
  MAV_CMD_START_RX_PAIR = 500;
  // ***** START Params
  // 0:Spektrum.
  // RC type.
  // ***** END Params
  // Request the interval between messages for a particular MAVLink message ID. The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
  MAV_CMD_GET_MESSAGE_INTERVAL = 510;
  // ***** START Params
  // The MAVLink message ID
  // ***** END Params
  // Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.
  MAV_CMD_SET_MESSAGE_INTERVAL = 511;
  // ***** START Params
  // The MAVLink message ID
  // The interval between two messages. Set to -1 to disable and 0 to request default rate.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Target address of message stream (if message has target address fields). 0: Flight-stack default (recommended), 1: address of requestor, 2: broadcast.
  // ***** END Params
  // Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).
  MAV_CMD_REQUEST_MESSAGE = 512;
  // ***** START Params
  // The MAVLink message ID of the requested message.
  // Use for index ID, if required. Otherwise, the use of this parameter (if any) must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Target address for requested message (if message has target address fields). 0: Flight-stack default, 1: address of requestor, 2: broadcast.
  // ***** END Params
  // Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message
  MAV_CMD_REQUEST_PROTOCOL_VERSION = 519;
  // ***** START Params
  // 1: Request supported protocol versions by all nodes on the network
  // Reserved (all remaining params)
  // ***** END Params
  // Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
  MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520;
  // ***** START Params
  // 1: Request autopilot version
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera information (CAMERA_INFORMATION).
  MAV_CMD_REQUEST_CAMERA_INFORMATION = 521;
  // ***** START Params
  // 0: No action 1: Request camera capabilities
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera settings (CAMERA_SETTINGS).
  MAV_CMD_REQUEST_CAMERA_SETTINGS = 522;
  // ***** START Params
  // 0: No Action 1: Request camera settings
  // Reserved (all remaining params)
  // ***** END Params
  // Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
  MAV_CMD_REQUEST_STORAGE_INFORMATION = 525;
  // ***** START Params
  // Storage ID (0 for all, 1 for first, 2 for second, etc.)
  // 0: No Action 1: Request storage information
  // Reserved (all remaining params)
  // ***** END Params
  // Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.
  MAV_CMD_STORAGE_FORMAT = 526;
  // ***** START Params
  // Storage ID (1 for first, 2 for second, etc.)
  // Format storage (and reset image log). 0: No action 1: Format storage
  // Reset Image Log (without formatting storage medium). This will reset CAMERA_CAPTURE_STATUS.image_count and CAMERA_IMAGE_CAPTURED.image_index. 0: No action 1: Reset Image Log
  // Reserved (all remaining params)
  // ***** END Params
  // Request camera capture status (CAMERA_CAPTURE_STATUS)
  MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527;
  // ***** START Params
  // 0: No Action 1: Request camera capture status
  // Reserved (all remaining params)
  // ***** END Params
  // Request flight information (FLIGHT_INFORMATION)
  MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528;
  // ***** START Params
  // 1: Request flight information
  // Reserved (all remaining params)
  // ***** END Params
  // Reset all camera settings to Factory Default
  MAV_CMD_RESET_CAMERA_SETTINGS = 529;
  // ***** START Params
  // 0: No Action 1: Reset all settings
  // Reserved (all remaining params)
  // ***** END Params
  // Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
  MAV_CMD_SET_CAMERA_MODE = 530;
  // ***** START Params
  // Reserved (Set to 0)
  // Camera mode
  // ***** END Params
  // Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success).
  MAV_CMD_SET_CAMERA_ZOOM = 531;
  // ***** START Params
  // Zoom type
  // Zoom value. The range of valid values depend on the zoom type.
  // ***** END Params
  // Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success).
  MAV_CMD_SET_CAMERA_FOCUS = 532;
  // ***** START Params
  // Focus type
  // Focus value
  // ***** END Params
  // Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
  MAV_CMD_JUMP_TAG = 600;
  // ***** START Params
  // Tag.
  // ***** END Params
  // Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
  MAV_CMD_DO_JUMP_TAG = 601;
  // ***** START Params
  // Target tag to jump to.
  // Repeat count.
  // ***** END Params
  // High level setpoint to be sent to a gimbal manager to set a gimbal attitude. It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: a gimbal is never to react to this command but only the gimbal manager.
  MAV_CMD_DO_GIMBAL_MANAGER_TILTPAN = 1000;
  // ***** START Params
  // Tilt/pitch rate (positive to tilt up).
  // Pan/yaw rate (positive to pan to the right).
  // Tilt/pitch angle (positive to tilt up, relative to vehicle for PAN mode, relative to world horizon for HOLD mode).
  // Pan/yaw angle (positive to pan to the right, relative to vehicle for PAN mode, absolute to North for HOLD mode).
  // Gimbal manager flags to use.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // If the gimbal manager supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
  MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT = 1001;
  // ***** START Params
  // Point to track x value.
  // Point to track y value.
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // If the gimbal supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
  MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE = 1002;
  // ***** START Params
  // Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  // Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  // Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
  // Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // The use of this parameter (if any), must be defined in the requested message. By default assumed not used (0).
  // Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. (Send command multiple times for more than one but not all gimbals.)
  // ***** END Params
  // Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each capture. Use NaN for reserved values.
  MAV_CMD_IMAGE_START_CAPTURE = 2000;
  // ***** START Params
  // Reserved (Set to 0)
  // Desired elapsed time between two consecutive pictures (in seconds). Minimum values depend on hardware (typically greater than 2 seconds).
  // Total number of images to capture. 0 to capture forever/until MAV_CMD_IMAGE_STOP_CAPTURE.
  // Capture sequence number starting from 1. This is only valid for single-capture (param3 == 1). Increment the capture ID for each capture command to prevent double captures when a command is re-transmitted. Use 0 to ignore it.
  // Reserved (all remaining params)
  // ***** END Params
  // Stop image capture sequence Use NaN for reserved values.
  MAV_CMD_IMAGE_STOP_CAPTURE = 2001;
  // ***** START Params
  // Reserved (Set to 0)
  // ***** END Params
  // Re-request a CAMERA_IMAGE_CAPTURED message.
  MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE = 2002;
  // ***** START Params
  // Sequence number for missing CAMERA_IMAGE_CAPTURED message
  // ***** END Params
  // Enable or disable on-board camera triggering system.
  MAV_CMD_DO_TRIGGER_CONTROL = 2003;
  // ***** START Params
  // Trigger enable/disable (0 for disable, 1 for start), -1 to ignore
  // 1 to reset the trigger sequence, -1 or 0 to ignore
  // 1 to pause triggering, but without switching the camera off or retracting it. -1 to ignore
  // ***** END Params
  // Starts video capture (recording).
  MAV_CMD_VIDEO_START_CAPTURE = 2500;
  // ***** START Params
  // Video Stream ID (0 for all streams)
  // Frequency CAMERA_CAPTURE_STATUS messages should be sent while recording (0 for no messages, otherwise frequency)
  // ***** END Params
  // Stop the current video capture (recording).
  MAV_CMD_VIDEO_STOP_CAPTURE = 2501;
  // ***** START Params
  // Video Stream ID (0 for all streams)
  // ***** END Params
  // Start video streaming
  MAV_CMD_VIDEO_START_STREAMING = 2502;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Stop the given video stream
  MAV_CMD_VIDEO_STOP_STREAMING = 2503;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request video stream information (VIDEO_STREAM_INFORMATION)
  MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION = 2504;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request video stream status (VIDEO_STREAM_STATUS)
  MAV_CMD_REQUEST_VIDEO_STREAM_STATUS = 2505;
  // ***** START Params
  // Video Stream ID (0 for all streams, 1 for first, 2 for second, etc.)
  // ***** END Params
  // Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
  MAV_CMD_LOGGING_START = 2510;
  // ***** START Params
  // Format: 0: ULog
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  // Request to stop streaming log data over MAVLink
  MAV_CMD_LOGGING_STOP = 2511;
  // ***** START Params
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  MAV_CMD_AIRFRAME_CONFIGURATION = 2520;
  // ***** START Params
  // Landing gear ID (default: 0, -1 for all)
  // Landing gear position (Down: 0, Up: 1, NaN for no change)
  // ***** END Params
  // Request to start/stop transmitting over the high latency telemetry
  MAV_CMD_CONTROL_HIGH_LATENCY = 2600;
  // ***** START Params
  // Control transmission over high latency telemetry (0: stop, 1: start)
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // Empty
  // ***** END Params
  // Create a panorama at the current position
  MAV_CMD_PANORAMA_CREATE = 2800;
  // ***** START Params
  // Viewing angle horizontal of the panorama (+- 0.5 the total angle)
  // Viewing angle vertical of panorama.
  // Speed of the horizontal rotation.
  // Speed of the vertical rotation.
  // ***** END Params
  // Request VTOL transition
  MAV_CMD_DO_VTOL_TRANSITION = 3000;
  // ***** START Params
  // The target VTOL state. Only MAV_VTOL_STATE_MC and MAV_VTOL_STATE_FW can be used.
  // ***** END Params
  // Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request. If approved the progress of command_ack message should be set with period of time that this authorization is valid in seconds or in case it was denied it should be set with one of the reasons in ARM_AUTH_DENIED_REASON.
  //         
  MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001;
  // ***** START Params
  // Vehicle system id, this way ground station can request arm authorization on behalf of any vehicle
  // ***** END Params
  // This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
  //                   
  MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000;
  // This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
  //                   
  MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001;
  // ***** START Params
  // Radius of desired circle in CIRCLE_MODE
  // User defined
  // User defined
  // User defined
  // Target latitude of center of circle in CIRCLE_MODE
  // Target longitude of center of circle in CIRCLE_MODE
  // ***** END Params
  // Delay mission state machine until gate has been reached.
  MAV_CMD_CONDITION_GATE = 4501;
  // ***** START Params
  // Geometry: 0: orthogonal to path between previous and next waypoint.
  // Altitude: 0: ignore altitude
  // Empty
  // Empty
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Fence return point. There can only be one fence return point.
  //         
  MAV_CMD_NAV_FENCE_RETURN_POINT = 5000;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
  //         
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001;
  // ***** START Params
  // Polygon vertex count
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
  //         
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002;
  // ***** START Params
  // Polygon vertex count
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Circular fence area. The vehicle must stay inside this area.
  //         
  MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003;
  // ***** START Params
  // Radius.
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Circular fence area. The vehicle must stay outside this area.
  //         
  MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004;
  // ***** START Params
  // Radius.
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Reserved
  // ***** END Params
  // Rally point. You can have multiple rally points defined.
  //         
  MAV_CMD_NAV_RALLY_POINT = 5100;
  // ***** START Params
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Latitude
  // Longitude
  // Altitude
  // ***** END Params
  // Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.
  MAV_CMD_UAVCAN_GET_NODE_INFO = 5200;
  // ***** START Params
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // Reserved (set to 0)
  // ***** END Params
  // Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
  MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001;
  // ***** START Params
  // Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list.
  // Desired approach vector in compass heading. A negative value indicates the system can define the approach vector at will.
  // Desired ground speed at release time. This can be overridden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will.
  // Minimum altitude clearance to the release position. A negative value indicates the system can define the clearance at will.
  // Latitude. Note, if used in MISSION_ITEM (deprecated) the units are degrees (unscaled)
  // Longitude. Note, if used in MISSION_ITEM (deprecated) the units are degrees (unscaled)
  // Altitude (MSL)
  // ***** END Params
  // Control the payload deployment.
  MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002;
  // ***** START Params
  // Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deployment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests.
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // Reserved
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_1 = 31000;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_2 = 31001;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_3 = 31002;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_4 = 31003;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
  MAV_CMD_WAYPOINT_USER_5 = 31004;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_1 = 31005;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_2 = 31006;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_3 = 31007;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_4 = 31008;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
  MAV_CMD_SPATIAL_USER_5 = 31009;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // Latitude unscaled
  // Longitude unscaled
  // Altitude (MSL)
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_1 = 31010;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_2 = 31011;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_3 = 31012;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_4 = 31013;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
  MAV_CMD_USER_5 = 31014;
  // ***** START Params
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // User defined
  // ***** END Params
  // A system wide power-off event has been initiated.
  MAV_CMD_POWER_OFF_INITIATED = 42000;
  // ***** START Params
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // FLY button has been clicked.
  MAV_CMD_SOLO_BTN_FLY_CLICK = 42001;
  // ***** START Params
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // FLY button has been held for 1.5 seconds.
  MAV_CMD_SOLO_BTN_FLY_HOLD = 42002;
  // ***** START Params
  // Takeoff altitude.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // PAUSE button has been clicked.
  MAV_CMD_SOLO_BTN_PAUSE_CLICK = 42003;
  // ***** START Params
  // 1 if Solo is in a shot mode, 0 otherwise.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Magnetometer calibration based on fixed position
  //         in earth field given by inclination, declination and intensity.
  MAV_CMD_FIXED_MAG_CAL = 42004;
  // ***** START Params
  // MagDeclinationDegrees.
  // MagInclinationDegrees.
  // MagIntensityMilliGauss.
  // YawDegrees.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Magnetometer calibration based on fixed expected field values in milliGauss.
  MAV_CMD_FIXED_MAG_CAL_FIELD = 42005;
  // ***** START Params
  // FieldX.
  // FieldY.
  // FieldZ.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Magnetometer calibration based on provided known yaw. This allows for fast calibration using WMM field tables in the vehicle, given only the known yaw of the vehicle. If Latitude and longitude are both zero then use the current vehicle location.
  MAV_CMD_FIXED_MAG_CAL_YAW = 42006;
  // ***** START Params
  // Yaw of vehicle in earth frame.
  // CompassMask, 0 for all.
  // Latitude.
  // Longitude.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Initiate a magnetometer calibration.
  MAV_CMD_DO_START_MAG_CAL = 42424;
  // ***** START Params
  // uint8_t bitmask of magnetometers (0 means all).
  // Automatically retry on failure (0=no retry, 1=retry).
  // Save without user input (0=require input, 1=autosave).
  // Delay (seconds).
  // Autoreboot (0=user reboot, 1=autoreboot).
  // Empty.
  // Empty.
  // ***** END Params
  // Initiate a magnetometer calibration.
  MAV_CMD_DO_ACCEPT_MAG_CAL = 42425;
  // ***** START Params
  // uint8_t bitmask of magnetometers (0 means all).
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Cancel a running magnetometer calibration.
  MAV_CMD_DO_CANCEL_MAG_CAL = 42426;
  // ***** START Params
  // uint8_t bitmask of magnetometers (0 means all).
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Command autopilot to get into factory test/diagnostic mode.
  MAV_CMD_SET_FACTORY_TEST_MODE = 42427;
  // ***** START Params
  // 0 means get out of test mode, 1 means get into test mode.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Reply with the version banner.
  MAV_CMD_DO_SEND_BANNER = 42428;
  // ***** START Params
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Used when doing accelerometer calibration. When sent to the GCS tells it what position to put the vehicle in. When sent to the vehicle says what position the vehicle is in.
  MAV_CMD_ACCELCAL_VEHICLE_POS = 42429;
  // ***** START Params
  // Position, one of the ACCELCAL_VEHICLE_POS enum values.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Causes the gimbal to reset and boot as if it was just powered on.
  MAV_CMD_GIMBAL_RESET = 42501;
  // ***** START Params
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Reports progress and success or failure of gimbal axis calibration procedure.
  MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS = 42502;
  // ***** START Params
  // Gimbal axis we're reporting calibration progress for.
  // Current calibration progress for this axis, 0x64=100%.
  // Status of the calibration.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Starts commutation calibration on the gimbal.
  MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION = 42503;
  // ***** START Params
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Erases gimbal application and parameters.
  MAV_CMD_GIMBAL_FULL_RESET = 42505;
  // ***** START Params
  // Magic number.
  // Magic number.
  // Magic number.
  // Magic number.
  // Magic number.
  // Magic number.
  // Magic number.
  // ***** END Params
  // Command to operate winch.
  MAV_CMD_DO_WINCH = 42600;
  // ***** START Params
  // Winch number (0 for the default winch, otherwise a number from 1 to max number of winches on the vehicle).
  // Action (0=relax, 1=relative length control, 2=rate control. See WINCH_ACTIONS enum.).
  // Release length (cable distance to unwind in meters, negative numbers to wind in cable).
  // Release rate (meters/second).
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Update the bootloader
  MAV_CMD_FLASH_BOOTLOADER = 42650;
  // ***** START Params
  // Empty
  // Empty
  // Empty
  // Empty
  // Magic number - set to 290876 to actually flash
  // Empty
  // Empty
  // ***** END Params
  // Reset battery capacity for batteries that accumulate consumed battery via integration.
  MAV_CMD_BATTERY_RESET = 42651;
  // ***** START Params
  // Bitmask of batteries to reset. Least significant bit is for the first battery.
  // Battery percentage remaining to set.
  // ***** END Params
  // Issue a trap signal to the autopilot process, presumably to enter the debugger.
  MAV_CMD_DEBUG_TRAP = 42700;
  // ***** START Params
  // Magic number - set to 32451 to actually trap.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // Empty.
  // ***** END Params
  // Control onboard scripting.
  MAV_CMD_SCRIPTING = 42701;
  // ***** START Params
  // Scripting command to execute
  // ***** END Params
}

enum SCRIPTING_CMD {
  // Start a REPL session.
  SCRIPTING_CMD_REPL_START = 0;
  // End a REPL session.
  SCRIPTING_CMD_REPL_STOP = 1;
}

enum LIMITS_STATE {
  // Pre-initialization.
  LIMITS_INIT = 0;
  // Disabled.
  LIMITS_DISABLED = 1;
  // Checking limits.
  LIMITS_ENABLED = 2;
  // A limit has been breached.
  LIMITS_TRIGGERED = 3;
  // Taking action e.g. Return/RTL.
  LIMITS_RECOVERING = 4;
  // We're no longer in breach of a limit.
  LIMITS_RECOVERED = 5;
}

enum LIMIT_MODULE {
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  LIMIT_MODULE_UNDEFINED = 0;
  // Pre-initialization.
  // bit 1
  LIMIT_GPSLOCK = 0x00000001;
  // Disabled.
  // bit 2
  LIMIT_GEOFENCE = 0x00000002;
  // Checking limits.
  // bit 3
  LIMIT_ALTITUDE = 0x00000004;
}

enum RALLY_FLAGS {
// Flags in RALLY_POINT message.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  RALLY_FLAGS_UNDEFINED = 0;
  // Flag set when requiring favorable winds for landing.
  // bit 1
  FAVORABLE_WIND = 0x00000001;
  // Flag set when plane is to immediately descend to break altitude and land without GCS intervention. Flag not set when plane is to loiter at Rally point until commanded to land.
  // bit 2
  LAND_IMMEDIATELY = 0x00000002;
}

enum GRIPPER_ACTIONS {
// Gripper actions.
  // Gripper release cargo.
  GRIPPER_ACTION_RELEASE = 0;
  // Gripper grab onto cargo.
  GRIPPER_ACTION_GRAB = 1;
}

enum WINCH_ACTIONS {
// Winch actions.
  // Relax winch.
  WINCH_RELAXED = 0;
  // Winch unwinds or winds specified length of cable optionally using specified rate.
  WINCH_RELATIVE_LENGTH_CONTROL = 1;
  // Winch unwinds or winds cable at specified rate in meters/seconds.
  WINCH_RATE_CONTROL = 2;
}

enum CAMERA_STATUS_TYPES {
  // Camera heartbeat, announce camera component ID at 1Hz.
  CAMERA_STATUS_TYPE_HEARTBEAT = 0;
  // Camera image triggered.
  CAMERA_STATUS_TYPE_TRIGGER = 1;
  // Camera connection lost.
  CAMERA_STATUS_TYPE_DISCONNECT = 2;
  // Camera unknown error.
  CAMERA_STATUS_TYPE_ERROR = 3;
  // Camera battery low. Parameter p1 shows reported voltage.
  CAMERA_STATUS_TYPE_LOWBATT = 4;
  // Camera storage low. Parameter p1 shows reported shots remaining.
  CAMERA_STATUS_TYPE_LOWSTORE = 5;
  // Camera storage low. Parameter p1 shows reported video minutes remaining.
  CAMERA_STATUS_TYPE_LOWSTOREV = 6;
}

enum CAMERA_FEEDBACK_FLAGS {
  // Shooting photos, not video.
  CAMERA_FEEDBACK_PHOTO = 0;
  // Shooting video, not stills.
  CAMERA_FEEDBACK_VIDEO = 1;
  // Unable to achieve requested exposure (e.g. shutter speed too low).
  CAMERA_FEEDBACK_BADEXPOSURE = 2;
  // Closed loop feedback from camera, we know for sure it has successfully taken a picture.
  CAMERA_FEEDBACK_CLOSEDLOOP = 3;
  // Open loop camera, an image trigger has been requested but we can't know for sure it has successfully taken a picture.
  CAMERA_FEEDBACK_OPENLOOP = 4;
}

enum MAV_MODE_GIMBAL {
  // Gimbal is powered on but has not started initializing yet.
  MAV_MODE_GIMBAL_UNINITIALIZED = 0;
  // Gimbal is currently running calibration on the pitch axis.
  MAV_MODE_GIMBAL_CALIBRATING_PITCH = 1;
  // Gimbal is currently running calibration on the roll axis.
  MAV_MODE_GIMBAL_CALIBRATING_ROLL = 2;
  // Gimbal is currently running calibration on the yaw axis.
  MAV_MODE_GIMBAL_CALIBRATING_YAW = 3;
  // Gimbal has finished calibrating and initializing, but is relaxed pending reception of first rate command from copter.
  MAV_MODE_GIMBAL_INITIALIZED = 4;
  // Gimbal is actively stabilizing.
  MAV_MODE_GIMBAL_ACTIVE = 5;
  // Gimbal is relaxed because it missed more than 10 expected rate command messages in a row. Gimbal will move back to active mode when it receives a new rate command.
  MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT = 6;
}

enum GIMBAL_AXIS {
  // Gimbal yaw axis.
  GIMBAL_AXIS_YAW = 0;
  // Gimbal pitch axis.
  GIMBAL_AXIS_PITCH = 1;
  // Gimbal roll axis.
  GIMBAL_AXIS_ROLL = 2;
}

enum GIMBAL_AXIS_CALIBRATION_STATUS {
  // Axis calibration is in progress.
  GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS = 0;
  // Axis calibration succeeded.
  GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED = 1;
  // Axis calibration failed.
  GIMBAL_AXIS_CALIBRATION_STATUS_FAILED = 2;
}

enum GIMBAL_AXIS_CALIBRATION_REQUIRED {
  // Whether or not this axis requires calibration is unknown at this time.
  GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN = 0;
  // This axis requires calibration.
  GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE = 1;
  // This axis does not require calibration.
  GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE = 2;
}

enum GOPRO_HEARTBEAT_STATUS {
  // No GoPro connected.
  GOPRO_HEARTBEAT_STATUS_DISCONNECTED = 0;
  // The detected GoPro is not HeroBus compatible.
  GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE = 1;
  // A HeroBus compatible GoPro is connected.
  GOPRO_HEARTBEAT_STATUS_CONNECTED = 2;
  // An unrecoverable error was encountered with the connected GoPro, it may require a power cycle.
  GOPRO_HEARTBEAT_STATUS_ERROR = 3;
}

enum GOPRO_HEARTBEAT_FLAGS {
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  GOPRO_HEARTBEAT_FLAGS_UNDEFINED = 0;
  // GoPro is currently recording.
  // bit 1
  GOPRO_FLAG_RECORDING = 0x00000001;
}

enum GOPRO_REQUEST_STATUS {
  // The write message with ID indicated succeeded.
  GOPRO_REQUEST_SUCCESS = 0;
  // The write message with ID indicated failed.
  GOPRO_REQUEST_FAILED = 1;
}

enum GOPRO_COMMAND {
  // (Get/Set).
  GOPRO_COMMAND_POWER = 0;
  // (Get/Set).
  GOPRO_COMMAND_CAPTURE_MODE = 1;
  // (___/Set).
  GOPRO_COMMAND_SHUTTER = 2;
  // (Get/___).
  GOPRO_COMMAND_BATTERY = 3;
  // (Get/___).
  GOPRO_COMMAND_MODEL = 4;
  // (Get/Set).
  GOPRO_COMMAND_VIDEO_SETTINGS = 5;
  // (Get/Set).
  GOPRO_COMMAND_LOW_LIGHT = 6;
  // (Get/Set).
  GOPRO_COMMAND_PHOTO_RESOLUTION = 7;
  // (Get/Set).
  GOPRO_COMMAND_PHOTO_BURST_RATE = 8;
  // (Get/Set).
  GOPRO_COMMAND_PROTUNE = 9;
  // (Get/Set) Hero 3+ Only.
  GOPRO_COMMAND_PROTUNE_WHITE_BALANCE = 10;
  // (Get/Set) Hero 3+ Only.
  GOPRO_COMMAND_PROTUNE_COLOUR = 11;
  // (Get/Set) Hero 3+ Only.
  GOPRO_COMMAND_PROTUNE_GAIN = 12;
  // (Get/Set) Hero 3+ Only.
  GOPRO_COMMAND_PROTUNE_SHARPNESS = 13;
  // (Get/Set) Hero 3+ Only.
  GOPRO_COMMAND_PROTUNE_EXPOSURE = 14;
  // (Get/Set).
  GOPRO_COMMAND_TIME = 15;
  // (Get/Set).
  GOPRO_COMMAND_CHARGING = 16;
}

enum GOPRO_CAPTURE_MODE {
  // Video mode.
  GOPRO_CAPTURE_MODE_VIDEO = 0;
  // Photo mode.
  GOPRO_CAPTURE_MODE_PHOTO = 1;
  // Burst mode, Hero 3+ only.
  GOPRO_CAPTURE_MODE_BURST = 2;
  // Time lapse mode, Hero 3+ only.
  GOPRO_CAPTURE_MODE_TIME_LAPSE = 3;
  // Multi shot mode, Hero 4 only.
  GOPRO_CAPTURE_MODE_MULTI_SHOT = 4;
  // Playback mode, Hero 4 only, silver only except when LCD or HDMI is connected to black.
  GOPRO_CAPTURE_MODE_PLAYBACK = 5;
  // Playback mode, Hero 4 only.
  GOPRO_CAPTURE_MODE_SETUP = 6;
  // Mode not yet known.
  GOPRO_CAPTURE_MODE_UNKNOWN = 255;
}

enum GOPRO_RESOLUTION {
  // 848 x 480 (480p).
  GOPRO_RESOLUTION_480p = 0;
  // 1280 x 720 (720p).
  GOPRO_RESOLUTION_720p = 1;
  // 1280 x 960 (960p).
  GOPRO_RESOLUTION_960p = 2;
  // 1920 x 1080 (1080p).
  GOPRO_RESOLUTION_1080p = 3;
  // 1920 x 1440 (1440p).
  GOPRO_RESOLUTION_1440p = 4;
  // 2704 x 1440 (2.7k-17:9).
  GOPRO_RESOLUTION_2_7k_17_9 = 5;
  // 2704 x 1524 (2.7k-16:9).
  GOPRO_RESOLUTION_2_7k_16_9 = 6;
  // 2704 x 2028 (2.7k-4:3).
  GOPRO_RESOLUTION_2_7k_4_3 = 7;
  // 3840 x 2160 (4k-16:9).
  GOPRO_RESOLUTION_4k_16_9 = 8;
  // 4096 x 2160 (4k-17:9).
  GOPRO_RESOLUTION_4k_17_9 = 9;
  // 1280 x 720 (720p-SuperView).
  GOPRO_RESOLUTION_720p_SUPERVIEW = 10;
  // 1920 x 1080 (1080p-SuperView).
  GOPRO_RESOLUTION_1080p_SUPERVIEW = 11;
  // 2704 x 1520 (2.7k-SuperView).
  GOPRO_RESOLUTION_2_7k_SUPERVIEW = 12;
  // 3840 x 2160 (4k-SuperView).
  GOPRO_RESOLUTION_4k_SUPERVIEW = 13;
}

enum GOPRO_FRAME_RATE {
  // 12 FPS.
  GOPRO_FRAME_RATE_12 = 0;
  // 15 FPS.
  GOPRO_FRAME_RATE_15 = 1;
  // 24 FPS.
  GOPRO_FRAME_RATE_24 = 2;
  // 25 FPS.
  GOPRO_FRAME_RATE_25 = 3;
  // 30 FPS.
  GOPRO_FRAME_RATE_30 = 4;
  // 48 FPS.
  GOPRO_FRAME_RATE_48 = 5;
  // 50 FPS.
  GOPRO_FRAME_RATE_50 = 6;
  // 60 FPS.
  GOPRO_FRAME_RATE_60 = 7;
  // 80 FPS.
  GOPRO_FRAME_RATE_80 = 8;
  // 90 FPS.
  GOPRO_FRAME_RATE_90 = 9;
  // 100 FPS.
  GOPRO_FRAME_RATE_100 = 10;
  // 120 FPS.
  GOPRO_FRAME_RATE_120 = 11;
  // 240 FPS.
  GOPRO_FRAME_RATE_240 = 12;
  // 12.5 FPS.
  GOPRO_FRAME_RATE_12_5 = 13;
}

enum GOPRO_FIELD_OF_VIEW {
  // 0x00: Wide.
  GOPRO_FIELD_OF_VIEW_WIDE = 0;
  // 0x01: Medium.
  GOPRO_FIELD_OF_VIEW_MEDIUM = 1;
  // 0x02: Narrow.
  GOPRO_FIELD_OF_VIEW_NARROW = 2;
}

enum GOPRO_VIDEO_SETTINGS_FLAGS {
  // Not used in MavLink, make protobuf happy.
  GOPRO_VIDEO_SETTINGS_FLAGS_UNDEFINED = 0;
  // 0=NTSC, 1=PAL.
  GOPRO_VIDEO_SETTINGS_TV_MODE = 1;
}

enum GOPRO_PHOTO_RESOLUTION {
  // 5MP Medium.
  GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM = 0;
  // 7MP Medium.
  GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM = 1;
  // 7MP Wide.
  GOPRO_PHOTO_RESOLUTION_7MP_WIDE = 2;
  // 10MP Wide.
  GOPRO_PHOTO_RESOLUTION_10MP_WIDE = 3;
  // 12MP Wide.
  GOPRO_PHOTO_RESOLUTION_12MP_WIDE = 4;
}

enum GOPRO_PROTUNE_WHITE_BALANCE {
  // Auto.
  GOPRO_PROTUNE_WHITE_BALANCE_AUTO = 0;
  // 3000K.
  GOPRO_PROTUNE_WHITE_BALANCE_3000K = 1;
  // 5500K.
  GOPRO_PROTUNE_WHITE_BALANCE_5500K = 2;
  // 6500K.
  GOPRO_PROTUNE_WHITE_BALANCE_6500K = 3;
  // Camera Raw.
  GOPRO_PROTUNE_WHITE_BALANCE_RAW = 4;
}

enum GOPRO_PROTUNE_COLOUR {
  // Auto.
  GOPRO_PROTUNE_COLOUR_STANDARD = 0;
  // Neutral.
  GOPRO_PROTUNE_COLOUR_NEUTRAL = 1;
}

enum GOPRO_PROTUNE_GAIN {
  // ISO 400.
  GOPRO_PROTUNE_GAIN_400 = 0;
  // ISO 800 (Only Hero 4).
  GOPRO_PROTUNE_GAIN_800 = 1;
  // ISO 1600.
  GOPRO_PROTUNE_GAIN_1600 = 2;
  // ISO 3200 (Only Hero 4).
  GOPRO_PROTUNE_GAIN_3200 = 3;
  // ISO 6400.
  GOPRO_PROTUNE_GAIN_6400 = 4;
}

enum GOPRO_PROTUNE_SHARPNESS {
  // Low Sharpness.
  GOPRO_PROTUNE_SHARPNESS_LOW = 0;
  // Medium Sharpness.
  GOPRO_PROTUNE_SHARPNESS_MEDIUM = 1;
  // High Sharpness.
  GOPRO_PROTUNE_SHARPNESS_HIGH = 2;
}

enum GOPRO_PROTUNE_EXPOSURE {
  // -5.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_5_0 = 0;
  // -4.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_4_5 = 1;
  // -4.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_4_0 = 2;
  // -3.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_3_5 = 3;
  // -3.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_3_0 = 4;
  // -2.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_NEG_2_5 = 5;
  // -2.0 EV.
  GOPRO_PROTUNE_EXPOSURE_NEG_2_0 = 6;
  // -1.5 EV.
  GOPRO_PROTUNE_EXPOSURE_NEG_1_5 = 7;
  // -1.0 EV.
  GOPRO_PROTUNE_EXPOSURE_NEG_1_0 = 8;
  // -0.5 EV.
  GOPRO_PROTUNE_EXPOSURE_NEG_0_5 = 9;
  // 0.0 EV.
  GOPRO_PROTUNE_EXPOSURE_ZERO = 10;
  // +0.5 EV.
  GOPRO_PROTUNE_EXPOSURE_POS_0_5 = 11;
  // +1.0 EV.
  GOPRO_PROTUNE_EXPOSURE_POS_1_0 = 12;
  // +1.5 EV.
  GOPRO_PROTUNE_EXPOSURE_POS_1_5 = 13;
  // +2.0 EV.
  GOPRO_PROTUNE_EXPOSURE_POS_2_0 = 14;
  // +2.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_2_5 = 15;
  // +3.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_3_0 = 16;
  // +3.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_3_5 = 17;
  // +4.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_4_0 = 18;
  // +4.5 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_4_5 = 19;
  // +5.0 EV (Hero 3+ Only).
  GOPRO_PROTUNE_EXPOSURE_POS_5_0 = 20;
}

enum GOPRO_CHARGING {
  // Charging disabled.
  GOPRO_CHARGING_DISABLED = 0;
  // Charging enabled.
  GOPRO_CHARGING_ENABLED = 1;
}

enum GOPRO_MODEL {
  // Unknown gopro model.
  GOPRO_MODEL_UNKNOWN = 0;
  // Hero 3+ Silver (HeroBus not supported by GoPro).
  GOPRO_MODEL_HERO_3_PLUS_SILVER = 1;
  // Hero 3+ Black.
  GOPRO_MODEL_HERO_3_PLUS_BLACK = 2;
  // Hero 4 Silver.
  GOPRO_MODEL_HERO_4_SILVER = 3;
  // Hero 4 Black.
  GOPRO_MODEL_HERO_4_BLACK = 4;
}

enum GOPRO_BURST_RATE {
  // 3 Shots / 1 Second.
  GOPRO_BURST_RATE_3_IN_1_SECOND = 0;
  // 5 Shots / 1 Second.
  GOPRO_BURST_RATE_5_IN_1_SECOND = 1;
  // 10 Shots / 1 Second.
  GOPRO_BURST_RATE_10_IN_1_SECOND = 2;
  // 10 Shots / 2 Second.
  GOPRO_BURST_RATE_10_IN_2_SECOND = 3;
  // 10 Shots / 3 Second (Hero 4 Only).
  GOPRO_BURST_RATE_10_IN_3_SECOND = 4;
  // 30 Shots / 1 Second.
  GOPRO_BURST_RATE_30_IN_1_SECOND = 5;
  // 30 Shots / 2 Second.
  GOPRO_BURST_RATE_30_IN_2_SECOND = 6;
  // 30 Shots / 3 Second.
  GOPRO_BURST_RATE_30_IN_3_SECOND = 7;
  // 30 Shots / 6 Second.
  GOPRO_BURST_RATE_30_IN_6_SECOND = 8;
}

enum LED_CONTROL_PATTERN {
  // LED patterns off (return control to regular vehicle control).
  LED_CONTROL_PATTERN_OFF = 0;
  // LEDs show pattern during firmware update.
  LED_CONTROL_PATTERN_FIRMWAREUPDATE = 1;
  // Custom Pattern using custom bytes fields.
  LED_CONTROL_PATTERN_CUSTOM = 255;
}

enum EKF_STATUS_FLAGS {
// Flags in EKF_STATUS message.
// This enum is used to define bitmasks (work around protobuf limitations).
  // Not used in MavLink, make protobuf happy.
  EKF_STATUS_FLAGS_UNDEFINED = 0;
  // Set if EKF's attitude estimate is good.
  // bit 1
  EKF_ATTITUDE = 0x00000001;
  // Set if EKF's horizontal velocity estimate is good.
  // bit 2
  EKF_VELOCITY_HORIZ = 0x00000002;
  // Set if EKF's vertical velocity estimate is good.
  // bit 3
  EKF_VELOCITY_VERT = 0x00000004;
  // Set if EKF's horizontal position (relative) estimate is good.
  // bit 4
  EKF_POS_HORIZ_REL = 0x00000008;
  // Set if EKF's horizontal position (absolute) estimate is good.
  // bit 5
  EKF_POS_HORIZ_ABS = 0x00000010;
  // Set if EKF's vertical position (absolute) estimate is good.
  // bit 6
  EKF_POS_VERT_ABS = 0x00000020;
  // Set if EKF's vertical position (above ground) estimate is good.
  // bit 7
  EKF_POS_VERT_AGL = 0x00000040;
  // EKF is in constant position mode and does not know it's absolute or relative position.
  // bit 8
  EKF_CONST_POS_MODE = 0x00000080;
  // Set if EKF's predicted horizontal position (relative) estimate is good.
  // bit 9
  EKF_PRED_POS_HORIZ_REL = 0x00000100;
  // Set if EKF's predicted horizontal position (absolute) estimate is good.
  // bit 10
  EKF_PRED_POS_HORIZ_ABS = 0x00000200;
  // Set if EKF has never been healthy.
  // bit 11
  EKF_UNINITIALIZED = 0x00000400;
}

enum PID_TUNING_AXIS {
  // Not used in MavLink, make protobuf happy.
  PID_TUNING_AXIS_UNDEFINED = 0;
  PID_TUNING_ROLL = 1;
  PID_TUNING_PITCH = 2;
  PID_TUNING_YAW = 3;
  PID_TUNING_ACCZ = 4;
  PID_TUNING_STEER = 5;
  PID_TUNING_LANDING = 6;
}

enum MAG_CAL_STATUS {
  MAG_CAL_NOT_STARTED = 0;
  MAG_CAL_WAITING_TO_START = 1;
  MAG_CAL_RUNNING_STEP_ONE = 2;
  MAG_CAL_RUNNING_STEP_TWO = 3;
  MAG_CAL_SUCCESS = 4;
  MAG_CAL_FAILED = 5;
  MAG_CAL_BAD_ORIENTATION = 6;
  MAG_CAL_BAD_RADIUS = 7;
}

enum MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS {
// Special ACK block numbers control activation of dataflash log streaming.
  // Not used in MavLink, make protobuf happy.
  MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS_UNDEFINED = 0;
  // UAV to stop sending DataFlash blocks.
  MAV_REMOTE_LOG_DATA_BLOCK_STOP = 2147483645;
  // UAV to start sending DataFlash blocks.
  MAV_REMOTE_LOG_DATA_BLOCK_START = 2147483646;
}

enum MAV_REMOTE_LOG_DATA_BLOCK_STATUSES {
// Possible remote log data block statuses.
  // This block has NOT been received.
  MAV_REMOTE_LOG_DATA_BLOCK_NACK = 0;
  // This block has been received.
  MAV_REMOTE_LOG_DATA_BLOCK_ACK = 1;
}

enum DEVICE_OP_BUSTYPE {
// Bus types for device operations.
  // I2C Device operation.
  DEVICE_OP_BUSTYPE_I2C = 0;
  // SPI Device operation.
  DEVICE_OP_BUSTYPE_SPI = 1;
}

enum DEEPSTALL_STAGE {
// Deepstall flight stage.
  // Flying to the landing point.
  DEEPSTALL_STAGE_FLY_TO_LANDING = 0;
  // Building an estimate of the wind.
  DEEPSTALL_STAGE_ESTIMATE_WIND = 1;
  // Waiting to breakout of the loiter to fly the approach.
  DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT = 2;
  // Flying to the first arc point to turn around to the landing point.
  DEEPSTALL_STAGE_FLY_TO_ARC = 3;
  // Turning around back to the deepstall landing point.
  DEEPSTALL_STAGE_ARC = 4;
  // Approaching the landing point.
  DEEPSTALL_STAGE_APPROACH = 5;
  // Stalling and steering towards the land point.
  DEEPSTALL_STAGE_LAND = 6;
}

enum PLANE_MODE {
// A mapping of plane flight modes for custom_mode field of heartbeat.
  PLANE_MODE_MANUAL = 0;
  PLANE_MODE_CIRCLE = 1;
  PLANE_MODE_STABILIZE = 2;
  PLANE_MODE_TRAINING = 3;
  PLANE_MODE_ACRO = 4;
  PLANE_MODE_FLY_BY_WIRE_A = 5;
  PLANE_MODE_FLY_BY_WIRE_B = 6;
  PLANE_MODE_CRUISE = 7;
  PLANE_MODE_AUTOTUNE = 8;
  PLANE_MODE_AUTO = 10;
  PLANE_MODE_RTL = 11;
  PLANE_MODE_LOITER = 12;
  PLANE_MODE_TAKEOFF = 13;
  PLANE_MODE_AVOID_ADSB = 14;
  PLANE_MODE_GUIDED = 15;
  PLANE_MODE_INITIALIZING = 16;
  PLANE_MODE_QSTABILIZE = 17;
  PLANE_MODE_QHOVER = 18;
  PLANE_MODE_QLOITER = 19;
  PLANE_MODE_QLAND = 20;
  PLANE_MODE_QRTL = 21;
  PLANE_MODE_QAUTOTUNE = 22;
}

enum COPTER_MODE {
// A mapping of copter flight modes for custom_mode field of heartbeat.
  COPTER_MODE_STABILIZE = 0;
  COPTER_MODE_ACRO = 1;
  COPTER_MODE_ALT_HOLD = 2;
  COPTER_MODE_AUTO = 3;
  COPTER_MODE_GUIDED = 4;
  COPTER_MODE_LOITER = 5;
  COPTER_MODE_RTL = 6;
  COPTER_MODE_CIRCLE = 7;
  COPTER_MODE_LAND = 9;
  COPTER_MODE_DRIFT = 11;
  COPTER_MODE_SPORT = 13;
  COPTER_MODE_FLIP = 14;
  COPTER_MODE_AUTOTUNE = 15;
  COPTER_MODE_POSHOLD = 16;
  COPTER_MODE_BRAKE = 17;
  COPTER_MODE_THROW = 18;
  COPTER_MODE_AVOID_ADSB = 19;
  COPTER_MODE_GUIDED_NOGPS = 20;
  COPTER_MODE_SMART_RTL = 21;
}

enum SUB_MODE {
// A mapping of sub flight modes for custom_mode field of heartbeat.
  SUB_MODE_STABILIZE = 0;
  SUB_MODE_ACRO = 1;
  SUB_MODE_ALT_HOLD = 2;
  SUB_MODE_AUTO = 3;
  SUB_MODE_GUIDED = 4;
  SUB_MODE_CIRCLE = 7;
  SUB_MODE_SURFACE = 9;
  SUB_MODE_POSHOLD = 16;
  SUB_MODE_MANUAL = 19;
}

enum ROVER_MODE {
// A mapping of rover flight modes for custom_mode field of heartbeat.
  ROVER_MODE_MANUAL = 0;
  ROVER_MODE_ACRO = 1;
  ROVER_MODE_STEERING = 3;
  ROVER_MODE_HOLD = 4;
  ROVER_MODE_LOITER = 5;
  ROVER_MODE_AUTO = 10;
  ROVER_MODE_RTL = 11;
  ROVER_MODE_SMART_RTL = 12;
  ROVER_MODE_GUIDED = 15;
  ROVER_MODE_INITIALIZING = 16;
}

enum TRACKER_MODE {
// A mapping of antenna tracker flight modes for custom_mode field of heartbeat.
  TRACKER_MODE_MANUAL = 0;
  TRACKER_MODE_STOP = 1;
  TRACKER_MODE_SCAN = 2;
  TRACKER_MODE_SERVO_TEST = 3;
  TRACKER_MODE_AUTO = 10;
  TRACKER_MODE_INITIALIZING = 16;
}

// Offsets and calibrations values for hardware sensors. This makes it easier to debug the calibration process.
message SENSOR_OFFSETS {  // MavLink id: 150
  option (mav.message).id = 150;
  // Magnetic declination.
  float mag_declination = 1 [(mav.opts) = { type: "float" }];
  // Raw pressure from barometer.
  int32 raw_press = 2 [(mav.opts) = { type: "int32_t" }];
  // Raw temperature from barometer.
  int32 raw_temp = 3 [(mav.opts) = { type: "int32_t" }];
  // Gyro X calibration.
  float gyro_cal_x = 4 [(mav.opts) = { type: "float" }];
  // Gyro Y calibration.
  float gyro_cal_y = 5 [(mav.opts) = { type: "float" }];
  // Gyro Z calibration.
  float gyro_cal_z = 6 [(mav.opts) = { type: "float" }];
  // Accel X calibration.
  float accel_cal_x = 7 [(mav.opts) = { type: "float" }];
  // Accel Y calibration.
  float accel_cal_y = 8 [(mav.opts) = { type: "float" }];
  // Accel Z calibration.
  float accel_cal_z = 9 [(mav.opts) = { type: "float" }];
  // Magnetometer X offset.
  int32 mag_ofs_x = 10 [(mav.opts) = { type: "int16_t" }];
  // Magnetometer Y offset.
  int32 mag_ofs_y = 11 [(mav.opts) = { type: "int16_t" }];
  // Magnetometer Z offset.
  int32 mag_ofs_z = 12 [(mav.opts) = { type: "int16_t" }];
}

// Set the magnetometer offsets
message SET_MAG_OFFSETS {  // MavLink id: 151
  option (mav.message).id = 151;
  // Magnetometer X offset.
  int32 mag_ofs_x = 1 [(mav.opts) = { type: "int16_t" }];
  // Magnetometer Y offset.
  int32 mag_ofs_y = 2 [(mav.opts) = { type: "int16_t" }];
  // Magnetometer Z offset.
  int32 mag_ofs_z = 3 [(mav.opts) = { type: "int16_t" }];
  // System ID.
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// State of APM memory.
message MEMINFO {  // MavLink id: 152
  option (mav.message).id = 152;
  // Heap top.
  uint32 brkval = 1 [(mav.opts) = { type: "uint16_t" }];
  // Free memory.
  uint32 freemem = 2 [(mav.opts) = { type: "uint16_t" }];
}

// Raw ADC output.
message AP_ADC {  // MavLink id: 153
  option (mav.message).id = 153;
  // ADC output 1.
  uint32 adc1 = 1 [(mav.opts) = { type: "uint16_t" }];
  // ADC output 2.
  uint32 adc2 = 2 [(mav.opts) = { type: "uint16_t" }];
  // ADC output 3.
  uint32 adc3 = 3 [(mav.opts) = { type: "uint16_t" }];
  // ADC output 4.
  uint32 adc4 = 4 [(mav.opts) = { type: "uint16_t" }];
  // ADC output 5.
  uint32 adc5 = 5 [(mav.opts) = { type: "uint16_t" }];
  // ADC output 6.
  uint32 adc6 = 6 [(mav.opts) = { type: "uint16_t" }];
}

// Configure on-board Camera Control System.
message DIGICAM_CONFIGURE {  // MavLink id: 154
  option (mav.message).id = 154;
  // Correspondent value to given extra_param.
  float extra_value = 1 [(mav.opts) = { type: "float" }];
  // Divisor number //e.g. 1000 means 1/1000 (0 means ignore).
  uint32 shutter_speed = 2 [(mav.opts) = { type: "uint16_t" }];
  // System ID.
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
  // Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore).
  uint32 mode = 5 [(mav.opts) = { type: "uint8_t" }];
  // F stop number x 10 //e.g. 28 means 2.8 (0 means ignore).
  uint32 aperture = 6 [(mav.opts) = { type: "uint8_t" }];
  // ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore).
  uint32 iso = 7 [(mav.opts) = { type: "uint8_t" }];
  // Exposure type enumeration from 1 to N (0 means ignore).
  uint32 exposure_type = 8 [(mav.opts) = { type: "uint8_t" }];
  // Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once.
  uint32 command_id = 9 [(mav.opts) = { type: "uint8_t" }];
  // Main engine cut-off time before camera trigger (0 means no cut-off).
  uint32 engine_cut_off = 10 [(mav.opts) = { type: "uint8_t" }];
  // Extra parameters enumeration (0 means ignore).
  uint32 extra_param = 11 [(mav.opts) = { type: "uint8_t" }];
}

// Control on-board Camera Control System to take shots.
message DIGICAM_CONTROL {  // MavLink id: 155
  option (mav.message).id = 155;
  // Correspondent value to given extra_param.
  float extra_value = 1 [(mav.opts) = { type: "float" }];
  // System ID.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // 0: stop, 1: start or keep it up //Session control e.g. show/hide lens.
  uint32 session = 4 [(mav.opts) = { type: "uint8_t" }];
  // 1 to N //Zoom's absolute position (0 means ignore).
  uint32 zoom_pos = 5 [(mav.opts) = { type: "uint8_t" }];
  // -100 to 100 //Zooming step value to offset zoom from the current position.
  int32 zoom_step = 6 [(mav.opts) = { type: "int8_t" }];
  // 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus.
  uint32 focus_lock = 7 [(mav.opts) = { type: "uint8_t" }];
  // 0: ignore, 1: shot or start filming.
  uint32 shot = 8 [(mav.opts) = { type: "uint8_t" }];
  // Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once.
  uint32 command_id = 9 [(mav.opts) = { type: "uint8_t" }];
  // Extra parameters enumeration (0 means ignore).
  uint32 extra_param = 10 [(mav.opts) = { type: "uint8_t" }];
}

// Message to configure a camera mount, directional antenna, etc.
message MOUNT_CONFIGURE {  // MavLink id: 156
  option (mav.message).id = 156;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Mount operating mode.
  common.MAV_MOUNT_MODE mount_mode = 3 [(mav.opts) = { type: "uint8_t", enum: "common.MAV_MOUNT_MODE" }];
  // (1 = yes, 0 = no).
  uint32 stab_roll = 4 [(mav.opts) = { type: "uint8_t" }];
  // (1 = yes, 0 = no).
  uint32 stab_pitch = 5 [(mav.opts) = { type: "uint8_t" }];
  // (1 = yes, 0 = no).
  uint32 stab_yaw = 6 [(mav.opts) = { type: "uint8_t" }];
}

// Message to control a camera mount, directional antenna, etc.
message MOUNT_CONTROL {  // MavLink id: 157
  option (mav.message).id = 157;
  // Pitch (centi-degrees) or lat (degE7), depending on mount mode.
  int32 input_a = 1 [(mav.opts) = { type: "int32_t" }];
  // Roll (centi-degrees) or lon (degE7) depending on mount mode.
  int32 input_b = 2 [(mav.opts) = { type: "int32_t" }];
  // Yaw (centi-degrees) or alt (cm) depending on mount mode.
  int32 input_c = 3 [(mav.opts) = { type: "int32_t" }];
  // System ID.
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
  // If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING).
  uint32 save_position = 6 [(mav.opts) = { type: "uint8_t" }];
}

// Message with some status from APM to GCS about camera or antenna mount.
message MOUNT_STATUS {  // MavLink id: 158
  option (mav.message).id = 158;
  // Pitch.
  int32 pointing_a = 1 [(mav.opts) = { type: "int32_t" }];
  // Roll.
  int32 pointing_b = 2 [(mav.opts) = { type: "int32_t" }];
  // Yaw.
  int32 pointing_c = 3 [(mav.opts) = { type: "int32_t" }];
  // System ID.
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// A fence point. Used to set a point when from GCS -> MAV. Also used to return a point from MAV -> GCS.
message FENCE_POINT {  // MavLink id: 160
  option (mav.message).id = 160;
  // Latitude of point.
  float lat = 1 [(mav.opts) = { type: "float" }];
  // Longitude of point.
  float lng = 2 [(mav.opts) = { type: "float" }];
  // System ID.
  uint32 target_system = 3 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 4 [(mav.opts) = { type: "uint8_t" }];
  // Point index (first point is 1, 0 is for return point).
  uint32 idx = 5 [(mav.opts) = { type: "uint8_t" }];
  // Total number of points (for sanity checking).
  uint32 count = 6 [(mav.opts) = { type: "uint8_t" }];
}

// Request a current fence point from MAV.
message FENCE_FETCH_POINT {  // MavLink id: 161
  option (mav.message).id = 161;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Point index (first point is 1, 0 is for return point).
  uint32 idx = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Status of DCM attitude estimator.
message AHRS {  // MavLink id: 163
  option (mav.message).id = 163;
  // X gyro drift estimate.
  float omegaIx = 1 [(mav.opts) = { type: "float" }];
  // Y gyro drift estimate.
  float omegaIy = 2 [(mav.opts) = { type: "float" }];
  // Z gyro drift estimate.
  float omegaIz = 3 [(mav.opts) = { type: "float" }];
  // Average accel_weight.
  float accel_weight = 4 [(mav.opts) = { type: "float" }];
  // Average renormalisation value.
  float renorm_val = 5 [(mav.opts) = { type: "float" }];
  // Average error_roll_pitch value.
  float error_rp = 6 [(mav.opts) = { type: "float" }];
  // Average error_yaw value.
  float error_yaw = 7 [(mav.opts) = { type: "float" }];
}

// Status of simulation environment, if used.
message SIMSTATE {  // MavLink id: 164
  option (mav.message).id = 164;
  // Roll angle.
  float roll = 1 [(mav.opts) = { type: "float" }];
  // Pitch angle.
  float pitch = 2 [(mav.opts) = { type: "float" }];
  // Yaw angle.
  float yaw = 3 [(mav.opts) = { type: "float" }];
  // X acceleration.
  float xacc = 4 [(mav.opts) = { type: "float" }];
  // Y acceleration.
  float yacc = 5 [(mav.opts) = { type: "float" }];
  // Z acceleration.
  float zacc = 6 [(mav.opts) = { type: "float" }];
  // Angular speed around X axis.
  float xgyro = 7 [(mav.opts) = { type: "float" }];
  // Angular speed around Y axis.
  float ygyro = 8 [(mav.opts) = { type: "float" }];
  // Angular speed around Z axis.
  float zgyro = 9 [(mav.opts) = { type: "float" }];
  // Latitude.
  int32 lat = 10 [(mav.opts) = { type: "int32_t" }];
  // Longitude.
  int32 lng = 11 [(mav.opts) = { type: "int32_t" }];
}

// Status of key hardware.
message HWSTATUS {  // MavLink id: 165
  option (mav.message).id = 165;
  // Board voltage.
  uint32 Vcc = 1 [(mav.opts) = { type: "uint16_t" }];
  // I2C error count.
  uint32 I2Cerr = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Status generated by radio.
message RADIO {  // MavLink id: 166
  option (mav.message).id = 166;
  // Receive errors.
  uint32 rxerrors = 1 [(mav.opts) = { type: "uint16_t" }];
  // Count of error corrected packets.
  uint32 fixed = 2 [(mav.opts) = { type: "uint16_t" }];
  // Local signal strength.
  uint32 rssi = 3 [(mav.opts) = { type: "uint8_t" }];
  // Remote signal strength.
  uint32 remrssi = 4 [(mav.opts) = { type: "uint8_t" }];
  // How full the tx buffer is.
  uint32 txbuf = 5 [(mav.opts) = { type: "uint8_t" }];
  // Background noise level.
  uint32 noise = 6 [(mav.opts) = { type: "uint8_t" }];
  // Remote background noise level.
  uint32 remnoise = 7 [(mav.opts) = { type: "uint8_t" }];
}

// Status of AP_Limits. Sent in extended status stream when AP_Limits is enabled.
message LIMITS_STATUS {  // MavLink id: 167
  option (mav.message).id = 167;
  // Time (since boot) of last breach.
  uint32 last_trigger = 1 [(mav.opts) = { type: "uint32_t" }];
  // Time (since boot) of last recovery action.
  uint32 last_action = 2 [(mav.opts) = { type: "uint32_t" }];
  // Time (since boot) of last successful recovery.
  uint32 last_recovery = 3 [(mav.opts) = { type: "uint32_t" }];
  // Time (since boot) of last all-clear.
  uint32 last_clear = 4 [(mav.opts) = { type: "uint32_t" }];
  // Number of fence breaches.
  uint32 breach_count = 5 [(mav.opts) = { type: "uint16_t" }];
  // State of AP_Limits.
  LIMITS_STATE limits_state = 6 [(mav.opts) = { type: "uint8_t", enum: "LIMITS_STATE" }];
  // AP_Limit_Module bitfield of enabled modules.
  // bitfield defined by enum LIMIT_MODULE
  uint32 mods_enabled = 7 [(mav.opts) = { type: "uint8_t", enum: "LIMIT_MODULE" }];
  // AP_Limit_Module bitfield of required modules.
  // bitfield defined by enum LIMIT_MODULE
  uint32 mods_required = 8 [(mav.opts) = { type: "uint8_t", enum: "LIMIT_MODULE" }];
  // AP_Limit_Module bitfield of triggered modules.
  // bitfield defined by enum LIMIT_MODULE
  uint32 mods_triggered = 9 [(mav.opts) = { type: "uint8_t", enum: "LIMIT_MODULE" }];
}

// Wind estimation.
message WIND {  // MavLink id: 168
  option (mav.message).id = 168;
  // Wind direction (that wind is coming from).
  float direction = 1 [(mav.opts) = { type: "float" }];
  // Wind speed in ground plane.
  float speed = 2 [(mav.opts) = { type: "float" }];
  // Vertical wind speed.
  float speed_z = 3 [(mav.opts) = { type: "float" }];
}

// Data packet, size 16.
message DATA16 {  // MavLink id: 169
  option (mav.message).id = 169;
  // Data type.
  uint32 type = 1 [(mav.opts) = { type: "uint8_t" }];
  // Data length.
  uint32 len = 2 [(mav.opts) = { type: "uint8_t" }];
  // Raw data.
  repeated uint32 data = 3 [(mav.opts) = { type: "uint8_t[16]" }];
}

// Data packet, size 32.
message DATA32 {  // MavLink id: 170
  option (mav.message).id = 170;
  // Data type.
  uint32 type = 1 [(mav.opts) = { type: "uint8_t" }];
  // Data length.
  uint32 len = 2 [(mav.opts) = { type: "uint8_t" }];
  // Raw data.
  repeated uint32 data = 3 [(mav.opts) = { type: "uint8_t[32]" }];
}

// Data packet, size 64.
message DATA64 {  // MavLink id: 171
  option (mav.message).id = 171;
  // Data type.
  uint32 type = 1 [(mav.opts) = { type: "uint8_t" }];
  // Data length.
  uint32 len = 2 [(mav.opts) = { type: "uint8_t" }];
  // Raw data.
  repeated uint32 data = 3 [(mav.opts) = { type: "uint8_t[64]" }];
}

// Data packet, size 96.
message DATA96 {  // MavLink id: 172
  option (mav.message).id = 172;
  // Data type.
  uint32 type = 1 [(mav.opts) = { type: "uint8_t" }];
  // Data length.
  uint32 len = 2 [(mav.opts) = { type: "uint8_t" }];
  // Raw data.
  repeated uint32 data = 3 [(mav.opts) = { type: "uint8_t[96]" }];
}

// Rangefinder reporting.
message RANGEFINDER {  // MavLink id: 173
  option (mav.message).id = 173;
  // Distance.
  float distance = 1 [(mav.opts) = { type: "float" }];
  // Raw voltage if available, zero otherwise.
  float voltage = 2 [(mav.opts) = { type: "float" }];
}

// Airspeed auto-calibration.
message AIRSPEED_AUTOCAL {  // MavLink id: 174
  option (mav.message).id = 174;
  // GPS velocity north.
  float vx = 1 [(mav.opts) = { type: "float" }];
  // GPS velocity east.
  float vy = 2 [(mav.opts) = { type: "float" }];
  // GPS velocity down.
  float vz = 3 [(mav.opts) = { type: "float" }];
  // Differential pressure.
  float diff_pressure = 4 [(mav.opts) = { type: "float" }];
  // Estimated to true airspeed ratio.
  float EAS2TAS = 5 [(mav.opts) = { type: "float" }];
  // Airspeed ratio.
  float ratio = 6 [(mav.opts) = { type: "float" }];
  // EKF state x.
  float state_x = 7 [(mav.opts) = { type: "float" }];
  // EKF state y.
  float state_y = 8 [(mav.opts) = { type: "float" }];
  // EKF state z.
  float state_z = 9 [(mav.opts) = { type: "float" }];
  // EKF Pax.
  float Pax = 10 [(mav.opts) = { type: "float" }];
  // EKF Pby.
  float Pby = 11 [(mav.opts) = { type: "float" }];
  // EKF Pcz.
  float Pcz = 12 [(mav.opts) = { type: "float" }];
}

// A rally point. Used to set a point when from GCS -> MAV. Also used to return a point from MAV -> GCS.
message RALLY_POINT {  // MavLink id: 175
  option (mav.message).id = 175;
  // Latitude of point.
  int32 lat = 1 [(mav.opts) = { type: "int32_t" }];
  // Longitude of point.
  int32 lng = 2 [(mav.opts) = { type: "int32_t" }];
  // Transit / loiter altitude relative to home.
  int32 alt = 3 [(mav.opts) = { type: "int16_t" }];
  // Break altitude relative to home.
  int32 break_alt = 4 [(mav.opts) = { type: "int16_t" }];
  // Heading to aim for when landing.
  uint32 land_dir = 5 [(mav.opts) = { type: "uint16_t" }];
  // System ID.
  uint32 target_system = 6 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 7 [(mav.opts) = { type: "uint8_t" }];
  // Point index (first point is 0).
  uint32 idx = 8 [(mav.opts) = { type: "uint8_t" }];
  // Total number of points (for sanity checking).
  uint32 count = 9 [(mav.opts) = { type: "uint8_t" }];
  // Configuration flags.
  // bitfield defined by enum RALLY_FLAGS
  uint32 flags = 10 [(mav.opts) = { type: "uint8_t", enum: "RALLY_FLAGS" }];
}

// Request a current rally point from MAV. MAV should respond with a RALLY_POINT message. MAV should not respond if the request is invalid.
message RALLY_FETCH_POINT {  // MavLink id: 176
  option (mav.message).id = 176;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Point index (first point is 0).
  uint32 idx = 3 [(mav.opts) = { type: "uint8_t" }];
}

// Status of compassmot calibration.
message COMPASSMOT_STATUS {  // MavLink id: 177
  option (mav.message).id = 177;
  // Current.
  float current = 1 [(mav.opts) = { type: "float" }];
  // Motor Compensation X.
  float CompensationX = 2 [(mav.opts) = { type: "float" }];
  // Motor Compensation Y.
  float CompensationY = 3 [(mav.opts) = { type: "float" }];
  // Motor Compensation Z.
  float CompensationZ = 4 [(mav.opts) = { type: "float" }];
  // Throttle.
  uint32 throttle = 5 [(mav.opts) = { type: "uint16_t" }];
  // Interference.
  uint32 interference = 6 [(mav.opts) = { type: "uint16_t" }];
}

// Status of secondary AHRS filter if available.
message AHRS2 {  // MavLink id: 178
  option (mav.message).id = 178;
  // Roll angle.
  float roll = 1 [(mav.opts) = { type: "float" }];
  // Pitch angle.
  float pitch = 2 [(mav.opts) = { type: "float" }];
  // Yaw angle.
  float yaw = 3 [(mav.opts) = { type: "float" }];
  // Altitude (MSL).
  float altitude = 4 [(mav.opts) = { type: "float" }];
  // Latitude.
  int32 lat = 5 [(mav.opts) = { type: "int32_t" }];
  // Longitude.
  int32 lng = 6 [(mav.opts) = { type: "int32_t" }];
}

// Camera Event.
message CAMERA_STATUS {  // MavLink id: 179
  option (mav.message).id = 179;
  // Image timestamp (since UNIX epoch, according to camera clock).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum).
  float p1 = 2 [(mav.opts) = { type: "float" }];
  // Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum).
  float p2 = 3 [(mav.opts) = { type: "float" }];
  // Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum).
  float p3 = 4 [(mav.opts) = { type: "float" }];
  // Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum).
  float p4 = 5 [(mav.opts) = { type: "float" }];
  // Image index.
  uint32 img_idx = 6 [(mav.opts) = { type: "uint16_t" }];
  // System ID.
  uint32 target_system = 7 [(mav.opts) = { type: "uint8_t" }];
  // Camera ID.
  uint32 cam_idx = 8 [(mav.opts) = { type: "uint8_t" }];
  // Event type.
  CAMERA_STATUS_TYPES event_id = 9 [(mav.opts) = { type: "uint8_t", enum: "CAMERA_STATUS_TYPES" }];
}

// Camera Capture Feedback.
message CAMERA_FEEDBACK {  // MavLink id: 180
  option (mav.message).id = 180;
  // Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Latitude.
  int32 lat = 2 [(mav.opts) = { type: "int32_t" }];
  // Longitude.
  int32 lng = 3 [(mav.opts) = { type: "int32_t" }];
  // Altitude (MSL).
  float alt_msl = 4 [(mav.opts) = { type: "float" }];
  // Altitude (Relative to HOME location).
  float alt_rel = 5 [(mav.opts) = { type: "float" }];
  // Camera Roll angle (earth frame, +-180).
  float roll = 6 [(mav.opts) = { type: "float" }];
  // Camera Pitch angle (earth frame, +-180).
  float pitch = 7 [(mav.opts) = { type: "float" }];
  // Camera Yaw (earth frame, 0-360, true).
  float yaw = 8 [(mav.opts) = { type: "float" }];
  // Focal Length.
  float foc_len = 9 [(mav.opts) = { type: "float" }];
  // Image index.
  uint32 img_idx = 10 [(mav.opts) = { type: "uint16_t" }];
  // System ID.
  uint32 target_system = 11 [(mav.opts) = { type: "uint8_t" }];
  // Camera ID.
  uint32 cam_idx = 12 [(mav.opts) = { type: "uint8_t" }];
  // Feedback flags.
  CAMERA_FEEDBACK_FLAGS flags = 13 [(mav.opts) = { type: "uint8_t", enum: "CAMERA_FEEDBACK_FLAGS" }];
}

// 2nd Battery status
message BATTERY2 {  // MavLink id: 181
  option (mav.message).id = 181;
  // Voltage.
  uint32 voltage = 1 [(mav.opts) = { type: "uint16_t" }];
  // Battery current, -1: autopilot does not measure the current.
  int32 current_battery = 2 [(mav.opts) = { type: "int16_t" }];
}

// Status of third AHRS filter if available. This is for ANU research group (Ali and Sean).
message AHRS3 {  // MavLink id: 182
  option (mav.message).id = 182;
  // Roll angle.
  float roll = 1 [(mav.opts) = { type: "float" }];
  // Pitch angle.
  float pitch = 2 [(mav.opts) = { type: "float" }];
  // Yaw angle.
  float yaw = 3 [(mav.opts) = { type: "float" }];
  // Altitude (MSL).
  float altitude = 4 [(mav.opts) = { type: "float" }];
  // Latitude.
  int32 lat = 5 [(mav.opts) = { type: "int32_t" }];
  // Longitude.
  int32 lng = 6 [(mav.opts) = { type: "int32_t" }];
  // Test variable1.
  float v1 = 7 [(mav.opts) = { type: "float" }];
  // Test variable2.
  float v2 = 8 [(mav.opts) = { type: "float" }];
  // Test variable3.
  float v3 = 9 [(mav.opts) = { type: "float" }];
  // Test variable4.
  float v4 = 10 [(mav.opts) = { type: "float" }];
}

// Request the autopilot version from the system/component.
message AUTOPILOT_VERSION_REQUEST {  // MavLink id: 183
  option (mav.message).id = 183;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Send a block of log data to remote location.
message REMOTE_LOG_DATA_BLOCK {  // MavLink id: 184
  option (mav.message).id = 184;
  // Log data block sequence number.
  MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS seqno = 1 [(mav.opts) = { type: "uint32_t", enum: "MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS" }];
  // System ID.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Log data block.
  repeated uint32 data = 4 [(mav.opts) = { type: "uint8_t[200]" }];
}

// Send Status of each log block that autopilot board might have sent.
message REMOTE_LOG_BLOCK_STATUS {  // MavLink id: 185
  option (mav.message).id = 185;
  // Log data block sequence number.
  uint32 seqno = 1 [(mav.opts) = { type: "uint32_t" }];
  // System ID.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // Log data block status.
  MAV_REMOTE_LOG_DATA_BLOCK_STATUSES status = 4 [(mav.opts) = { type: "uint8_t", enum: "MAV_REMOTE_LOG_DATA_BLOCK_STATUSES" }];
}

// Control vehicle LEDs.
message LED_CONTROL {  // MavLink id: 186
  option (mav.message).id = 186;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Instance (LED instance to control or 255 for all LEDs).
  uint32 instance = 3 [(mav.opts) = { type: "uint8_t" }];
  // Pattern (see LED_PATTERN_ENUM).
  uint32 pattern = 4 [(mav.opts) = { type: "uint8_t" }];
  // Custom Byte Length.
  uint32 custom_len = 5 [(mav.opts) = { type: "uint8_t" }];
  // Custom Bytes.
  repeated uint32 custom_bytes = 6 [(mav.opts) = { type: "uint8_t[24]" }];
}

// Reports progress of compass calibration.
message MAG_CAL_PROGRESS {  // MavLink id: 191
  option (mav.message).id = 191;
  // Body frame direction vector for display.
  float direction_x = 1 [(mav.opts) = { type: "float" }];
  // Body frame direction vector for display.
  float direction_y = 2 [(mav.opts) = { type: "float" }];
  // Body frame direction vector for display.
  float direction_z = 3 [(mav.opts) = { type: "float" }];
  // Compass being calibrated.
  uint32 compass_id = 4 [(mav.opts) = { type: "uint8_t" }];
  // Bitmask of compasses being calibrated.
  uint32 cal_mask = 5 [(mav.opts) = { type: "uint8_t" }];
  // Calibration Status.
  MAG_CAL_STATUS cal_status = 6 [(mav.opts) = { type: "uint8_t", enum: "MAG_CAL_STATUS" }];
  // Attempt number.
  uint32 attempt = 7 [(mav.opts) = { type: "uint8_t" }];
  // Completion percentage.
  uint32 completion_pct = 8 [(mav.opts) = { type: "uint8_t" }];
  // Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid).
  repeated uint32 completion_mask = 9 [(mav.opts) = { type: "uint8_t[10]" }];
}

// Reports results of completed compass calibration. Sent until MAG_CAL_ACK received.
message MAG_CAL_REPORT {  // MavLink id: 192
  option (mav.message).id = 192;
  // RMS milligauss residuals.
  float fitness = 1 [(mav.opts) = { type: "float" }];
  // X offset.
  float ofs_x = 2 [(mav.opts) = { type: "float" }];
  // Y offset.
  float ofs_y = 3 [(mav.opts) = { type: "float" }];
  // Z offset.
  float ofs_z = 4 [(mav.opts) = { type: "float" }];
  // X diagonal (matrix 11).
  float diag_x = 5 [(mav.opts) = { type: "float" }];
  // Y diagonal (matrix 22).
  float diag_y = 6 [(mav.opts) = { type: "float" }];
  // Z diagonal (matrix 33).
  float diag_z = 7 [(mav.opts) = { type: "float" }];
  // X off-diagonal (matrix 12 and 21).
  float offdiag_x = 8 [(mav.opts) = { type: "float" }];
  // Y off-diagonal (matrix 13 and 31).
  float offdiag_y = 9 [(mav.opts) = { type: "float" }];
  // Z off-diagonal (matrix 32 and 23).
  float offdiag_z = 10 [(mav.opts) = { type: "float" }];
  // Compass being calibrated.
  uint32 compass_id = 11 [(mav.opts) = { type: "uint8_t" }];
  // Bitmask of compasses being calibrated.
  uint32 cal_mask = 12 [(mav.opts) = { type: "uint8_t" }];
  // Calibration Status.
  MAG_CAL_STATUS cal_status = 13 [(mav.opts) = { type: "uint8_t", enum: "MAG_CAL_STATUS" }];
  // 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters.
  uint32 autosaved = 14 [(mav.opts) = { type: "uint8_t" }];
}

// EKF Status message including flags and variances.
message EKF_STATUS_REPORT {  // MavLink id: 193
  option (mav.message).id = 193;
  // Velocity variance.
  float velocity_variance = 1 [(mav.opts) = { type: "float" }];
  // Horizontal Position variance.
  float pos_horiz_variance = 2 [(mav.opts) = { type: "float" }];
  // Vertical Position variance.
  float pos_vert_variance = 3 [(mav.opts) = { type: "float" }];
  // Compass variance.
  float compass_variance = 4 [(mav.opts) = { type: "float" }];
  // Terrain Altitude variance.
  float terrain_alt_variance = 5 [(mav.opts) = { type: "float" }];
  // Flags.
  // bitfield defined by enum EKF_STATUS_FLAGS
  uint32 flags = 6 [(mav.opts) = { type: "uint16_t", enum: "EKF_STATUS_FLAGS" }];
}

// PID tuning information.
message PID_TUNING {  // MavLink id: 194
  option (mav.message).id = 194;
  // Desired rate.
  float desired = 1 [(mav.opts) = { type: "float" }];
  // Achieved rate.
  float achieved = 2 [(mav.opts) = { type: "float" }];
  // FF component.
  float FF = 3 [(mav.opts) = { type: "float" }];
  // P component.
  float P = 4 [(mav.opts) = { type: "float" }];
  // I component.
  float I = 5 [(mav.opts) = { type: "float" }];
  // D component.
  float D = 6 [(mav.opts) = { type: "float" }];
  // Axis.
  PID_TUNING_AXIS axis = 7 [(mav.opts) = { type: "uint8_t", enum: "PID_TUNING_AXIS" }];
}

// Deepstall path planning.
message DEEPSTALL {  // MavLink id: 195
  option (mav.message).id = 195;
  // Landing latitude.
  int32 landing_lat = 1 [(mav.opts) = { type: "int32_t" }];
  // Landing longitude.
  int32 landing_lon = 2 [(mav.opts) = { type: "int32_t" }];
  // Final heading start point, latitude.
  int32 path_lat = 3 [(mav.opts) = { type: "int32_t" }];
  // Final heading start point, longitude.
  int32 path_lon = 4 [(mav.opts) = { type: "int32_t" }];
  // Arc entry point, latitude.
  int32 arc_entry_lat = 5 [(mav.opts) = { type: "int32_t" }];
  // Arc entry point, longitude.
  int32 arc_entry_lon = 6 [(mav.opts) = { type: "int32_t" }];
  // Altitude.
  float altitude = 7 [(mav.opts) = { type: "float" }];
  // Distance the aircraft expects to travel during the deepstall.
  float expected_travel_distance = 8 [(mav.opts) = { type: "float" }];
  // Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND).
  float cross_track_error = 9 [(mav.opts) = { type: "float" }];
  // Deepstall stage.
  DEEPSTALL_STAGE stage = 10 [(mav.opts) = { type: "uint8_t", enum: "DEEPSTALL_STAGE" }];
}

// 3 axis gimbal measurements.
message GIMBAL_REPORT {  // MavLink id: 200
  option (mav.message).id = 200;
  // Time since last update.
  float delta_time = 1 [(mav.opts) = { type: "float" }];
  // Delta angle X.
  float delta_angle_x = 2 [(mav.opts) = { type: "float" }];
  // Delta angle Y.
  float delta_angle_y = 3 [(mav.opts) = { type: "float" }];
  // Delta angle X.
  float delta_angle_z = 4 [(mav.opts) = { type: "float" }];
  // Delta velocity X.
  float delta_velocity_x = 5 [(mav.opts) = { type: "float" }];
  // Delta velocity Y.
  float delta_velocity_y = 6 [(mav.opts) = { type: "float" }];
  // Delta velocity Z.
  float delta_velocity_z = 7 [(mav.opts) = { type: "float" }];
  // Joint ROLL.
  float joint_roll = 8 [(mav.opts) = { type: "float" }];
  // Joint EL.
  float joint_el = 9 [(mav.opts) = { type: "float" }];
  // Joint AZ.
  float joint_az = 10 [(mav.opts) = { type: "float" }];
  // System ID.
  uint32 target_system = 11 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 12 [(mav.opts) = { type: "uint8_t" }];
}

// Control message for rate gimbal.
message GIMBAL_CONTROL {  // MavLink id: 201
  option (mav.message).id = 201;
  // Demanded angular rate X.
  float demanded_rate_x = 1 [(mav.opts) = { type: "float" }];
  // Demanded angular rate Y.
  float demanded_rate_y = 2 [(mav.opts) = { type: "float" }];
  // Demanded angular rate Z.
  float demanded_rate_z = 3 [(mav.opts) = { type: "float" }];
  // System ID.
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// 100 Hz gimbal torque command telemetry.
message GIMBAL_TORQUE_CMD_REPORT {  // MavLink id: 214
  option (mav.message).id = 214;
  // Roll Torque Command.
  int32 rl_torque_cmd = 1 [(mav.opts) = { type: "int16_t" }];
  // Elevation Torque Command.
  int32 el_torque_cmd = 2 [(mav.opts) = { type: "int16_t" }];
  // Azimuth Torque Command.
  int32 az_torque_cmd = 3 [(mav.opts) = { type: "int16_t" }];
  // System ID.
  uint32 target_system = 4 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 5 [(mav.opts) = { type: "uint8_t" }];
}

// Heartbeat from a HeroBus attached GoPro.
message GOPRO_HEARTBEAT {  // MavLink id: 215
  option (mav.message).id = 215;
  // Status.
  GOPRO_HEARTBEAT_STATUS status = 1 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_HEARTBEAT_STATUS" }];
  // Current capture mode.
  GOPRO_CAPTURE_MODE capture_mode = 2 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_CAPTURE_MODE" }];
  // Additional status bits.
  // bitfield defined by enum GOPRO_HEARTBEAT_FLAGS
  uint32 flags = 3 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_HEARTBEAT_FLAGS" }];
}

// Request a GOPRO_COMMAND response from the GoPro.
message GOPRO_GET_REQUEST {  // MavLink id: 216
  option (mav.message).id = 216;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Command ID.
  GOPRO_COMMAND cmd_id = 3 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_COMMAND" }];
}

// Response from a GOPRO_COMMAND get request.
message GOPRO_GET_RESPONSE {  // MavLink id: 217
  option (mav.message).id = 217;
  // Command ID.
  GOPRO_COMMAND cmd_id = 1 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_COMMAND" }];
  // Status.
  GOPRO_REQUEST_STATUS status = 2 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_REQUEST_STATUS" }];
  // Value.
  repeated uint32 value = 3 [(mav.opts) = { type: "uint8_t[4]" }];
}

// Request to set a GOPRO_COMMAND with a desired.
message GOPRO_SET_REQUEST {  // MavLink id: 218
  option (mav.message).id = 218;
  // System ID.
  uint32 target_system = 1 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 2 [(mav.opts) = { type: "uint8_t" }];
  // Command ID.
  GOPRO_COMMAND cmd_id = 3 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_COMMAND" }];
  // Value.
  repeated uint32 value = 4 [(mav.opts) = { type: "uint8_t[4]" }];
}

// Response from a GOPRO_COMMAND set request.
message GOPRO_SET_RESPONSE {  // MavLink id: 219
  option (mav.message).id = 219;
  // Command ID.
  GOPRO_COMMAND cmd_id = 1 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_COMMAND" }];
  // Status.
  GOPRO_REQUEST_STATUS status = 2 [(mav.opts) = { type: "uint8_t", enum: "GOPRO_REQUEST_STATUS" }];
}

// EFI status output
message EFI_STATUS {  // MavLink id: 225
  option (mav.message).id = 225;
  // ECU index
  float ecu_index = 1 [(mav.opts) = { type: "float" }];
  // RPM
  float rpm = 2 [(mav.opts) = { type: "float" }];
  // Fuel consumed
  float fuel_consumed = 3 [(mav.opts) = { type: "float" }];
  // Fuel flow rate
  float fuel_flow = 4 [(mav.opts) = { type: "float" }];
  // Engine load
  float engine_load = 5 [(mav.opts) = { type: "float" }];
  // Throttle position
  float throttle_position = 6 [(mav.opts) = { type: "float" }];
  // Spark dwell time
  float spark_dwell_time = 7 [(mav.opts) = { type: "float" }];
  // Barometric pressure
  float barometric_pressure = 8 [(mav.opts) = { type: "float" }];
  // Intake manifold pressure(
  float intake_manifold_pressure = 9 [(mav.opts) = { type: "float" }];
  // Intake manifold temperature
  float intake_manifold_temperature = 10 [(mav.opts) = { type: "float" }];
  // Cylinder head temperature
  float cylinder_head_temperature = 11 [(mav.opts) = { type: "float" }];
  // Ignition timing (Crank angle degrees)
  float ignition_timing = 12 [(mav.opts) = { type: "float" }];
  // Injection time
  float injection_time = 13 [(mav.opts) = { type: "float" }];
  // Exhaust gas temperature
  float exhaust_gas_temperature = 14 [(mav.opts) = { type: "float" }];
  // Output throttle
  float throttle_out = 15 [(mav.opts) = { type: "float" }];
  // Pressure/temperature compensation
  float pt_compensation = 16 [(mav.opts) = { type: "float" }];
  // EFI health status
  uint32 health = 17 [(mav.opts) = { type: "uint8_t" }];
}

// RPM sensor output.
message RPM {  // MavLink id: 226
  option (mav.message).id = 226;
  // RPM Sensor1.
  float rpm1 = 1 [(mav.opts) = { type: "float" }];
  // RPM Sensor2.
  float rpm2 = 2 [(mav.opts) = { type: "float" }];
}

// Read registers for a device.
message DEVICE_OP_READ {  // MavLink id: 11000
  option (mav.message).id = 11000;
  // Request ID - copied to reply.
  uint32 request_id = 1 [(mav.opts) = { type: "uint32_t" }];
  // System ID.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // The bus type.
  DEVICE_OP_BUSTYPE bustype = 4 [(mav.opts) = { type: "uint8_t", enum: "DEVICE_OP_BUSTYPE" }];
  // Bus number.
  uint32 bus = 5 [(mav.opts) = { type: "uint8_t" }];
  // Bus address.
  uint32 address = 6 [(mav.opts) = { type: "uint8_t" }];
  // Name of device on bus (for SPI).
  string busname = 7 [(mav.opts) = { type: "char[40]" }];
  // First register to read.
  uint32 regstart = 8 [(mav.opts) = { type: "uint8_t" }];
  // Count of registers to read.
  uint32 count = 9 [(mav.opts) = { type: "uint8_t" }];
}

// Read registers reply.
message DEVICE_OP_READ_REPLY {  // MavLink id: 11001
  option (mav.message).id = 11001;
  // Request ID - copied from request.
  uint32 request_id = 1 [(mav.opts) = { type: "uint32_t" }];
  // 0 for success, anything else is failure code.
  uint32 result = 2 [(mav.opts) = { type: "uint8_t" }];
  // Starting register.
  uint32 regstart = 3 [(mav.opts) = { type: "uint8_t" }];
  // Count of bytes read.
  uint32 count = 4 [(mav.opts) = { type: "uint8_t" }];
  // Reply data.
  repeated uint32 data = 5 [(mav.opts) = { type: "uint8_t[128]" }];
}

// Write registers for a device.
message DEVICE_OP_WRITE {  // MavLink id: 11002
  option (mav.message).id = 11002;
  // Request ID - copied to reply.
  uint32 request_id = 1 [(mav.opts) = { type: "uint32_t" }];
  // System ID.
  uint32 target_system = 2 [(mav.opts) = { type: "uint8_t" }];
  // Component ID.
  uint32 target_component = 3 [(mav.opts) = { type: "uint8_t" }];
  // The bus type.
  DEVICE_OP_BUSTYPE bustype = 4 [(mav.opts) = { type: "uint8_t", enum: "DEVICE_OP_BUSTYPE" }];
  // Bus number.
  uint32 bus = 5 [(mav.opts) = { type: "uint8_t" }];
  // Bus address.
  uint32 address = 6 [(mav.opts) = { type: "uint8_t" }];
  // Name of device on bus (for SPI).
  string busname = 7 [(mav.opts) = { type: "char[40]" }];
  // First register to write.
  uint32 regstart = 8 [(mav.opts) = { type: "uint8_t" }];
  // Count of registers to write.
  uint32 count = 9 [(mav.opts) = { type: "uint8_t" }];
  // Write data.
  repeated uint32 data = 10 [(mav.opts) = { type: "uint8_t[128]" }];
}

// Write registers reply.
message DEVICE_OP_WRITE_REPLY {  // MavLink id: 11003
  option (mav.message).id = 11003;
  // Request ID - copied from request.
  uint32 request_id = 1 [(mav.opts) = { type: "uint32_t" }];
  // 0 for success, anything else is failure code.
  uint32 result = 2 [(mav.opts) = { type: "uint8_t" }];
}

// Adaptive Controller tuning information.
message ADAP_TUNING {  // MavLink id: 11010
  option (mav.message).id = 11010;
  // Desired rate.
  float desired = 1 [(mav.opts) = { type: "float" }];
  // Achieved rate.
  float achieved = 2 [(mav.opts) = { type: "float" }];
  // Error between model and vehicle.
  float error = 3 [(mav.opts) = { type: "float" }];
  // Theta estimated state predictor.
  float theta = 4 [(mav.opts) = { type: "float" }];
  // Omega estimated state predictor.
  float omega = 5 [(mav.opts) = { type: "float" }];
  // Sigma estimated state predictor.
  float sigma = 6 [(mav.opts) = { type: "float" }];
  // Theta derivative.
  float theta_dot = 7 [(mav.opts) = { type: "float" }];
  // Omega derivative.
  float omega_dot = 8 [(mav.opts) = { type: "float" }];
  // Sigma derivative.
  float sigma_dot = 9 [(mav.opts) = { type: "float" }];
  // Projection operator value.
  float f = 10 [(mav.opts) = { type: "float" }];
  // Projection operator derivative.
  float f_dot = 11 [(mav.opts) = { type: "float" }];
  // u adaptive controlled output command.
  float u = 12 [(mav.opts) = { type: "float" }];
  // Axis.
  PID_TUNING_AXIS axis = 13 [(mav.opts) = { type: "uint8_t", enum: "PID_TUNING_AXIS" }];
}

// Camera vision based attitude and position deltas.
message VISION_POSITION_DELTA {  // MavLink id: 11011
  option (mav.message).id = 11011;
  // Timestamp (synced to UNIX time or since system boot).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Time since the last reported camera frame.
  uint64 time_delta_usec = 2 [(mav.opts) = { type: "uint64_t" }];
  // Defines a rotation vector in body frame that rotates the vehicle from the previous to the current orientation.
  repeated float angle_delta = 3 [(mav.opts) = { type: "float[3]" }];
  // Change in position from previous to current frame rotated into body frame (0=forward, 1=right, 2=down).
  repeated float position_delta = 4 [(mav.opts) = { type: "float[3]" }];
  // Normalised confidence value from 0 to 100.
  float confidence = 5 [(mav.opts) = { type: "float" }];
}

// Angle of Attack and Side Slip Angle.
message AOA_SSA {  // MavLink id: 11020
  option (mav.message).id = 11020;
  // Timestamp (since boot or Unix epoch).
  uint64 time_usec = 1 [(mav.opts) = { type: "uint64_t" }];
  // Angle of Attack.
  float AOA = 2 [(mav.opts) = { type: "float" }];
  // Side Slip Angle.
  float SSA = 3 [(mav.opts) = { type: "float" }];
}

// ESC Telemetry Data for ESCs 1 to 4, matching data sent by BLHeli ESCs.
message ESC_TELEMETRY_1_TO_4 {  // MavLink id: 11030
  option (mav.message).id = 11030;
  // Voltage.
  repeated uint32 voltage = 1 [(mav.opts) = { type: "uint16_t[4]" }];
  // Current.
  repeated uint32 current = 2 [(mav.opts) = { type: "uint16_t[4]" }];
  // Total current.
  repeated uint32 totalcurrent = 3 [(mav.opts) = { type: "uint16_t[4]" }];
  // RPM (eRPM).
  repeated uint32 rpm = 4 [(mav.opts) = { type: "uint16_t[4]" }];
  // count of telemetry packets received (wraps at 65535).
  repeated uint32 count = 5 [(mav.opts) = { type: "uint16_t[4]" }];
  // Temperature.
  repeated uint32 temperature = 6 [(mav.opts) = { type: "uint8_t[4]" }];
}

// ESC Telemetry Data for ESCs 5 to 8, matching data sent by BLHeli ESCs.
message ESC_TELEMETRY_5_TO_8 {  // MavLink id: 11031
  option (mav.message).id = 11031;
  // Voltage.
  repeated uint32 voltage = 1 [(mav.opts) = { type: "uint16_t[4]" }];
  // Current.
  repeated uint32 current = 2 [(mav.opts) = { type: "uint16_t[4]" }];
  // Total current.
  repeated uint32 totalcurrent = 3 [(mav.opts) = { type: "uint16_t[4]" }];
  // RPM (eRPM).
  repeated uint32 rpm = 4 [(mav.opts) = { type: "uint16_t[4]" }];
  // count of telemetry packets received (wraps at 65535).
  repeated uint32 count = 5 [(mav.opts) = { type: "uint16_t[4]" }];
  // Temperature.
  repeated uint32 temperature = 6 [(mav.opts) = { type: "uint8_t[4]" }];
}

// ESC Telemetry Data for ESCs 9 to 12, matching data sent by BLHeli ESCs.
message ESC_TELEMETRY_9_TO_12 {  // MavLink id: 11032
  option (mav.message).id = 11032;
  // Voltage.
  repeated uint32 voltage = 1 [(mav.opts) = { type: "uint16_t[4]" }];
  // Current.
  repeated uint32 current = 2 [(mav.opts) = { type: "uint16_t[4]" }];
  // Total current.
  repeated uint32 totalcurrent = 3 [(mav.opts) = { type: "uint16_t[4]" }];
  // RPM (eRPM).
  repeated uint32 rpm = 4 [(mav.opts) = { type: "uint16_t[4]" }];
  // count of telemetry packets received (wraps at 65535).
  repeated uint32 count = 5 [(mav.opts) = { type: "uint16_t[4]" }];
  // Temperature.
  repeated uint32 temperature = 6 [(mav.opts) = { type: "uint8_t[4]" }];
}
